{\rtf1\ansi \deff0 {\fonttbl {\f0\froman Times New Roman;}
{\f1\froman Times New Roman;}{\f2\froman Times New Roman;}{\f3\fmodern Courier New;}{\f4\froman Times New Roman;}{\f5\froman Arial;}
{\f6\fmodern MS LineDraw;}{\f7\fdecor Symbol;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue127;\red0\green127\blue0;\red0\green127\blue127;\red127\green0\blue0;\red127\green0\blue127;\red127\green127\blue0;\red127\green127\blue127;\red63\green63\blue63;\red0\green0\blue255;\red0\green255\blue0;\red0\green255\blue255;\red255\green0\blue0;\red255\green0\blue255;\red255\green255\blue0;\red255\green255\blue255;}\linex0 \sbknone 
\paperh12240 \paperw20160 \margl1172 \margr990 \margt292 \margb4840 \plain \lang1033 \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tx491 \tqr \tx7288 \qj \li1122 \fi441 \ri50 \sl257 \sbasedon0 \snext2 OmniPage #1;}
{\s3 \tx56 \tqr \tx4693 \ql \sl299 \li1116 \ri2650 \sbasedon0 \snext3 OmniPage #2;}
{\s4 \tx50 \tqr \tx7283 \qj \li1122 \ri60 \sl262 \sbasedon0 \snext4 OmniPage #3;}
{\s5 \tx54 \tx495 \tqr \tx7293 \qj \li1118 \fi441 \ri50 \sl261 \sbasedon0 \snext5 OmniPage #4;}
{\s6 \tx71 \tx512 \tqr \tx7287 \qj \li1101 \fi441 \ri56 \sl264 \sbasedon0 \snext6 OmniPage #5;}
{\s7 \tx50 \tqr \tx3097 \ql \sl196 \li1122 \ri50 \sbasedon0 \snext7 OmniPage #6;}
{\s8 \tx491 \tqr \tx7269 \qj \li1122 \fi441 \ri50 \sl267 \sbasedon0 \snext8 OmniPage #7;}
{\s9 \tx50 \tqr \tx3099 \ql \sl196 \li1122 \ri50 \sbasedon0 \snext9 OmniPage #8;}
{\s10 \tx54 \tqr \tx7262 \qj \li1118 \ri64 \sl264 \sbasedon0 \snext10 OmniPage #9;}
{\s11 \tx50 \tx486 \tqr \tx7276 \qj \li1122 \fi436 \ri50 \sl263 \sbasedon0 \snext11 OmniPage #10;}
{\s12 \tx50 \tqr \tx4074 \ql \sl196 \li1122 \ri50 \sbasedon0 \snext12 OmniPage #11;}
{\s13 \tx68 \tqr \tx7270 \qj \li1104 \ri74 \sl260 \sbasedon0 \snext13 OmniPage #12;}
{\s14 \tx53 \tx494 \tqr \tx7278 \qj \li1119 \fi441 \ri66 \sl258 \sbasedon0 \snext14 OmniPage #13;}
{\s15 \tx50 \tx491 \tqr \tx7294 \qj \li1122 \fi441 \ri50 \sl259 \sbasedon0 \snext15 OmniPage #14;}
{\s16 \tx50 \tqr \tx6673 \qc \sl261 \sbasedon0 \snext16 OmniPage #15;}
{\s17 \tx50 \tqr \tx6723 \qc \sl3046 \sbasedon0 \snext17 OmniPage #16;}
{\s18 \tx50 \tx264 \tqr \tx2002 \ql \li908 \fi-214 \ri50 \sl221 \sbasedon0 \snext18 OmniPage #17;}
{\s19 \tqr \tx2027 \ql \li1122 \ri50 \sl220 \sbasedon0 \snext19 OmniPage #18;}
{\s20 \tqr \tx979 \ql \sl1215 \li1122 \ri50 \sbasedon0 \snext20 OmniPage #19;}
{\s21 \tx157 \tqr \tx1780 \ql \sl225 \li1122 \ri50 \sbasedon0 \snext21 OmniPage #20;}
{\s22 \tqr \tx1657 \ql \li1122 \ri50 \sl219 \sbasedon0 \snext22 OmniPage #21;}
{\s23 \tqr \tx2231 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext23 OmniPage #22;}
{\s24 \tqr \tx1699 \qc \sl261 \sbasedon0 \snext24 OmniPage #23;}
{\s25 \tx239 \tqr \tx3168 \ql \li933 \fi-189 \ri50 \sl217 \sbasedon0 \snext25 OmniPage #24;}
{\s26 \tqr \tx2536 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext26 OmniPage #25;}
}{\pard \posx1761 \posy369 \phpg \pvpg \absh-2111 \absw7339 \dxfrtext200 \fs25 \f0 \pard \s2 \posx1761 \posy369 \phpg \pvpg \absh-2111 \absw7339 \dxfrtext200 \qj \li50 \fi441 \ri50 \sl-257 \tx50 \tx491 \tqr \tx7288 The final parameter in the BOX statement controls the color filling the rectangle. If the last parameter is a 1, then the box will be filled, while if the parameter is not included, or is 0, the box will not be filled and only its outline will appear. Painting is done in the same color as the current color source foregound color. Thus, if you want a box outlined in a different color you must first draw a filled box in the color you want, then change the color to the outline color, and finally draw a non\_filled rectangle over the filled one.\par 
}\linex0 \linemod0 \sbknone \lndscpsxn \pard \sl-257 \tx50 \tx491 \tqr \tx7288 \fs24 \f0 {\pard \posx1775 \posy2787 \phpg \pvpg \absh-4434 \absw7344 \dxfrtext200 \fs10 \f0 \fs30 \f1 \i \pard \s3 \posx1775 \posy2787 \phpg \pvpg \absh-4434 \absw7344 \dxfrtext200 \li56 \ri2650 \sl-299 \tx56 \tqr \tx4693 Circles, Ovals, Arcs, lYiangles and\par 
\pard \s3 \posx1775 \posy2787 \phpg \pvpg \absh-4434 \absw7344 \dxfrtext200 \li56 \ri2650 \sl-299 \tx56 \tqr \tx4693 Polygons: CIRCLE\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s4 \posx1775 \posy2787 \phpg \pvpg \absh-4434 \absw7344 \dxfrtext200 \qj \li50 \ri60 \sl-262 \tx50 \tqr \tx7283 We've mentioned that you can draw circles on the screen before, but we didn't tell you that the \fs23 \f2 CIRCLE \fs25 \f0 statement is provided to draw all kinds of regular shapes on the screen, from circles to ovals, arcs and many\_sided figures like octagons. The syntax for \fs23 \f2 CIRCLE is \fs25 \f0 shown in Figure 6\_7.\par 
\fs10 \f0 \fs25 \f0 \pard \s5 \posx1775 \posy2787 \phpg \pvpg \absh-4434 \absw7344 \dxfrtext200 \qj \li54 \fi441 \ri50 \sl-261 \tx54 \tx495 \tqr \tx7293 The first parameter sets the color source number and the second two parameters control the center of the circle. If they are omitted the default is the pixel cursor. The second two parameters are the x\_radius and the y\-radius. Although it might seem strange to have two different radius pa\-rameters, two are included so that we can draw ellipses. The character of an ellipse is that it has two radius values. If you omit the y\_radius it defaults to the value of the x\_radius. However, this will not give a perfect circle because the X and Y axes are scaled differently.\par 
\fs10 \f0 \fs25 \f0 \pard \s6 \posx1775 \posy2787 \phpg \pvpg \absh-4434 \absw7344 \dxfrtext200 \qj \li71 \fi441 \ri56 \sl-264 \tx71 \tx512 \tqr \tx7287 In the following example, an ellipse is drawn centered on the coor\-dinates I60,100.\par 
}\pard \sl-264 \tx71 \tx512 \tqr \tx7287 \fs24 \f0 {\pard \posx1227 \posy7439 \phpg \pvpg \absh-291 \absw3148 \dxfrtext200 \fs10 \f0 \fs20 \f3 \pard \s7 \posx1227 \posy7439 \phpg \pvpg \absh-291 \absw3148 \dxfrtext200 \li50 \ri50 \sl-196 \tx50 \tqr \tx3097 10 CIRCLE ,16O,100,65,10\par 
}\pard \sl-196 \tx50 \tqr \tx3097 \fs24 \f0 {\pard \posx1798 \posy7930 \phpg \pvpg \absh-579 \absw7320 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s8 \posx1798 \posy7930 \phpg \pvpg \absh-579 \absw7320 \dxfrtext200 \qj \li50 \fi441 \ri50 \sl-267 \tx50 \tx491 \tqr \tx7269 To draw a perfect circle, the y\_radius must be adjusted to compensate for the scaling. This statement will draw a circle:\par 
}\pard \sl-267 \tx50 \tx491 \tqr \tx7269 \fs24 \f0 {\pard \posx1222 \posy8724 \phpg \pvpg \absh-291 \absw3150 \dxfrtext200 \fs10 \f0 \fs20 \f3 \pard \s9 \posx1222 \posy8724 \phpg \pvpg \absh-291 \absw3150 \dxfrtext200 \li50 \ri50 \sl-196 \tx50 \tqr \tx3099 20 CIRCLE ,160,100,65,50\par 
}\pard \sl-196 \tx50 \tqr \tx3099 \fs24 \f0 {\pard \posx1800 \posy9219 \phpg \pvpg \absh-1621 \absw7327 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s10 \posx1800 \posy9219 \phpg \pvpg \absh-1621 \absw7327 \dxfrtext200 \qj \li54 \ri64 \sl-264 \tx54 \tqr \tx7262 Here we see that the y\_radius (50) is made smaller than the x\_radius (65) by a ratio of about .77.\par 
\fs10 \f0 \fs25 \f0 \pard \s11 \posx1800 \posy9219 \phpg \pvpg \absh-1621 \absw7327 \dxfrtext200 \qj \li50 \fi436 \ri50 \sl-263 \tx50 \tx486 \tqr \tx7276 The parameters after the radii are used to draw some portion of the circumference of the circle. The parameter sa is the starting angle for the circumference and the parameter ea is the ending angle for the circumfer\-ence. Thus the statement:\par 
}\pard \sl-263 \tx50 \tx486 \tqr \tx7276 \fs24 \f0 {\pard \posx1235 \posy11048 \phpg \pvpg \absh-291 \absw4125 \dxfrtext200 \fs10 \f0 \fs20 \f3 \pard \s12 \posx1235 \posy11048 \phpg \pvpg \absh-291 \absw4125 \dxfrtext200 \li50 \ri50 \sl-196 \tx50 \tqr \tx4074 100 CIRCLE ,160,100,65,50,90,270\par 
}\pard \sl-196 \tx50 \tqr \tx4074 \fs24 \f0 {\pard \posx11268 \posy400 \phpg \pvpg \absh-3402 \absw7345 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s13 \posx11268 \posy400 \phpg \pvpg \absh-3402 \absw7345 \dxfrtext200 \qj \li68 \ri74 \sl-260 \tx68 \tqr \tx7270 will draw an arc starting at the 90 degree mark (3 o'clock) and ending at the 270 degree mark (9 o'clock). This will look like a smile.\par 
\fs10 \f0 \fs25 \f0 \pard \s14 \posx11268 \posy400 \phpg \pvpg \absh-3402 \absw7345 \dxfrtext200 \qj \li53 \fi441 \ri66 \sl-258 \tx53 \tx494 \tqr \tx7278 Figure 6\_8 shows an example of the meaning of the parameters of the \fs23 \f2 CIRCLE \fs25 \f0 statement.\par 
\fs10 \f0 \fs25 \f0 \pard \s15 \posx11268 \posy400 \phpg \pvpg \absh-3402 \absw7345 \dxfrtext200 \qj \li50 \fi441 \ri50 \sl-259 \tx50 \tx491 \tqr \tx7294 The second\_to\_last parameter in the \fs23 \f2 CIRCLE \fs25 \f0 statement is called angle. As in the BOX statement, it sets the rotation for the shape drawn with \fs23 \f2 CIRCLE. \fs25 \f0 The angle of rotation is specified in degrees clockwise and the rotation center is the center of the circle (a,b). The rotation parameter allows us to rotate an ellipse or an arc easily. The last parameter in the \fs23 \f2 CIRCLE \fs25 \f0 statement is the most interesting one. The parameter inc sets increment in degrees between "segments" that will be drawn when the parameter is used. This works because the circle is actually being drawn already in very small 2\_degree segments. The segments connect along the\par 
}\pard \sl-259 \tx50 \tx491 \tqr \tx7294 \fs24 \f0 {\pard \posx11626 \posy4826 \phpg \pvpg \absh-312 \absw6724 \dxfrtext200 \fs10 \f0 \fs25 \f4 \b \pard \s16 \posx11626 \posy4826 \phpg \pvpg \absh-312 \absw6724 \dxfrtext200 \qc \sl-261 \tx50 \tqr \tx6673 Figure 6\_7. The CIRCLE Statement Syntax Draws Many Regular\par 
}\pard \sl-261 \tx50 \tqr \tx6673 \fs24 \f0 {\pard \posx10741 \posy5430 \phpg \pvpg \absh-6092 \absw6774 \dxfrtext200 \fs10 \f0 \fs20 \f3 \plain \fs20 \f3 \lang1033 \pard \s17 \posx10741 \posy5430 \phpg \pvpg \absh-6092 \absw6774 \dxfrtext200 \qc \sl-3046 \tx50 \tqr \tx6723 CIRCLE color sources, a, b, xr, ye, sa, ea. angle, inc\par 
\fs444 \f5 \pard \s17 \posx10741 \posy5430 \phpg \pvpg \absh-6092 \absw6774 \dxfrtext200 \qc \sl-3046 \tx50 \tqr \tx6723 L\par 
}\pard \sl-3046 \tx50 \tqr \tx6723 \fs24 \f0 {\pard \posx17068 \posy5927 \phpg \pvpg \absh-1198 \absw2053 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s18 \posx17068 \posy5927 \phpg \pvpg \absh-1198 \absw2053 \dxfrtext200 \li264 \fi-214 \ri50 \sl-221 \tx50 \tx264 \tqr \tx2002 iL Degrees between segments (default is 2\'b0) Controls number of sides of polygon\par 
}\pard \sl-221 \tx50 \tx264 \tqr \tx2002 \fs24 \f0 {\pard \posx14515 \posy5660 \phpg \pvpg \absh-3561 \absw1636 \dxfrtext200 \pard \posx14515 \posy5660 \phpg \pvpg \absh-3561 \absw1636 \dxfrtext200 \tx50 {\pict \wmetafile8 \picw1636 \pich3561 \picwGoal1636 \pichGoal3561 \picscalex100 \picscaley100 }\par }\pard \tx50 {\pard \posx17035 \posy7253 \phpg \pvpg \absh-752 \absw2078 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s19 \posx17035 \posy7253 \phpg \pvpg \absh-752 \absw2078 \dxfrtext200 \li50 \ri50 \sl-220 \tx50 \tqr \tx2027 Rotation in clockwise degrees, 0 to 360 (default is Go)\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \pard \sl-220 \tx50 \tqr \tx2027 \fs24 \f0 {\pard \posx15691 \posy8066 \phpg \pvpg \absh-312 \absw1030 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s20 \posx15691 \posy8066 \phpg \pvpg \absh-312 \absw1030 \dxfrtext200 \li50 \ri50 \sl-1215 \tx50 \tqr \tx979 L\par 
}\pard \sl-1215 \tx50 \tqr \tx979 \fs24 \f0 {\pard \posx16455 \posy8132 \phpg \pvpg \absh-537 \absw1831 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s21 \posx16455 \posy8132 \phpg \pvpg \absh-537 \absw1831 \dxfrtext200 \li50 \ri50 \sl-225 \tx50 \tx157 \tqr \tx1780 \_Ending arc angle\par 
\pard \s21 \posx16455 \posy8132 \phpg \pvpg \absh-537 \absw1831 \dxfrtext200 \li157 \ri50 \sl-225 \tx50 \tx157 \tqr \tx1780 (default is 360\'b0)\par 
}\pard \sl-225 \tx50 \tx157 \tqr \tx1780 \fs24 \f0 {\pard \posx15978 \posy8796 \phpg \pvpg \absh-531 \absw1708 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s22 \posx15978 \posy8796 \phpg \pvpg \absh-531 \absw1708 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tqr \tx1657 Starting arc angle (default is no)\par 
}\pard \sl-219 \tx50 \tqr \tx1657 \fs24 \f0 {\pard \posx15550 \posy9458 \phpg \pvpg \absh-312 \absw2282 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s23 \posx15550 \posy9458 \phpg \pvpg \absh-312 \absw2282 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx2231 Y radius (default is xr)\par 
}\pard \sl-261 \tx50 \tqr \tx2231 \fs24 \f0 {\pard \posx14943 \posy9896 \phpg \pvpg \absh-312 \absw1750 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s24 \posx14943 \posy9896 \phpg \pvpg \absh-312 \absw1750 \dxfrtext200 \qc \sl-261 \tx50 \tqr \tx1699 X radius (scaled)\par 
}\pard \sl-261 \tx50 \tqr \tx1699 \fs24 \f0 {\pard \posx14085 \posy10344 \phpg \pvpg \absh-529 \absw3219 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s25 \posx14085 \posy10344 \phpg \pvpg \absh-529 \absw3219 \dxfrtext200 \li239 \fi-189 \ri50 \sl-217 \tx50 \tx239 \tqr \tx3168 \'97Center coordinate of circle, poly, etc. (scaled, defaults to PC)\par 
}\pard \sl-217 \tx50 \tx239 \tqr \tx3168 \fs24 \f0 {\pard \posx13599 \posy10999 \phpg \pvpg \absh-312 \absw2587 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s26 \posx13599 \posy10999 \phpg \pvpg \absh-312 \absw2587 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx2536 Color source number (0\_3)\par 
}\pard \sl-261 \tx50 \tqr \tx2536 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx7285 \qj \li1122 \ri50 \sl257 \sbasedon0 \snext2 OmniPage #257;}
{\s3 \tqr \tx8093 \ql \sl221 \li1122 \ri50 \sbasedon0 \snext3 OmniPage #258;}
{\s4 \tqr \tx3801 \ql \sl312 \li1122 \ri3536 \sbasedon0 \snext4 OmniPage #259;}
{\s5 \tx61 \tqr \tx7287 \ql \li1111 \ri50 \sl271 \sbasedon0 \snext5 OmniPage #260;}
{\s6 \tx50 \tqr \tx4624 \qc \sl261 \sbasedon0 \snext6 OmniPage #261;}
{\s7 \tx50 \tqr \tx435 \ql \sl417 \li1122 \ri50 \sbasedon0 \snext7 OmniPage #262;}
{\s8 \tqr \tx7270 \qj \li1122 \ri50 \sl260 \sbasedon0 \snext8 OmniPage #263;}
{\s9 \tqr \tx3930 \ql \sl211 \li1122 \ri50 \sbasedon0 \snext9 OmniPage #264;}
{\s10 \tx487 \tqr \tx7292 \qj \li1122 \fi437 \ri50 \sl260 \sbasedon0 \snext10 OmniPage #265;}
{\s11 \tx61 \tx498 \tqr \tx7259 \qj \li1111 \fi437 \ri83 \sl261 \sbasedon0 \snext11 OmniPage #266;}
{\s12 \tx50 \tqr \tx8047 \ql \sl192 \li1122 \ri50 \sbasedon0 \snext12 OmniPage #267;}
{\s13 \tx68 \tqr \tx4581 \ql \sl312 \li1104 \ri2746 \sbasedon0 \snext13 OmniPage #268;}
{\s14 \tx50 \tqr \tx7277 \qj \li1122 \ri50 \sl261 \sbasedon0 \snext14 OmniPage #269;}
{\s15 \tqr \tx5626 \ql \sl211 \li1122 \ri50 \sbasedon0 \snext15 OmniPage #270;}
{\s16 \tx492 \tqr \tx7297 \qj \li1122 \fi442 \ri50 \sl260 \sbasedon0 \snext16 OmniPage #271;}
{\s17 \tx62 \tx504 \tqr \tx7266 \qj \li1110 \fi442 \ri81 \sl261 \sbasedon0 \snext17 OmniPage #272;}
}\par {\pard \posx1645 \posy243 \phpg \pvpg \absh-1597 \absw7336 \dxfrtext200 \fs25 \f0 \pard \s2 \posx1645 \posy243 \phpg \pvpg \absh-1597 \absw7336 \dxfrtext200 \qj \li50 \ri50 \sl-257 \tx50 \tqr \tx7285 circumference of the circle, but since the segments are so small the circle looks like a circle. If we include the inc parameter and put an angle in it, such as 120, the CIRCLE statement will interpret this to mean the number of degrees between segments, and will figure out that there are three segments, hence a triangle. Here are some examples of using the inc parameter:\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1022 \margrsxn1325 \pard \sl-257 \tx50 \tqr \tx7285 \fs24 \f0 {\pard \posx1072 \posy2073 \phpg \pvpg \absh-517 \absw8144 \dxfrtext200 \fs10 \f0 \fs22 \f1 \pard \s3 \posx1072 \posy2073 \phpg \pvpg \absh-517 \absw8144 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx8093 100 CIRCLE ,60,40,20,18,,,,45: REM draws an octagon (8 sides)\par 
\pard \s3 \posx1072 \posy2073 \phpg \pvpg \absh-517 \absw8144 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx8093 110 CIRCLE ,260,40,20,18,,,,90: REM draws a diamond (4 sides)\par 
}\pard \sl-221 \tx50 \tqr \tx8093 \fs24 \f0 {\pard \posx1675 \posy2880 \phpg \pvpg \absh-1241 \absw7338 \dxfrtext200 \fs10 \f0 \fs30 \f2 \i \pard \s4 \posx1675 \posy2880 \phpg \pvpg \absh-1241 \absw7338 \dxfrtext200 \li50 \ri3536 \sl-312 \tx50 \tqr \tx3801 Filling and Painting: PAINT\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s5 \posx1675 \posy2880 \phpg \pvpg \absh-1241 \absw7338 \dxfrtext200 \li61 \ri50 \sl-271 \tx61 \tqr \tx7287 You may have noticed that you could not specify a paint or not paint parameter in CIRCLE like you could in BOX. The statement PAINT allows you to fill any enclosed (completely outlined) shape with color. The color\par 
}\pard \sl-271 \tx61 \tqr \tx7287 \fs24 \f0 {\pard \posx3061 \posy4698 \phpg \pvpg \absh-312 \absw4675 \dxfrtext200 \fs10 \f0 \fs25 \f3 \b \pard \s6 \posx3061 \posy4698 \phpg \pvpg \absh-312 \absw4675 \dxfrtext200 \qc \sl-261 \tx50 \tqr \tx4624 Figure 6\_8. Example of CIRCLE Parameters\par 
}\pard \sl-261 \tx50 \tqr \tx4624 \fs24 \f0 {\pard \posx10538 \posy0 \phpg \pvpg \absh-415 \absw486 \dxfrtext200 \fs10 \f0 \fs29 \f4 \plain \fs29 \f4 \lang1033 \pard \s7 \posx10538 \posy0 \phpg \pvpg \absh-415 \absw486 \dxfrtext200 \li50 \ri50 \sl-417 \tx50 \tqr \tx435 r\par 
}\pard \sl-417 \tx50 \tqr \tx435 \fs24 \f0 {\pard \posx11268 \posy221 \phpg \pvpg \absh-832 \absw7321 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s8 \posx11268 \posy221 \phpg \pvpg \absh-832 \absw7321 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7270 filling the outline must be either the same color as the fill outline or any non\_background color if you are in a multi\_color mode where there is more then one foreground color. The syntax of the PAINT statement is:\par 
}\pard \sl-260 \tx50 \tqr \tx7270 \fs24 \f0 {\pard \posx10675 \posy1271 \phpg \pvpg \absh-296 \absw3981 \dxfrtext200 \fs10 \f0 \fs22 \f1 \pard \s9 \posx10675 \posy1271 \phpg \pvpg \absh-296 \absw3981 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx3930 PAINT color source, a, b, mode\par 
}\pard \sl-211 \tx50 \tqr \tx3930 \fs24 \f0 {\pard \posx11254 \posy1746 \phpg \pvpg \absh-2652 \absw7343 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s10 \posx11254 \posy1746 \phpg \pvpg \absh-2652 \absw7343 \dxfrtext200 \qj \li50 \fi437 \ri50 \sl-260 \tx50 \tx487 \tqr \tx7292 Here, color source is a number between O and 3 and represents the screen that you wish to paint on. The parameters a and b represent the starting coordinates for the filling, with the PC being the default if omitted. The mode parameter if O specifies an area defined by the color source, and if 1 specifies an area defined by any non\_background source. If the location of a and b is already colored, the Commodore 128 will not paint the area enclosed by the boundry of your shape. You must pick a new starting point inside a shape not filled with a foreground color.\par 
\fs10 \f0 \fs25 \f0 \pard \s11 \posx11254 \posy1746 \phpg \pvpg \absh-2652 \absw7343 \dxfrtext200 \qj \li61 \fi437 \ri83 \sl-261 \tx61 \tx498 \tqr \tx7259 Here is an example of using PAINT. We draw a circle and then fill it with foreground color:\par 
}\pard \sl-261 \tx61 \tx498 \tqr \tx7259 \fs24 \f0 {\pard \posx10688 \posy4626 \phpg \pvpg \absh-488 \absw8098 \dxfrtext200 \fs10 \f0 \fs22 \f1 \pard \s12 \posx10688 \posy4626 \phpg \pvpg \absh-488 \absw8098 \dxfrtext200 \li50 \ri50 \sl-192 \tx50 \tqr \tx8047 10 CIRCLE ,160,100,65,50: REM draws a circle about 160,100\par 
\pard \s12 \posx10688 \posy4626 \phpg \pvpg \absh-488 \absw8098 \dxfrtext200 \li50 \ri50 \sl-192 \tx50 \tqr \tx8047 20 PAINT ,160,100: REM fills circle with foreground color\par 
}\pard \sl-192 \tx50 \tqr \tx8047 \fs24 \f0 {\pard \posx11245 \posy5442 \phpg \pvpg \absh-2806 \absw7328 \dxfrtext200 \fs10 \f0 \fs30 \f2 \i \pard \s13 \posx11245 \posy5442 \phpg \pvpg \absh-2806 \absw7328 \dxfrtext200 \li68 \ri2746 \sl-312 \tx68 \tqr \tx4581 Mixing Text with Graphics: CHAR\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s14 \posx11245 \posy5442 \phpg \pvpg \absh-2806 \absw7328 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7277 As we explained the different graphic modes for the C128, we noted that the two text modes (40\_and 80\_column) could only be mixed with the bit\-mapped graphics modes by using a split screen. If you are in the bit\-mapped mode and you type a character, it will be send to the text mode screen and you will not see it unless you have the screen split. But what if you want to add labels right next to figures drawn on the bit\_mapped display screen, such as graphs, forms, and so on? Commodore 128 BASIC 7.0 provides the CHAR statement for drawing characters on the bit\_mapped screen. The syntax of CHAR is:\par 
}\pard \sl-261 \tx50 \tqr \tx7277 \fs24 \f0 {\pard \posx10683 \posy8437 \phpg \pvpg \absh-296 \absw5677 \dxfrtext200 \fs10 \f0 \fs22 \f1 \pard \s15 \posx10683 \posy8437 \phpg \pvpg \absh-296 \absw5677 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx5626 CHAR color source, x, y, string, reverse flag\par 
}\pard \sl-211 \tx50 \tqr \tx5626 \fs24 \f0 {\pard \posx11239 \posy8965 \phpg \pvpg \absh-2137 \absw7348 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s16 \posx11239 \posy8965 \phpg \pvpg \absh-2137 \absw7348 \dxfrtext200 \qj \li50 \fi442 \ri50 \sl-260 \tx50 \tx492 \tqr \tx7297 Here the color source is the screen mode you want to put the character on, x is the character column (0\_39) and y is the character row (0\_24). Note that CHAR does not start at a pixel coordinate, but rather a text row/ column, which is much coarser. Therefore to (for instance) draw a title centered inside a circle, you will have to draw the title first, then draw the circle and adjust it pixel by pixel until it's right.\par 
\fs10 \f0 \fs25 \f0 \pard \s17 \posx11239 \posy8965 \phpg \pvpg \absh-2137 \absw7348 \dxfrtext200 \qj \li62 \fi442 \ri81 \sl-261 \tx62 \tx504 \tqr \tx7266 The string parameter is the text you wish displayed. The string will wrap around if it's too long to fit on a line. The reverse flag parameter\par 
}\pard \sl-261 \tx62 \tx504 \tqr \tx7266 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx7262 \qj \li1122 \ri76 \sl246 \sbasedon0 \snext2 OmniPage #513;}
{\s3 \tx59 \tx498 \tqr \tx7288 \qj \li1113 \fi439 \ri50 \sl259 \sbasedon0 \snext3 OmniPage #514;}
{\s4 \tx83 \tx522 \tqr \tx7280 \qj \li1089 \fi439 \ri58 \sl266 \sbasedon0 \snext4 OmniPage #515;}
{\s5 \tx50 \tqr \tx7288 \ql \li1122 \ri50 \sl222 \sbasedon0 \snext5 OmniPage #516;}
{\s6 \tqr \tx5792 \ql \li1122 \ri50 \sl303 \sbasedon0 \snext6 OmniPage #517;}
{\s7 \tqr \tx7257 \qj \li1122 \ri50 \sl260 \sbasedon0 \snext7 OmniPage #518;}
{\s8 \tqr \tx1206 \ql \sl217 \li1122 \ri50 \sbasedon0 \snext8 OmniPage #519;}
{\s9 \tqr \tx7288 \qj \li1122 \ri59 \sl263 \sbasedon0 \snext9 OmniPage #520;}
{\s10 \tx70 \tx504 \tqr \tx7297 \qj \li1102 \fi434 \ri50 \sl261 \sbasedon0 \snext10 OmniPage #521;}
{\s11 \tx50 \tqr \tx1540 \ql \li1122 \ri50 \sl222 \sbasedon0 \snext11 OmniPage #522;}
{\s12 \tqr \tx7280 \qj \li1122 \ri50 \sl255 \sbasedon0 \snext12 OmniPage #523;}
{\s13 \tqr \tx5000 \ql \sl319 \li1122 \ri50 \sbasedon0 \snext13 OmniPage #524;}
{\s14 \tx62 \tqr \tx7287 \qj \li1110 \ri50 \sl258 \sbasedon0 \snext14 OmniPage #525;}
{\s15 \tx54 \tx498 \tqr \tx7282 \qj \li1118 \fi444 \ri55 \sl259 \sbasedon0 \snext15 OmniPage #526;}
{\s16 \tx50 \tx494 \tqr \tx7276 \qj \li1122 \fi444 \ri61 \sl260 \sbasedon0 \snext16 OmniPage #527;}
{\s17 \tx50 \tx494 \tqr \tx7272 \qj \li1122 \fi444 \ri65 \sl258 \sbasedon0 \snext17 OmniPage #528;}
{\s18 \tx50 \tqr \tx4728 \qj \li1122 \ri50 \sl261 \sbasedon0 \snext18 OmniPage #529;}
{\s19 \tqr \tx2839 \ql \sl73 \li1122 \ri50 \sbasedon0 \snext19 OmniPage #530;}
{\s20 \tx83 \tqr \tx5432 \ql \sl319 \li1089 \ri1898 \sbasedon0 \snext20 OmniPage #531;}
{\s21 \tx50 \tqr \tx7280 \qj \li1122 \ri50 \sl260 \sbasedon0 \snext21 OmniPage #532;}
}\par {\pard \posx1591 \posy466 \phpg \pvpg \absh-2636 \absw7339 \dxfrtext200 \fs25 \f0 \pard \s2 \posx1591 \posy466 \phpg \pvpg \absh-2636 \absw7339 \dxfrtext200 \qj \li50 \ri76 \sl-246 \tx50 \tqr \tx7262 changes the \fs25 \f1 \b character "field" to \fs25 \f0 \plain \fs25 \lang1033 inverse if it's 1, and makes it "normal" if it's 0.\par 
\fs10 \f0 \fs25 \f0 \pard \s3 \posx1591 \posy466 \phpg \pvpg \absh-2636 \absw7339 \dxfrtext200 \qj \li59 \fi439 \ri50 \sl-259 \tx59 \tx498 \tqr \tx7288 CHAR gets its text directly from the Commodore \fs23 \f2 128 \fs25 \f0 ROM. In the graphics mode, CHAR does not offer all the treats that PRINT does in the text mode. You can't put control characters or graphics in the CHAR statement and see them appear on the graphics screen. But CHAR can be used in the text mode, and then will allow control and graphics character features to work.\par 
\fs10 \f0 \fs25 \f0 \pard \s4 \posx1591 \posy466 \phpg \pvpg \absh-2636 \absw7339 \dxfrtext200 \qj \li83 \fi439 \ri58 \sl-266 \tx83 \tx522 \tqr \tx7280 Here is an example of drawing a circle and putting a label "Circle" inside it.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn994 \margrsxn1438 \pard \sl-266 \tx83 \tx522 \tqr \tx7280 \fs24 \f0 {\pard \posx1044 \posy3312 \phpg \pvpg \absh-529 \absw7339 \dxfrtext200 \fs10 \f0 \fs23 \f2 \pard \s5 \posx1044 \posy3312 \phpg \pvpg \absh-529 \absw7339 \dxfrtext200 \li50 \ri50 \sl-222 \tx50 \tqr \tx7288 10 CIRCLE ,160,100,65,50: REM draws a circle about 160,100 20 CHAR 1,17,12,"Circle": REM puts a label in center\par 
}\pard \sl-222 \tx50 \tqr \tx7288 \fs24 \f0 {\pard \posx1625 \posy4131 \phpg \pvpg \absh-675 \absw5843 \dxfrtext200 \fs10 \f0 \fs30 \f3 \i \pard \s6 \posx1625 \posy4131 \phpg \pvpg \absh-675 \absw5843 \dxfrtext200 \li50 \ri50 \sl-303 \tx50 \tqr \tx5792 Finding OutAboutPixels and Modes: RDOT and RCLR\par 
}\pard \sl-303 \tx50 \tqr \tx5792 \fs24 \f0 {\pard \posx1636 \posy4859 \phpg \pvpg \absh-1877 \absw7308 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s7 \posx1636 \posy4859 \phpg \pvpg \absh-1877 \absw7308 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7257 If you use the Commodore \fs23 \f2 128 \fs25 \f0 in its BASIC mode one of the things you will find yourself doing frequently is moving objects, and then trying to determine whether the object is on top of or touching another object or a particular backgound. Sometimes you need to know where the PC is and do not want to have your program try to keep track of it. The function for determining the position of the PC and the color source for that location is called RDOT, and its syntax is as follows:\par 
}\pard \sl-260 \tx50 \tqr \tx7257 \fs24 \f0 {\pard \posx1061 \posy6951 \phpg \pvpg \absh-307 \absw1257 \dxfrtext200 \fs10 \f0 \fs23 \f2 \pard \s8 \posx1061 \posy6951 \phpg \pvpg \absh-307 \absw1257 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx1206 RDOT (N)\par 
}\pard \sl-217 \tx50 \tqr \tx1206 \fs24 \f0 {\pard \posx1637 \posy7453 \phpg \pvpg \absh-2401 \absw7348 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s9 \posx1637 \posy7453 \phpg \pvpg \absh-2401 \absw7348 \dxfrtext200 \qj \li50 \ri59 \sl-263 \tx50 \tqr \tx7288 Assuming the PC is set, if N is 0, the x position of the pixel cursor is returned, if N is 1, the y position of the pixel cursor is returned and if N \fs23 \f2 is2 \fs25 \f0 the color source for the pixel is returned (i.e., a number representing the mode we are using).\par 
\fs10 \f0 \fs25 \f0 \pard \s10 \posx1637 \posy7453 \phpg \pvpg \absh-2401 \absw7348 \dxfrtext200 \qj \li70 \fi434 \ri50 \sl-261 \tx70 \tx504 \tqr \tx7297 The RCLR function is used to return the color assigned to the color source N. where N is between 0 and \fs23 \f2 6 \fs25 \f0 as shown earlier in Table \fs23 \f2 6\_3. \fs25 \f0 The RCLR returns a number between 1 and \fs23 \f2 16 \fs25 \f0 (listed in Table \fs23 \f2 6\_2). \fs25 \f0 For example, if you set the foreground color of the graphics mode to six, then when you used:\par 
}\pard \sl-261 \tx70 \tx504 \tqr \tx7297 \fs24 \f0 {\pard \posx1101 \posy10063 \phpg \pvpg \absh-529 \absw1591 \dxfrtext200 \fs10 \f0 \fs23 \f2 \pard \s11 \posx1101 \posy10063 \phpg \pvpg \absh-529 \absw1591 \dxfrtext200 \li50 \ri50 \sl-222 \tx50 \tqr \tx1540 10 X=RCLR(2) 20 PRINT X\par 
}\pard \sl-222 \tx50 \tqr \tx1540 \fs24 \f0 {\pard \posx11342 \posy388 \phpg \pvpg \absh-822 \absw7331 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s12 \posx11342 \posy388 \phpg \pvpg \absh-822 \absw7331 \dxfrtext200 \qj \li50 \ri50 \sl-255 \tx50 \tqr \tx7280 X will be equal to six. You use RCLR with RDOT to determine the exact color of a pixel for a particular color source. The RGR statement returns the current graphics mode, which is between 0 and 6.\par 
}\pard \sl-255 \tx50 \tqr \tx7280 \fs24 \f0 {\pard \posx11370 \posy1512 \phpg \pvpg \absh-372 \absw5051 \dxfrtext200 \fs10 \f0 \fs30 \f3 \i \pard \s13 \posx11370 \posy1512 \phpg \pvpg \absh-372 \absw5051 \dxfrtext200 \li50 \ri50 \sl-319 \tx50 \tqr \tx5000 Changing the Size of Images: SCALE\par 
}\pard \sl-319 \tx50 \tqr \tx5000 \fs24 \f0 {\pard \posx11323 \posy1932 \phpg \pvpg \absh-5744 \absw7338 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s14 \posx11323 \posy1932 \phpg \pvpg \absh-5744 \absw7338 \dxfrtext200 \qj \li62 \ri50 \sl-258 \tx62 \tqr \tx7287 One command in the Commodore \fs23 \f2 128 \fs25 \f0 vocabulary that may be useful allows you to alter the normal scale on the screen from its normal \fs23 \f2 320 x 200 \fs25 \f0 to a second format of \fs23 \f2 1024 \fs25 \f0 by \fs23 \f2 1024! \fs25 \f0 Before you go crazy thinking you have access to every point on such a large screen, take heed: there are still only \fs23 \f2 320x200 \fs25 \f0 pixels on the screen. But each one no longer represents a distance of just one. Now each horizontal dot is equivalent to \fs23 \f2 1024/320 \fs25 \f0 or \fs23 \f2 3.2 \fs25 \f0 units, and every vertical dot is equivalent to \fs23 \f2 5.12 \fs25 \f0 dots.\par 
\fs10 \f0 \fs25 \f0 \pard \s15 \posx11323 \posy1932 \phpg \pvpg \absh-5744 \absw7338 \dxfrtext200 \qj \li54 \fi444 \ri55 \sl-259 \tx54 \tx498 \tqr \tx7282 The new, larger screen matrix created by SCALE is useful for adapting graphic programs which are already written for many computers. Dozens of high\_end graphics terminals have screen limits of \fs23 \f2 1024 \fs25 \f0 by \fs23 \f2 1024, \fs25 \f0 and there are hundreds of professional programs written to these scales. With the \fs23 \f2 C128 \fs25 \f0 SCALE command it is possible to more easily adapt these program without having to recalculate all the coordinates.\par 
\fs10 \f0 \fs25 \f0 \pard \s16 \posx11323 \posy1932 \phpg \pvpg \absh-5744 \absw7338 \dxfrtext200 \qj \li50 \fi444 \ri61 \sl-260 \tx50 \tx494 \tqr \tx7276 Understand that if you have designed a program that draws objects just in the area defined by the coordinates \fs23 \f2 320 x 200, \fs25 \f0 should you forget to adjust the coordinates and switch to the \fs23 \f2 1024 x 1024 \fs25 \f0 mode, your program will do all its output to a small area in the upper left corner segment of the \fs23 \f2 1024 \fs25 \f0 display.\par 
\fs10 \f0 \fs25 \f0 \pard \s17 \posx11323 \posy1932 \phpg \pvpg \absh-5744 \absw7338 \dxfrtext200 \qj \li50 \fi444 \ri65 \sl-258 \tx50 \tx494 \tqr \tx7272 This statement also has the effect of equalizing the coordinates for shapes drawn in all graphics modes. That is, the normal multicolor mode is 160 x \fs23 \f2 200, \fs25 \f0 while standard graphics mode is \fs23 \f2 320 x 200. \fs25 \f0 When SCALE is set to 1, these two modes both have the range \fs23 \f2 1024 x1024 \fs25 \f0 and respond\par 
}\pard \sl-258 \tx50 \tx494 \tqr \tx7272 \fs24 \f0 {\pard \posx11335 \posy7676 \phpg \pvpg \absh-287 \absw4779 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s18 \posx11335 \posy7676 \phpg \pvpg \absh-287 \absw4779 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx4728 in equal distances to the coordinates fed them.\par 
}\pard \sl-261 \tx50 \tqr \tx4728 \fs24 \f0 {\pard \posx11364 \posy8185 \phpg \pvpg \absh-312 \absw2890 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s19 \posx11364 \posy8185 \phpg \pvpg \absh-312 \absw2890 \dxfrtext200 \li50 \ri50 \sl-73 \tx50 \tqr \tx2839 ^! ~ . . ~\par 
}\pard \sl-73 \tx50 \tqr \tx2839 \fs24 \f0 {\pard \posx11308 \posy8275 \phpg \pvpg \absh-2561 \absw7331 \dxfrtext200 \fs10 \f0 \fs30 \f3 \i \pard \s20 \posx11308 \posy8275 \phpg \pvpg \absh-2561 \absw7331 \dxfrtext200 \li83 \ri1898 \sl-319 \tx83 \tqr \tx5432 anape ~avmg and Drawing with Strings\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s21 \posx11308 \posy8275 \phpg \pvpg \absh-2561 \absw7331 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7280 Suppose you want to draw a detailed object on the screen, then move it around to different locations. Suppose your shape had been drawn using dozens of graphic statements, like DRAW, and BOX, and took a long time to draw. You could make the drawing statements a subroutine and call it with a new set of coordinates each time. But this would really be very slow. However, BASIC 7.0 has a feature that allows you to transfer a graphic shape from the screen to a string variable, and to transfer the string back to anywhere on the screen almost instantly.\par 
}\pard \sl-260 \tx50 \tqr \tx7280 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx3522 \ql \sl261 \li1122 \ri3788 \sbasedon0 \snext2 OmniPage #769;}
{\s3 \tqr \tx7260 \ql \li1122 \ri50 \sl255 \sbasedon0 \snext3 OmniPage #770;}
{\s4 \tqr \tx4321 \ql \sl217 \li1122 \ri50 \sbasedon0 \snext4 OmniPage #771;}
{\s5 \tqr \tx7278 \qj \li1122 \ri50 \sl261 \sbasedon0 \snext5 OmniPage #772;}
{\s6 \tqr \tx3204 \ql \sl217 \li1122 \ri50 \sbasedon0 \snext6 OmniPage #773;}
{\s7 \tx488 \tqr \tx7273 \qj \li1122 \fi438 \ri53 \sl263 \sbasedon0 \snext7 OmniPage #774;}
{\s8 \tx502 \tqr \tx7276 \qj \li670 \ri50 \sl261 \sbasedon0 \snext8 OmniPage #775;}
{\s9 \tx757 \tqr \tx6785 \qc \sl261 \sbasedon0 \snext9 OmniPage #776;}
{\s10 \tx50 \tqr \tx3963 \ql \li1122 \ri2858 \sl261 \sbasedon0 \snext10 OmniPage #777;}
{\s11 \tx744 \tqr \tx6771 \qc \sl261 \sbasedon0 \snext11 OmniPage #778;}
{\s12 \tx489 \tqr \tx7272 \qj \li1122 \fi439 \ri50 \sl259 \sbasedon0 \snext12 OmniPage #779;}
{\s13 \tx54 \tqr \tx3386 \ql \sl261 \li1118 \ri3937 \sbasedon0 \snext13 OmniPage #780;}
{\s14 \tx50 \tqr \tx7273 \qj \li1122 \ri50 \sl262 \sbasedon0 \snext14 OmniPage #781;}
{\s15 \tqr \tx3220 \ql \sl217 \li1122 \ri50 \sbasedon0 \snext15 OmniPage #782;}
{\s16 \tx487 \tqr \tx7263 \ql \li1122 \fi437 \ri50 \sl257 \sbasedon0 \snext16 OmniPage #783;}
{\s17 \tx50 \tqr \tx7263 \qj \li1122 \ri50 \sl256 \sbasedon0 \snext17 OmniPage #784;}
{\s18 \tqr \tx7623 \ql \li1122 \ri50 \sl202 \sbasedon0 \snext18 OmniPage #785;}
{\s19 \tqr \tx1949 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext19 OmniPage #786;}
{\s20 \tqr \tx7277 \qj \li1122 \ri50 \sl258 \sbasedon0 \snext20 OmniPage #787;}
{\s21 \tx501 \tqr \tx4647 \ql \sl261 \li671 \ri2680 \sbasedon0 \snext21 OmniPage #788;}
{\s22 \tx50 \tqr \tx2620 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext22 OmniPage #789;}
{\s23 \tqr \tx7292 \qj \li1122 \ri50 \sl260 \sbasedon0 \snext23 OmniPage #790;}
{\s24 \tqr \tx2245 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext24 OmniPage #791;}
{\s25 \tqr \tx7264 \qj \li1122 \ri50 \sl261 \sbasedon0 \snext25 OmniPage #792;}
{\s26 \tqr \tx4283 \qc \sl261 \sbasedon0 \snext26 OmniPage #793;}
{\s27 \tx100 \tx1889 \tqr \tx2828 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext27 OmniPage #794;}
{\s28 \tqr \tx340 \qc \sl204 \sbasedon0 \snext28 OmniPage #795;}
{\s29 \tqr \tx6840 \qj \li1122 \ri50 \sl240 \sbasedon0 \snext29 OmniPage #796;}
{\s30 \tqr \tx1233 \ql \sl240 \li1122 \ri50 \sbasedon0 \snext30 OmniPage #797;}
{\s31 \tqr \tx685 \ql \sl238 \li1122 \ri50 \sbasedon0 \snext31 OmniPage #798;}
{\s32 \tqr \tx2773 \ql \li1122 \ri50 \sl240 \sbasedon0 \snext32 OmniPage #799;}
}\par {\pard \posx1505 \posy230 \phpg \pvpg \absh-932 \absw7311 \dxfrtext200 \fs25 \f0 \b \pard \s2 \posx1505 \posy230 \phpg \pvpg \absh-932 \absw7311 \dxfrtext200 \li50 \ri3788 \sl-261 \tx50 \tqr \tx3522 Capturing the Image: SSHAPE\par 
\fs10 \f0 \fs25 \f1 \plain \fs25 \f1 \lang1033 \pard \s3 \posx1505 \posy230 \phpg \pvpg \absh-932 \absw7311 \dxfrtext200 \li50 \ri50 \sl-255 \tx50 \tqr \tx7260 The syntax for the statment that captures a rectangular area of the bit\-mapped screen into a BASIC string variable is:\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn881 \margrsxn1505 \pard \sl-255 \tx50 \tqr \tx7260 \fs24 \f0 {\pard \posx931 \posy1354 \phpg \pvpg \absh-307 \absw4372 \dxfrtext200 \fs10 \f0 \fs22 \f2 \pard \s4 \posx931 \posy1354 \phpg \pvpg \absh-307 \absw4372 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx4321 SSHAPE string name, xl, yl, x2, y2\par 
}\pard \sl-217 \tx50 \tqr \tx4321 \fs24 \f0 {\pard \posx1494 \posy1870 \phpg \pvpg \absh-1617 \absw7329 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s5 \posx1494 \posy1870 \phpg \pvpg \absh-1617 \absw7329 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7278 Here string name is the name of the BASIC string variable that will receive the shape data. The coordinates xl,yl are the upper left corner of the rectangle surrounding the shape to be transferred and x2,y2 are the lower right corner of the rectagle. Thus to save the image of an object that is in the rectangle 10,10 to 33,31 into the string F$, you would execute the statement:\par 
}\pard \sl-261 \tx50 \tqr \tx7278 \fs24 \f0 {\pard \posx949 \posy3683 \phpg \pvpg \absh-307 \absw3255 \dxfrtext200 \fs10 \f0 \fs22 \f2 \pard \s6 \posx949 \posy3683 \phpg \pvpg \absh-307 \absw3255 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx3204 100 SSHAPE F$,10,10,33,31\par 
}\pard \sl-217 \tx50 \tqr \tx3204 \fs24 \f0 {\pard \posx1503 \posy4195 \phpg \pvpg \absh-1707 \absw7327 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s7 \posx1503 \posy4195 \phpg \pvpg \absh-1707 \absw7327 \dxfrtext200 \qj \li50 \fi438 \ri53 \sl-263 \tx50 \tx488 \tqr \tx7273 Because BASIC string variables are limited to 255 characters, the size of the area that can be saved is limited. You can use these formulas to calculate the string size, given the two corners of the area to be saved are known.\par 
\fs10 \f0 \fs25 \f1 \pard \s8 \posx1503 \posy4195 \phpg \pvpg \absh-1707 \absw7327 \dxfrtext200 \qj \li502 \ri50 \sl-261 \tx502 \tqr \tx7276 For standard bit\_map:\par 
\fs10 \f0 \fs25 \f1 \pard \s9 \posx1503 \posy4195 \phpg \pvpg \absh-1707 \absw7327 \dxfrtext200 \qc \sl-261 \tx757 \tqr \tx6785 Length = INT((ABS(x1\_x2) + 1)/8 + .99) * (ABS(yl\_y2) + 1) + 4\par 
}\pard \sl-261 \tx757 \tqr \tx6785 \fs24 \f0 {\pard \posx1521 \posy6182 \phpg \pvpg \absh-654 \absw6822 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s10 \posx1521 \posy6182 \phpg \pvpg \absh-654 \absw6822 \dxfrtext200 \li50 \ri2858 \sl-261 \tx50 \tqr \tx3963 For the muticolor mode the formula is:\par 
\fs10 \f0 \fs25 \f1 \pard \s11 \posx1521 \posy6182 \phpg \pvpg \absh-654 \absw6822 \dxfrtext200 \qc \sl-261 \tx744 \tqr \tx6771 Length=INT((ABS(xl\_x2) + 1)/4 + .99)*(ABS(yl\_y2) + 1) +4\par 
}\pard \sl-261 \tx744 \tqr \tx6771 \fs24 \f0 {\pard \posx1511 \posy7049 \phpg \pvpg \absh-831 \absw7323 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s12 \posx1511 \posy7049 \phpg \pvpg \absh-831 \absw7323 \dxfrtext200 \qj \li50 \fi439 \ri50 \sl-259 \tx50 \tx489 \tqr \tx7272 The shape that you are transferring is copied row by row into the string. The last four bytes of the string will contain the row and column lengths and are used by GSHAPE, as we shall see.\par 
}\pard \sl-259 \tx50 \tx489 \tqr \tx7272 \fs24 \f0 {\pard \posx1521 \posy8089 \phpg \pvpg \absh-1221 \absw7324 \dxfrtext200 \fs10 \f0 \fs25 \f0 \b \pard \s13 \posx1521 \posy8089 \phpg \pvpg \absh-1221 \absw7324 \dxfrtext200 \li54 \ri3937 \sl-261 \tx54 \tqr \tx3386 Drawing the Image: GSHAPE\par 
\fs10 \f0 \fs25 \f1 \plain \fs25 \f1 \lang1033 \pard \s14 \posx1521 \posy8089 \phpg \pvpg \absh-1221 \absw7324 \dxfrtext200 \qj \li50 \ri50 \sl-262 \tx50 \tqr \tx7273 The GSHAPE statement works in just the opposite way of the SSHAPE. It places the contents of the string variable onto the bit\_mapped screen. The syntax of the statement is:\par 
}\pard \sl-262 \tx50 \tqr \tx7273 \fs24 \f0 {\pard \posx951 \posy9501 \phpg \pvpg \absh-307 \absw3271 \dxfrtext200 \fs10 \f0 \fs22 \f2 \pard \s15 \posx951 \posy9501 \phpg \pvpg \absh-307 \absw3271 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx3220 GSHAPE string, a, b, mode\par 
}\pard \sl-217 \tx50 \tqr \tx3220 \fs24 \f0 {\pard \posx1529 \posy10018 \phpg \pvpg \absh-827 \absw7314 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s16 \posx1529 \posy10018 \phpg \pvpg \absh-827 \absw7314 \dxfrtext200 \li50 \fi437 \ri50 \sl-257 \tx50 \tx487 \tqr \tx7263 In this statement the parameter "string" is the string variable con\-taining the transferred screen data, and a,b are the coordinates of where we want the top left corner of the object to be drawn. If a,b is omitted the\par 
}\pard \sl-257 \tx50 \tx487 \tqr \tx7263 \fs24 \f0 {\pard \posx11270 \posy224 \phpg \pvpg \absh-572 \absw7314 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s17 \posx11270 \posy224 \phpg \pvpg \absh-572 \absw7314 \dxfrtext200 \qj \li50 \ri50 \sl-256 \tx50 \tqr \tx7263 current PC will be used as \fs25 \f0 \b coordinate to draw from. \fs25 \f1 \plain \fs25 \f1 \lang1033 Thus, assuming that our figure is stored in F$, here are some examples:\par 
}\pard \sl-256 \tx50 \tqr \tx7263 \fs24 \f0 {\pard \posx10710 \posy959 \phpg \pvpg \absh-509 \absw7674 \dxfrtext200 \fs10 \f0 \fs22 \f2 \pard \s18 \posx10710 \posy959 \phpg \pvpg \absh-509 \absw7674 \dxfrtext200 \li50 \ri50 \sl-202 \tx50 \tqr \tx7623 loo GSHAPE F$: REM Draws the object at the current PC 110 GSHAPE F$,160,100: REM Draws the object in F$ at 160,100\par 
}\pard \sl-202 \tx50 \tqr \tx7623 \fs24 \f0 {\pard \posx11283 \posy1712 \phpg \pvpg \absh-312 \absw2000 \dxfrtext200 \fs10 \f0 \fs25 \f0 \b \pard \s19 \posx11283 \posy1712 \phpg \pvpg \absh-312 \absw2000 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx1949 Graphics Modes\par 
}\pard \sl-261 \tx50 \tqr \tx1949 \fs24 \f0 {\pard \posx11264 \posy2091 \phpg \pvpg \absh-1343 \absw7328 \dxfrtext200 \fs10 \f0 \fs25 \f1 \plain \fs25 \f1 \lang1033 \pard \s20 \posx11264 \posy2091 \phpg \pvpg \absh-1343 \absw7328 \dxfrtext200 \qj \li50 \ri50 \sl-258 \tx50 \tqr \tx7277 GSHAPE does much more then just rubber stamp a graphic image on the screen. The "mode" parameter controls how the pixels of the graphic shape mix with pixels already on the screen. There are five different values for mode and these are shown in Table 6\_4.\par 
\fs10 \f0 \fs25 \f1 \pard \s21 \posx11264 \posy2091 \phpg \pvpg \absh-1343 \absw7328 \dxfrtext200 \li501 \ri2680 \sl-261 \tx501 \tqr \tx4647 Let's explore these modes in more detail.\par 
}\pard \sl-261 \tx501 \tqr \tx4647 \fs24 \f0 {\pard \posx11277 \posy3641 \phpg \pvpg \absh-312 \absw2671 \dxfrtext200 \fs10 \f0 \fs25 \f0 \b \pard \s22 \posx11277 \posy3641 \phpg \pvpg \absh-312 \absw2671 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx2620 Replace or Copy Mode\par 
}\pard \sl-261 \tx50 \tqr \tx2620 \fs24 \f0 {\pard \posx11263 \posy4021 \phpg \pvpg \absh-1352 \absw7343 \dxfrtext200 \fs10 \f0 \fs25 \f1 \plain \fs25 \f1 \lang1033 \pard \s23 \posx11263 \posy4021 \phpg \pvpg \absh-1352 \absw7343 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7292 The AS IS mode completely overlays the shape on the backgound so that each bit in the background is replaced by the bits in the foreground. Therefore, regardless of what is drawn on the bit\_mapped screen, when we draw with GSHAPE in the copy mode it will completely change every pixel that is under it.\par 
}\pard \sl-260 \tx50 \tqr \tx7292 \fs24 \f0 {\pard \posx11271 \posy5581 \phpg \pvpg \absh-312 \absw2296 \dxfrtext200 \fs10 \f0 \fs25 \f0 \b \pard \s24 \posx11271 \posy5581 \phpg \pvpg \absh-312 \absw2296 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx2245 The Inverted Mode\par 
}\pard \sl-261 \tx50 \tqr \tx2245 \fs24 \f0 {\pard \posx11271 \posy5965 \phpg \pvpg \absh-1356 \absw7315 \dxfrtext200 \fs10 \f0 \fs25 \f1 \plain \fs25 \f1 \lang1033 \pard \s25 \posx11271 \posy5965 \phpg \pvpg \absh-1356 \absw7315 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7264 The INVERTED mode draws the shape just as in the copy AS IS mode, but it changes all the foreground colors to background and vice versa. This means that if you have a red character showing on a black screen, and you use INVERTED mode, the character will change to black on a red background.\par 
}\pard \sl-261 \tx50 \tqr \tx7264 \fs24 \f0 {\pard \posx12801 \posy8277 \phpg \pvpg \absh-312 \absw4334 \dxfrtext200 \fs10 \f0 \fs25 \f0 \b \pard \s26 \posx12801 \posy8277 \phpg \pvpg \absh-312 \absw4334 \dxfrtext200 \qc \sl-261 \tx50 \tqr \tx4283 Table 6\_4. Graphics Modes for GSHAPE\par 
}\pard \sl-261 \tx50 \tqr \tx4283 \fs24 \f0 {\pard \posx11515 \posy8829 \phpg \pvpg \absh-312 \absw2879 \dxfrtext200 \fs10 \f0 \fs25 \f0 \fs25 \f1 \plain \fs25 \f1 \lang1033 \pard \s27 \posx11515 \posy8829 \phpg \pvpg \absh-312 \absw2879 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tx100 \tx1889 \tqr \tx2828 \tab value\tab Meaning\par 
}\pard \sl-261 \tx50 \tx100 \tx1889 \tqr \tx2828 \fs24 \f0 {\pard \posx11660 \posy9306 \phpg \pvpg \absh-312 \absw391 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s28 \posx11660 \posy9306 \phpg \pvpg \absh-312 \absw391 \dxfrtext200 \qc \sl-204 \tx50 \tqr \tx340 l\par 
}\pard \sl-204 \tx50 \tqr \tx340 \fs24 \f0 {\pard \posx11690 \posy10033 \phpg \pvpg \absh-793 \absw6891 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s29 \posx11690 \posy10033 \phpg \pvpg \absh-793 \absw6891 \dxfrtext200 \qj \li50 \ri50 \tx50 \tqr \tx6840 2 3 4\par 
}\pard \tx50 \tqr \tx6840 \fs24 \f0 {\pard \posx13228 \posy9311 \phpg \pvpg \absh-552 \absw1284 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s30 \posx13228 \posy9311 \phpg \pvpg \absh-552 \absw1284 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx1233 AS IS\par 
\pard \s30 \posx13228 \posy9311 \phpg \pvpg \absh-552 \absw1284 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx1233 INVERTED\par 
}\pard \tx50 \tqr \tx1233 \fs24 \f0 {\pard \posx13223 \posy10037 \phpg \pvpg \absh-789 \absw736 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s31 \posx13223 \posy10037 \phpg \pvpg \absh-789 \absw736 \dxfrtext200 \li50 \ri50 \sl-238 \tx50 \tqr \tx685 OR\par 
\pard \s31 \posx13223 \posy10037 \phpg \pvpg \absh-789 \absw736 \dxfrtext200 \li50 \ri50 \sl-238 \tx50 \tqr \tx685 AND\par 
\pard \s31 \posx13223 \posy10037 \phpg \pvpg \absh-789 \absw736 \dxfrtext200 \li50 \ri50 \sl-238 \tx50 \tqr \tx685 XOR\par 
}\pard \sl-238 \tx50 \tqr \tx685 \fs24 \f0 {\pard \posx15509 \posy9312 \phpg \pvpg \absh-1516 \absw2824 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s32 \posx15509 \posy9312 \phpg \pvpg \absh-1516 \absw2824 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx2773 Replace or copy mode Invert the foreground and background colors Logical OR with background Logical AND with background Logical XOR with background\par 
}\pard \tx50 \tqr \tx2773 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx1668 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext2 OmniPage #1025;}
{\s3 \tqr \tx7287 \qj \li1122 \ri50 \sl258 \sbasedon0 \snext3 OmniPage #1026;}
{\s4 \tqr \tx1870 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext4 OmniPage #1027;}
{\s5 \tqr \tx7279 \qj \li1122 \ri50 \sl260 \sbasedon0 \snext5 OmniPage #1028;}
{\s6 \tqr \tx5045 \qc \sl253 \sbasedon0 \snext6 OmniPage #1029;}
{\s7 \tqr \tx791 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext7 OmniPage #1030;}
{\s8 \tx100 \tx2428 \tqr \tx4043 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext8 OmniPage #1031;}
{\s9 \tqr \tx7005 \qj \li1122 \ri50 \sl240 \sbasedon0 \snext9 OmniPage #1032;}
{\s10 \tqr \tx1198 \qj \li1122 \ri50 \sl240 \sbasedon0 \snext10 OmniPage #1033;}
{\s11 \tqr \tx1202 \qj \li1122 \ri50 \sl240 \sbasedon0 \snext11 OmniPage #1034;}
{\s12 \tqr \tx5233 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext12 OmniPage #1035;}
{\s13 \tx100 \tx2625 \tx5007 \tqr \tx6623 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext13 OmniPage #1036;}
{\s14 \tqr \tx6995 \qj \li1122 \ri50 \sl240 \sbasedon0 \snext14 OmniPage #1037;}
{\s15 \tqr \tx1205 \qj \li1122 \ri50 \sl240 \sbasedon0 \snext15 OmniPage #1038;}
{\s16 \tqr \tx1206 \qj \li1122 \ri50 \sl240 \sbasedon0 \snext16 OmniPage #1039;}
{\s17 \tqr \tx1826 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext17 OmniPage #1040;}
{\s18 \tx55 \tqr \tx7276 \qj \li1117 \ri66 \sl258 \sbasedon0 \snext18 OmniPage #1041;}
{\s19 \tx50 \tx484 \tqr \tx7292 \qj \li1122 \fi434 \ri50 \sl261 \sbasedon0 \snext19 OmniPage #1042;}
{\s20 \tx52 \tx486 \tqr \tx7275 \qj \li1120 \fi434 \ri67 \sl261 \sbasedon0 \snext20 OmniPage #1043;}
{\s21 \tx50 \tx153 \tqr \tx3177 \ql \sl219 \li1122 \ri50 \sbasedon0 \snext21 OmniPage #1044;}
{\s22 \tqr \tx3473 \ql \sl221 \li1122 \ri50 \sbasedon0 \snext22 OmniPage #1045;}
{\s23 \tqr \tx6766 \ql \sl220 \li1122 \ri50 \sbasedon0 \snext23 OmniPage #1046;}
{\s24 \tqr \tx5209 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext24 OmniPage #1047;}
{\s25 \tqr \tx791 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext25 OmniPage #1048;}
{\s26 \tx100 \tx2432 \tqr \tx4052 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext26 OmniPage #1049;}
{\s27 \tqr \tx1146 \ql \li1122 \ri50 \sl240 \sbasedon0 \snext27 OmniPage #1050;}
{\s28 \tqr \tx1151 \ql \li1122 \ri50 \sl240 \sbasedon0 \snext28 OmniPage #1051;}
{\s29 \tqr \tx1155 \ql \li1122 \ri50 \sl240 \sbasedon0 \snext29 OmniPage #1052;}
}\par {\pard \posx1585 \posy216 \phpg \pvpg \absh-315 \absw1719 \dxfrtext200 \fs23 \f0 \b \pard \s2 \posx1585 \posy216 \phpg \pvpg \absh-315 \absw1719 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx1668 The OR Mode\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1525 \margrsxn1567 \pard \sl-253 \tx50 \tqr \tx1668 \fs24 \f0 {\pard \posx1575 \posy589 \phpg \pvpg \absh-1865 \absw7338 \dxfrtext200 \fs10 \f0 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s3 \posx1575 \posy589 \phpg \pvpg \absh-1865 \absw7338 \dxfrtext200 \qj \li50 \ri50 \sl-258 \tx50 \tqr \tx7287 The OR mode "adds" the pixels of the shape image with the pixels of the background so that when either pixel (or both pixels) is in the foreground color, the result on the screen will also be in the foreground color. Only if both pixels are in the background color will the result on the screen be in the background color. This mode is referred to as "foreground wins" because it only takes one plane (image or bit\_map) in the foreground color to get foregound color. This mode follows the logic shown in Table 6\_5.\par 
}\pard \sl-258 \tx50 \tqr \tx7287 \fs24 \f0 {\pard \posx1595 \posy2656 \phpg \pvpg \absh-315 \absw1921 \dxfrtext200 \fs10 \f0 \fs23 \f0 \b \pard \s4 \posx1595 \posy2656 \phpg \pvpg \absh-315 \absw1921 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx1870 The AND Mode\par 
}\pard \sl-253 \tx50 \tqr \tx1870 \fs24 \f0 {\pard \posx1584 \posy3039 \phpg \pvpg \absh-1619 \absw7330 \dxfrtext200 \fs10 \f0 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s5 \posx1584 \posy3039 \phpg \pvpg \absh-1619 \absw7330 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7279 The AND mode logically ANDs the shape and the screen data, effectively erasing the parts of the shapes that do not coincide. The rule is that only when both image and bit\_mapped pixels are in the foreground will the result on the screen be in foreground. Any other combination gives the background color for result. The result is that only parts of the two shapes that are the same show up. Table 6\_6 shows the logic for the AND mode.\par 
}\pard \sl-260 \tx50 \tqr \tx7279 \fs24 \f0 {\pard \posx2759 \posy5868 \phpg \pvpg \absh-315 \absw5096 \dxfrtext200 \fs10 \f0 \fs23 \f0 \b \pard \s6 \posx2759 \posy5868 \phpg \pvpg \absh-315 \absw5096 \dxfrtext200 \qc \sl-253 \tx50 \tqr \tx5045 Table 6\_5. Logic for the OR Mode with GSHAPE\par 
}\pard \sl-253 \tx50 \tqr \tx5045 \fs24 \f0 {\pard \posx2095 \posy6418 \phpg \pvpg \absh-315 \absw842 \dxfrtext200 \fs10 \f0 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s7 \posx2095 \posy6418 \phpg \pvpg \absh-315 \absw842 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx791 Shape\par 
}\pard \sl-253 \tx50 \tqr \tx791 \fs24 \f0 {\pard \posx4674 \posy6413 \phpg \pvpg \absh-315 \absw4094 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s8 \posx4674 \posy6413 \phpg \pvpg \absh-315 \absw4094 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tx100 \tx2428 \tqr \tx4043 \tab Screen\tab Result on Screen\par 
}\pard \sl-253 \tx50 \tx100 \tx2428 \tqr \tx4043 \fs24 \f0 {\pard \posx1840 \posy6898 \phpg \pvpg \absh-1037 \absw7056 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s9 \posx1840 \posy6898 \phpg \pvpg \absh-1037 \absw7056 \dxfrtext200 \qj \li50 \ri50 \tx50 \tqr \tx7005 foreground foreground background background\par 
}\pard \tx50 \tqr \tx7005 \fs24 \f0 {\pard \posx4389 \posy6894 \phpg \pvpg \absh-1036 \absw1249 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s10 \posx4389 \posy6894 \phpg \pvpg \absh-1036 \absw1249 \dxfrtext200 \qj \li50 \ri50 \tx50 \tqr \tx1198 foreground background foreground background\par 
}\pard \tx50 \tqr \tx1198 \fs24 \f0 {\pard \posx7228 \posy6893 \phpg \pvpg \absh-1037 \absw1253 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s11 \posx7228 \posy6893 \phpg \pvpg \absh-1037 \absw1253 \dxfrtext200 \qj \li50 \ri50 \tx50 \tqr \tx1202 foreground foreground foreground background\par 
}\pard \tx50 \tqr \tx1202 \fs24 \f0 {\pard \posx2678 \posy8764 \phpg \pvpg \absh-315 \absw5284 \dxfrtext200 \fs10 \f0 \fs23 \f0 \b \pard \s12 \posx2678 \posy8764 \phpg \pvpg \absh-315 \absw5284 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx5233 Table 6\_6. Logic for the AND Mode with GSHAPE\par 
}\pard \sl-253 \tx50 \tqr \tx5233 \fs24 \f0 {\pard \posx2104 \posy9301 \phpg \pvpg \absh-315 \absw6674 \dxfrtext200 \fs10 \f0 \fs23 \f0 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s13 \posx2104 \posy9301 \phpg \pvpg \absh-315 \absw6674 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tx100 \tx2625 \tx5007 \tqr \tx6623 \tab Shape\tab Screen\tab Result on Screen\par 
}\pard \sl-253 \tx50 \tx100 \tx2625 \tx5007 \tqr \tx6623 \fs24 \f0 {\pard \posx1850 \posy9800 \phpg \pvpg \absh-1037 \absw7046 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s14 \posx1850 \posy9800 \phpg \pvpg \absh-1037 \absw7046 \dxfrtext200 \qj \li50 \ri50 \tx50 \tqr \tx6995 foreground foreground background background\par 
}\pard \tx50 \tqr \tx6995 \fs24 \f0 {\pard \posx4395 \posy9796 \phpg \pvpg \absh-1036 \absw1256 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s15 \posx4395 \posy9796 \phpg \pvpg \absh-1036 \absw1256 \dxfrtext200 \qj \li50 \ri50 \tx50 \tqr \tx1205 foreground background foreground background\par 
}\pard \tx50 \tqr \tx1205 \fs24 \f0 {\pard \posx7238 \posy9790 \phpg \pvpg \absh-1037 \absw1257 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s16 \posx7238 \posy9790 \phpg \pvpg \absh-1037 \absw1257 \dxfrtext200 \qj \li50 \ri50 \tx50 \tqr \tx1206 foreground background background background\par 
}\pard \tx50 \tqr \tx1206 \fs24 \f0 {\pard \posx11215 \posy216 \phpg \pvpg \absh-315 \absw1877 \dxfrtext200 \fs10 \f0 \fs23 \f0 \b \pard \s17 \posx11215 \posy216 \phpg \pvpg \absh-315 \absw1877 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx1826 The XOR mode\par 
}\pard \sl-253 \tx50 \tqr \tx1826 \fs24 \f0 {\pard \posx11201 \posy595 \phpg \pvpg \absh-4719 \absw7343 \dxfrtext200 \fs10 \f0 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s18 \posx11201 \posy595 \phpg \pvpg \absh-4719 \absw7343 \dxfrtext200 \qj \li55 \ri66 \sl-258 \tx55 \tqr \tx7276 The XOR mode is very useful. It performs an exclusive OR of the shape pixels with the screen pixels so that only the coordinates that have dif\-ferent pixels are displayed! In other words, only pixels of the image and bit map that are different in color (one is in foreground and the other in background) will result in a foreground color pixel. Table 6\_7 shows the logic for the XOR mode.\par 
\fs10 \f0 \fs23 \f1 \pard \s19 \posx11201 \posy595 \phpg \pvpg \absh-4719 \absw7343 \dxfrtext200 \qj \li50 \fi434 \ri50 \sl-261 \tx50 \tx484 \tqr \tx7292 The XOR mode is used frequently when you want to draw an object over a background and you do not want to erase or change the background. The trick is to draw the shape with GSHAPE on the background in the XOR mode, then draw it again without changing the coordinates. The second time you draw the image, the original background will be com\-pletely restored. Then you move to a new location and repeat this process. Note that the other modes do not allow this "non\_destructive" type of drawing.\par 
\fs10 \f0 \fs23 \f1 \pard \s20 \posx11201 \posy595 \phpg \pvpg \absh-4719 \absw7343 \dxfrtext200 \qj \li52 \fi434 \ri67 \sl-261 \tx52 \tx486 \tqr \tx7275 The program below shows an example of SSHAPE and GSHAPE. We draw a circle on the screen, transfer it to a string variable with SSHAPE, clear the screen, print a line of text, then move the object across the screen with GSHAPE in the XOR mode. The text is not erased.\par 
}\pard \sl-261 \tx52 \tx486 \tqr \tx7275 \fs24 \f0 {\pard \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \fs10 \f0 \fs21 \f2 \pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li153 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 90 GRAPHIC 2,1\par 
\pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 100 CIRCLE 1,10,S,10,8:\par 
\pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 110 SSHAPE A$,0,0,20,16:\par 
\pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 115 SCNCLR\par 
\pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 120\par 
\pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 130\par 
\pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 140\par 
\pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 150\par 
\pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 160\par 
\pard \s21 \posx10665 \posy5542 \phpg \pvpg \absh-2264 \absw3228 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tx153 \tqr \tx3177 170\par 
}\pard \sl-219 \tx50 \tx153 \tqr \tx3177 \fs24 \f0 {\pard \posx14281 \posy5760 \phpg \pvpg \absh-512 \absw3524 \dxfrtext200 \fs21 \f2 \pard \s22 \posx14281 \posy5760 \phpg \pvpg \absh-512 \absw3524 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx3473 REM draws circle at 10,8\par 
\pard \s22 \posx14281 \posy5760 \phpg \pvpg \absh-512 \absw3524 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx3473 REM gets circle into string\par 
}\pard \sl-221 \tx50 \tqr \tx3473 \fs24 \f0 {\pard \posx11233 \posy6419 \phpg \pvpg \absh-1393 \absw6817 \dxfrtext200 \fs21 \f2 \pard \s23 \posx11233 \posy6419 \phpg \pvpg \absh-1393 \absw6817 \dxfrtext200 \li50 \ri50 \sl-220 \tx50 \tqr \tx6766 PRINT CHAR 1,0,0," ~ "\par 
\pard \s23 \posx11233 \posy6419 \phpg \pvpg \absh-1393 \absw6817 \dxfrtext200 \li50 \ri50 \sl-220 \tx50 \tqr \tx6766 FOR X=0 TO 295 STEP 2: REM loops the x coordinate\par 
\pard \s23 \posx11233 \posy6419 \phpg \pvpg \absh-1393 \absw6817 \dxfrtext200 \li50 \ri50 \sl-220 \tx50 \tqr \tx6766 GSHAPE A$,X,0,4: REM draws the shape using XOR\par 
\pard \s23 \posx11233 \posy6419 \phpg \pvpg \absh-1393 \absw6817 \dxfrtext200 \li50 \ri50 \sl-220 \tx50 \tqr \tx6766 FOR D=1 TO 50: NEXT D: REM delays\par 
\pard \s23 \posx11233 \posy6419 \phpg \pvpg \absh-1393 \absw6817 \dxfrtext200 \li50 \ri50 \sl-220 \tx50 \tqr \tx6766 GSHAPE A$,X,0,4: REM erase the shape using XOR\par 
\pard \s23 \posx11233 \posy6419 \phpg \pvpg \absh-1393 \absw6817 \dxfrtext200 \li50 \ri50 \sl-220 \tx50 \tqr \tx6766 NEXT X: REM till done\par 
}\pard \sl-220 \tx50 \tqr \tx6766 \fs24 \f0 {\pard \posx12293 \posy8736 \phpg \pvpg \absh-315 \absw5260 \dxfrtext200 \fs23 \f0 \fs23 \f0 \b \pard \s24 \posx12293 \posy8736 \phpg \pvpg \absh-315 \absw5260 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx5209 Table 6\_7. Logic for the XOR Mode with GSHAPE\par 
}\pard \sl-253 \tx50 \tqr \tx5209 \fs24 \f0 {\pard \posx11701 \posy9277 \phpg \pvpg \absh-315 \absw842 \dxfrtext200 \fs10 \f0 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s25 \posx11701 \posy9277 \phpg \pvpg \absh-315 \absw842 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx791 Shape\par 
}\pard \sl-253 \tx50 \tqr \tx791 \fs24 \f0 {\pard \posx14281 \posy9278 \phpg \pvpg \absh-315 \absw4103 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s26 \posx14281 \posy9278 \phpg \pvpg \absh-315 \absw4103 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tx100 \tx2432 \tqr \tx4052 \tab Screen\tab Result on Screen\par 
}\pard \sl-253 \tx50 \tx100 \tx2432 \tqr \tx4052 \fs24 \f0 {\pard \posx11454 \posy9759 \phpg \pvpg \absh-1036 \absw1197 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s27 \posx11454 \posy9759 \phpg \pvpg \absh-1036 \absw1197 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx1146 foreground foreground background background\par 
}\pard \tx50 \tqr \tx1146 \fs24 \f0 {\pard \posx14053 \posy9758 \phpg \pvpg \absh-1037 \absw1202 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s28 \posx14053 \posy9758 \phpg \pvpg \absh-1037 \absw1202 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx1151 foreground background foreground background\par 
}\pard \tx50 \tqr \tx1151 \fs24 \f0 {\pard \posx16893 \posy9758 \phpg \pvpg \absh-1037 \absw1206 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s29 \posx16893 \posy9758 \phpg \pvpg \absh-1037 \absw1206 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx1155 background foreground foreground background\par 
}\pard \tx50 \tqr \tx1155 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx2473 \ql \sl348 \li1122 \ri5457 \sbasedon0 \snext2 OmniPage #1281;}
{\s3 \tx627 \tqr \tx7862 \qj \li545 \ri68 \sl260 \sbasedon0 \snext3 OmniPage #1282;}
{\s4 \tx640 \tx1075 \tqr \tx7870 \qj \li532 \fi435 \ri60 \sl261 \sbasedon0 \snext4 OmniPage #1283;}
{\s5 \tx641 \tx947 \tqr \tx7880 \qj \li225 \fi-306 \ri50 \sl261 \sbasedon0 \snext5 OmniPage #1284;}
{\s6 \tx960 \tqr \tx7863 \qj \li212 \fi-306 \ri67 \sl262 \sbasedon0 \snext6 OmniPage #1285;}
{\s7 \tx50 \tqr \tx6979 \qj \li1122 \ri50 \sl256 \sbasedon0 \snext7 OmniPage #1286;}
{\s8 \tx482 \tqr \tx7242 \qj \li690 \ri167 \sl261 \sbasedon0 \snext8 OmniPage #1287;}
{\s9 \tx50 \tqr \tx7359 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext9 OmniPage #1288;}
{\s10 \tqr \tx5702 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext10 OmniPage #1289;}
}\par {\pard \posx1033 \posy296 \phpg \pvpg \absh-10784 \absw7931 \dxfrtext200 \fs33 \f0 \pard \s2 \posx1033 \posy296 \phpg \pvpg \absh-10784 \absw7931 \dxfrtext200 \li50 \ri5457 \sl-348 \tx50 \tqr \tx2473 Sprite Graphics\par 
\fs10 \f0 \fs25 \f1 \pard \s3 \posx1033 \posy296 \phpg \pvpg \absh-10784 \absw7931 \dxfrtext200 \qj \li627 \ri68 \sl-260 \tx627 \tqr \tx7862 We just learned that moving graphic objects on the bit\_mapped display requires close attention to how the object's pixels combine with those of the background. We must use the XORmode to avoid changing or erasing the background pixels. If you spent more time writing programs that move and draw objects, you would quickly discover another problem: not enough speed. As the size of the object you are animating grows in pixels, it takes more time to draw it on the screen. This slows down the maximum speed of the object because we must wait longer for it to be drawn. Further, every single position of the object must be laboriously calculated by your pro\-gram: this involves looping, incrementing a pair of position coordinates, testing when they are at the desired spot, and so on. Further, imagine trying to keep track of several graphic objects on the screen in a program at the same time. How would you know, for example, when one object struck another\'97or if it collided with the edge of the playfield? The truth is that this would require extremely complicated BASIC code, and that it would be so slow as to be ineffective for animation, simulations or today's arcade quality games.\par 
\fs10 \f0 \fs25 \f1 \pard \s4 \posx1033 \posy296 \phpg \pvpg \absh-10784 \absw7931 \dxfrtext200 \qj \li640 \fi435 \ri60 \sl-261 \tx640 \tx1075 \tqr \tx7870 The Commodore 128 and C64 both provide a way to move and animate objects through a software mechanism called a "sprite" (much harder to control from C64 BASIC, however). Sprites are not soft drinks but rather software\_"intelligent" graphic objects that you can program from BASIC 7.0 (and C64 BASIC 2.0 if you are willing to use POKEs and PEEKs). A sprite is a rectangular area 24 pixels wide by 21 pixels high. There are eight such sprites in the Commodore 128. You draw an image in the sprite with a special sprite editor built into BASIC (or you can use DATA statements and POKEs). There are two major points that make sprites extremely important and powerful programming tools:\par 
\fs10 \f0 \fs25 \f1 \pard \s5 \posx1033 \posy296 \phpg \pvpg \absh-10784 \absw7931 \dxfrtext200 \qj \li947 \fi-306 \ri50 \sl-261 \tx641 \tx947 \tqr \tx7880 1. Each sprite exists and moves on its own independent sprite screen "plane". Each sprite has its own color and shape. The sprite planes are totally independent of each other, and totally independent of the information in the bit\_map screen (see Figure 6\_9). When you request a sprite to move across the screen, it does so in a manner that does not erase or affect in any way the pixels of the standard bit\_mapped back\-ground; nor does it affect the pixels in another sprite plane. This wonderful feature means your program does not have to concern itself with keeping track of what sprite overlapped with what sprite or what background. If you did, your program would be much more complex.\par 
\fs10 \f0 \fs25 \f1 \pard \s6 \posx1033 \posy296 \phpg \pvpg \absh-10784 \absw7931 \dxfrtext200 \qj \li960 \fi-306 \ri67 \sl-262 \tx654 \tx960 \tqr \tx7863 2. Sprites can be automatically moved by the VIC'II chip to any position on the screen\'97you just give the sprite the final coordinates and it\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn983 \margrsxn1454 \pard \sl-262 \tx654 \tx960 \tqr \tx7863 \fs24 \f0 {\pard \posx11545 \posy335 \phpg \pvpg \absh-2110 \absw7030 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s7 \posx11545 \posy335 \phpg \pvpg \absh-2110 \absw7030 \dxfrtext200 \qj \li50 \ri50 \sl-256 \tx50 \tqr \tx6979 will move smoothly from its original position to the resting position you desire. Or you can give the sprite a "heading" (an angle between 0 and 360 degrees) and a speed (between 0 and 15), and it will auto\-matically start moving as specified\'97wrapping around when it hits the screen boundary, and moving forever until you command it to stop. This type of control of objects results in very powerful animation with very little demand on the programmer, and is the reason such good graphics software exists for the C64.\par 
}\pard \sl-256 \tx50 \tqr \tx6979 \fs24 \f0 {\pard \posx11247 \posy2663 \phpg \pvpg \absh-571 \absw7410 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s8 \posx11247 \posy2663 \phpg \pvpg \absh-571 \absw7410 \dxfrtext200 \qj \li482 \ri167 \sl-261 \tx482 \tqr \tx7242 Sprites can also be combined with each other to create large and\par 
\fs10 \f0 \fs25 \f1 \pard \s9 \posx11247 \posy2663 \phpg \pvpg \absh-571 \absw7410 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx7359 colorful graphic images. Connecting four sprites together gives an object\par 
}\pard \sl-261 \tx50 \tqr \tx7359 \fs24 \f0 {\pard \posx12074 \posy3762 \phpg \pvpg \absh-312 \absw5753 \dxfrtext200 \fs10 \f0 \fs25 \f2 \b \pard \s10 \posx12074 \posy3762 \phpg \pvpg \absh-312 \absw5753 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx5702 Figure 6\_9. Sprites Exist on Independent Sprite Planes\par 
}\pard \sl-261 \tx50 \tqr \tx5702 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx55 \tqr \tx7254 \qj \li1117 \ri83 \sl250 \sbasedon0 \snext2 OmniPage #1537;}
{\s3 \tx50 \tx487 \tqr \tx7287 \qj \li1122 \fi437 \ri50 \sl256 \sbasedon0 \snext3 OmniPage #1538;}
{\s4 \tx50 \tx487 \tqr \tx7286 \qj \li1122 \fi437 \ri51 \sl260 \sbasedon0 \snext4 OmniPage #1539;}
{\s5 \tx53 \tx490 \tqr \tx7266 \qj \li1119 \fi437 \ri71 \sl261 \sbasedon0 \snext5 OmniPage #1540;}
{\s6 \tx50 \tqr \tx3381 \ql \sl304 \li1122 \ri50 \sbasedon0 \snext6 OmniPage #1541;}
{\s7 \tx61 \tqr \tx7274 \qj \li1111 \ri54 \sl253 \sbasedon0 \snext7 OmniPage #1542;}
{\s8 \tx50 \tx349 \tqr \tx7278 \qj \li823 \fi-299 \ri50 \sl261 \sbasedon0 \snext8 OmniPage #1543;}
{\s9 \tqr \tx6983 \qj \li1122 \ri50 \sl265 \sbasedon0 \snext9 OmniPage #1544;}
{\s10 \tqr \tx6941 \qj \li1122 \ri50 \sl260 \sbasedon0 \snext10 OmniPage #1545;}
{\s11 \tqr \tx398 \ql \li1122 \ri50 \sl253 \sbasedon0 \snext11 OmniPage #1546;}
{\s12 \tx358 \tqr \tx7273 \qj \li814 \ri54 \sl255 \sbasedon0 \snext12 OmniPage #1547;}
{\s13 \tx50 \tqr \tx7277 \qj \li1122 \ri50 \sl257 \sbasedon0 \snext13 OmniPage #1548;}
{\s14 \tx78 \tqr \tx4288 \ql \sl304 \li1094 \ri3054 \sbasedon0 \snext14 OmniPage #1549;}
{\s15 \tx50 \tqr \tx7273 \qj \li1122 \ri69 \sl259 \sbasedon0 \snext15 OmniPage #1550;}
{\s16 \tx483 \tqr \tx7292 \qj \li1122 \fi433 \ri50 \sl261 \sbasedon0 \snext16 OmniPage #1551;}
}\par {\pard \posx1661 \posy498 \phpg \pvpg \absh-4458 \absw7338 \dxfrtext200 \fs24 \f0 \plain \lang1033 \pard \s2 \posx1661 \posy498 \phpg \pvpg \absh-4458 \absw7338 \dxfrtext200 \qj \li55 \ri83 \sl-250 \tx55 \tqr \tx7254 that is 96 pixels wide by 84 pixels tall, which is quite large: 30% to 40% the size of the entire screen.\par 
\fs10 \f0 \fs24 \f0 \pard \s3 \posx1661 \posy498 \phpg \pvpg \absh-4458 \absw7338 \dxfrtext200 \qj \li50 \fi437 \ri50 \sl-256 \tx50 \tx487 \tqr \tx7287 Each sprite can be given a display "priority" that makes the sprite move either behind or in front of your background images. This feature allows three dimensional effects in programs, where, for example, a truck can be drawn moving behind a row of trees and in front of a row of houses.\par 
\fs10 \f0 \fs24 \f0 \pard \s4 \posx1661 \posy498 \phpg \pvpg \absh-4458 \absw7338 \dxfrtext200 \qj \li50 \fi437 \ri51 \sl-260 \tx50 \tx487 \tqr \tx7286 Your program can easily determine when sprites collide with each other or with the background. Such a collision will cause an "interrupt" to your BASIC program, and then you can branch to a special routine for processing the collision. This means it is easy to write a game where there are lots of moving players, or where there are sections of objects exploding. There is no need to constantly check the coordinates of the graphic objects as you would in non\_sprite driven programs.\par 
\fs10 \f0 \fs24 \f0 \pard \s5 \posx1661 \posy498 \phpg \pvpg \absh-4458 \absw7338 \dxfrtext200 \qj \li53 \fi437 \ri71 \sl-261 \tx53 \tx490 \tqr \tx7266 Sprites can also be expanded in the x or y directions to give the effect of rapid growth. When this happens, the pixels double in size. You can also define a sprite as a standard bit\_mapped mode sprite or a multicolor mode sprite. Let's learn how sprites are created and used.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1611 \margrsxn1496 \pard \sl-261 \tx53 \tx490 \tqr \tx7266 {\pard \posx1671 \posy5279 \phpg \pvpg \absh-354 \absw3432 \dxfrtext200 \fs10 \f0 \fs29 \f1 \i \pard \s6 \posx1671 \posy5279 \phpg \pvpg \absh-354 \absw3432 \dxfrtext200 \li50 \ri50 \sl-304 \tx50 \tqr \tx3381 How Sprites are Created\par 
}\pard \sl-304 \tx50 \tqr \tx3381 \fs24 \f0 {\pard \posx1668 \posy5687 \phpg \pvpg \absh-3245 \absw7329 \dxfrtext200 \fs10 \f0 \fs24 \f0 \plain \lang1033 \pard \s7 \posx1668 \posy5687 \phpg \pvpg \absh-3245 \absw7329 \dxfrtext200 \qj \li61 \ri54 \sl-253 \tx61 \tqr \tx7274 There are three methods for creating sprites:\par 
\fs10 \f0 \fs24 \f0 \pard \s8 \posx1668 \posy5687 \phpg \pvpg \absh-3245 \absw7329 \dxfrtext200 \qj \li349 \fi-299 \ri50 \sl-261 \tx50 \tx349 \tqr \tx7278 1. Drawing and defining the object with built\_in statements. In this ap\-proach you draw your desired sprite object using the various graphics statements, such as DRAW, CIRCLE, BOX and PAINT. Then you use SSHAPE statement to get the picture into a string. Next, you transfer the string picture to the sprite with a SPRSAV statement. Then you enable and color the sprite with the SPRITE statement and move it around with the MOVSPR move sprite statement. You save your sprite to disk with the B SAVE filename command. (By the way, B SAVE lets you specify a range of RAM memory and have the binary values in it stored directly to a file on the disk. BLOAD gets the binary file and loads it exactly back into RAM.)\par 
}\pard \sl-261 \tx50 \tx349 \tqr \tx7278 {\pard \posx1983 \posy8932 \phpg \pvpg \absh-1632 \absw7034 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s9 \posx1983 \posy8932 \phpg \pvpg \absh-1632 \absw7034 \dxfrtext200 \qj \li50 \ri50 \sl-265 \tx50 \tqr \tx6983 Using the SPRDEF Sprite Definition mode (sprite editor or designer). In this approach you use the built\_in Commodore 128 sprite editor to draw your sprite right on the screen. You can control how the picture looks in a magnified format by moving a cursor and turning different parts of the grid on or off. When completed, the sprite is enabled and moved with the SPRSAV and MOVSPR statements.\par 
}\pard \sl-265 \tx50 \tqr \tx6983 {\pard \posx1998 \posy10571 \phpg \pvpg \absh-575 \absw6992 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s10 \posx1998 \posy10571 \phpg \pvpg \absh-575 \absw6992 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx6941 Using the same method as the Commodore 64. In this approach, you had to draw your sprite on a 24 x 21 grid, convert the pattern to a\par 
}\pard \sl-260 \tx50 \tqr \tx6941 {\pard \posx1704 \posy10571 \phpg \pvpg \absh-315 \absw449 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s11 \posx1704 \posy10571 \phpg \pvpg \absh-315 \absw449 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx398 3.\par 
}\pard \sl-253 \tx50 \tqr \tx398 {\pard \posx11274 \posy539 \phpg \pvpg \absh-1346 \absw7328 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s12 \posx11274 \posy539 \phpg \pvpg \absh-1346 \absw7328 \dxfrtext200 \qj \li358 \ri54 \sl-255 \tx358 \tqr \tx7273 series of numbers and then POECE these numbers into the special sprite area of memory. We won't cover this method.\par 
\fs10 \f0 \fs24 \f0 \pard \s13 \posx11274 \posy539 \phpg \pvpg \absh-1346 \absw7328 \dxfrtext200 \qj \li50 \ri50 \sl-257 \tx50 \tqr \tx7277 Both methods 1 and 2 are useful. Let's first describe how to use the sprite editor, because it takes such a small amount of program code and typing to get a sprite moving on the screen.\par 
}\pard \sl-257 \tx50 \tqr \tx7277 {\pard \posx11272 \posy2202 \phpg \pvpg \absh-4622 \absw7343 \dxfrtext200 \fs10 \f0 \fs29 \f1 \i \pard \s14 \posx11272 \posy2202 \phpg \pvpg \absh-4622 \absw7343 \dxfrtext200 \li78 \ri3054 \sl-304 \tx78 \tqr \tx4288 Sprite Designer Mode: SPRDEF\par 
\fs10 \f0 \fs24 \f0 \plain \lang1033 \pard \s15 \posx11272 \posy2202 \phpg \pvpg \absh-4622 \absw7343 \dxfrtext200 \qj \li50 \ri69 \sl-259 \tx50 \tqr \tx7273 A sprite designer is built into the Commodore 128, which makes it easy to design sprite images. The sprite designer is modeled after sprite editors available for the C64. To enter the sprite designer mode from BASIC 7.0, type the command SPRDEF. The screen immediately clears and then displays a sprite grid in the upper left portion of the screen, as shown in Figure 6\_10. At the bottom of the screen you will see the prompt SPRITE NUMBER ?.\par 
\fs10 \f0 \fs24 \f0 \pard \s16 \posx11272 \posy2202 \phpg \pvpg \absh-4622 \absw7343 \dxfrtext200 \qj \li50 \fi433 \ri50 \sl-261 \tx50 \tx483 \tqr \tx7292 When you enter this mode the normal execution of BASIC 7.0 is suspended. The keyboard enters a new mode where the keys are redefined to control the making of sprites. When you type in a sprite number between 1 and 8, the sprite grid (work area) is filled with the magnified sprite while the sprite itself is displayed in the upper right corner of the screen. The work area has the dimensions of 24 characters wide by 21 characters high so that each character position corresponds to one pixel in the sprite. While you are in the sprite designer mode, you use the cursor keys to move a special + cursor in the work area. As you fill in a character\par 
}\pard \sl-261 \tx50 \tx483 \tqr \tx7292 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx51 \tqr \tx7269 \qj \li1121 \ri64 \sl247 \sbasedon0 \snext2 OmniPage #1793;}
{\s3 \tx50 \tx481 \tqr \tx7283 \qj \li1122 \fi431 \ri50 \sl259 \sbasedon0 \snext3 OmniPage #1794;}
{\s4 \tx77 \tqr \tx5661 \ql \sl319 \li1095 \ri1679 \sbasedon0 \snext4 OmniPage #1795;}
{\s5 \tx50 \tqr \tx7290 \qj \li1122 \ri50 \sl260 \sbasedon0 \snext5 OmniPage #1796;}
{\s6 \tqr \tx6430 \ql \sl211 \li1122 \ri50 \sbasedon0 \snext6 OmniPage #1797;}
{\s7 \tx490 \tqr \tx7290 \qj \li1122 \fi440 \ri50 \sl262 \sbasedon0 \snext7 OmniPage #1798;}
{\s8 \tx50 \tqr \tx2129 \ql \sl240 \li1122 \ri50 \sbasedon0 \snext8 OmniPage #1799;}
{\s9 \tqr \tx7297 \qj \li1122 \ri58 \sl261 \sbasedon0 \snext9 OmniPage #1800;}
{\s10 \tx57 \tx493 \tqr \tx7305 \qj \li1115 \fi436 \ri50 \sl261 \sbasedon0 \snext10 OmniPage #1801;}
{\s11 \tx50 \tqr \tx266 \qj \li1122 \ri50 \sl261 \sbasedon0 \snext11 OmniPage #1802;}
{\s12 \tqr \tx7279 \ql \li1122 \ri50 \sl257 \sbasedon0 \snext12 OmniPage #1803;}
{\s13 \tqr \tx2438 \ql \sl219 \li1122 \ri50 \sbasedon0 \snext13 OmniPage #1804;}
{\s14 \tx52 \tqr \tx3800 \ql \sl217 \li1120 \ri718 \sbasedon0 \snext14 OmniPage #1805;}
{\s15 \tx50 \tx595 \tqr \tx4468 \ql \li577 \fi-545 \ri50 \sl220 \sbasedon0 \snext15 OmniPage #1806;}
{\s16 \tx2654 \tqr \tx6835 \ql \sl211 \li1122 \ri50 \sbasedon0 \snext16 OmniPage #1807;}
{\s17 \tx3079 \tqr \tx4839 \ql \sl211 \li1907 \ri2046 \sbasedon0 \snext17 OmniPage #1808;}
{\s18 \tx50 \tqr \tx5299 \qc \sl261 \sbasedon0 \snext18 OmniPage #1809;}
{\s19 \tx50 \tx1855 \tqr \tx8423 \ql \sl510 \li1122 \ri50 \sbasedon0 \snext19 OmniPage #1810;}
{\s20 \tqr \tx1621 \ql \li1122 \ri50 \sl222 \sbasedon0 \snext20 OmniPage #1811;}
{\s21 \tx100 \tx1575 \tqr \tx3224 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext21 OmniPage #1812;}
{\s22 \tx1587 \tqr \tx2389 \ql \sl261 \li415 \ri885 \sbasedon0 \snext22 OmniPage #1813;}
{\s23 \tx50 \tqr \tx1987 \ql \sl221 \li1122 \ri50 \sbasedon0 \snext23 OmniPage #1814;}
{\s24 \tqr \tx1387 \qj \li1122 \ri50 \sl222 \sbasedon0 \snext24 OmniPage #1815;}
{\s25 \tqr \tx1519 \qj \li1122 \ri50 \sl219 \sbasedon0 \snext25 OmniPage #1816;}
{\s26 \tqr \tx1866 \ql \sl221 \li1122 \ri50 \sbasedon0 \snext26 OmniPage #1817;}
{\s27 \tqr \tx1846 \ql \sl219 \li1122 \ri50 \sbasedon0 \snext27 OmniPage #1818;}
{\s28 \tqr \tx1956 \ql \li1122 \ri50 \sl221 \sbasedon0 \snext28 OmniPage #1819;}
}\par {\pard \posx1581 \posy371 \phpg \pvpg \absh-2373 \absw7334 \dxfrtext200 \fs25 \f0 \pard \s2 \posx1581 \posy371 \phpg \pvpg \absh-2373 \absw7334 \dxfrtext200 \qj \li51 \ri64 \sl-247 \tx51 \tqr \tx7269 position within the work area, you can see the corresponding pixel in the displayed sprite turn on.\par 
\fs10 \f0 \fs25 \f0 \pard \s3 \posx1581 \posy371 \phpg \pvpg \absh-2373 \absw7334 \dxfrtext200 \qj \li50 \fi431 \ri50 \sl-259 \tx50 \tx481 \tqr \tx7283 A sprite may be defined as a standard bit\_mapped sprite or a multi\-color bit mode sprite. You can select any of the eight foreground colors for the sprite using the keyboard (this is for convenience only\'97the final color for a sprite is set with the \fs23 \f1 SPRITE \fs25 \f0 statement). You can also double the size of the sprite horizontally or vertically or save the sprite by holding down ~J while pressing I \fs18 \f2 \ul Return \fs18 \f3 \plain \fs18 \f3 \lang1033 1. \fs25 \f0 Further details of editor use are dis\-cussed in the documentation accompanying the Commodore 128.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn939 \margrsxn927 \pard \sl-259 \tx50 \tx481 \tqr \tx7283 \fs24 \f0 {\pard \posx1594 \posy3046 \phpg \pvpg \absh-1782 \absw7341 \dxfrtext200 \fs10 \f0 \fs30 \f4 \i \pard \s4 \posx1594 \posy3046 \phpg \pvpg \absh-1782 \absw7341 \dxfrtext200 \li77 \ri1679 \sl-319 \tx77 \tqr \tx5661 Turning On and Defining Sprites: SPRITE\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s5 \posx1594 \posy3046 \phpg \pvpg \absh-1782 \absw7341 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7290 Once you leave the sprite designer, any sprites you defined are stored in a sprite storage area in memory. However, the sprites have no color at this point, and are not "on", or visible on the screen. The \fs23 \f1 SPRITE \fs25 \f0 statement is used to turn the sprites on and off and to give them a foreground color. The syntax for the \fs23 \f1 SPRITE \fs25 \f0 statement is shown in Figure 6\_11.\par 
}\pard \sl-260 \tx50 \tqr \tx7290 \fs24 \f0 {\pard \posx989 \posy5036 \phpg \pvpg \absh-296 \absw6481 \dxfrtext200 \fs10 \f0 \fs20 \f5 \pard \s6 \posx989 \posy5036 \phpg \pvpg \absh-296 \absw6481 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx6430 SPRITE number, on/off, fend, priority, x\_exp, y\_exp, mode\par 
}\pard \sl-211 \tx50 \tqr \tx6430 \fs24 \f0 {\pard \posx1598 \posy5542 \phpg \pvpg \absh-1360 \absw7341 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s7 \posx1598 \posy5542 \phpg \pvpg \absh-1360 \absw7341 \dxfrtext200 \qj \li50 \fi440 \ri50 \sl-262 \tx50 \tx490 \tqr \tx7290 In this statement the parameter "number" is the sprite number 1 through 8 that you wish to control. The "on/off" parameter determines whether the sprite is on or off. A 1 means it's on; a O means it's off. The parameter "fgnd" is the foreground color you want to set the sprite to, and can be a value between 1 and 16.\par 
}\pard \sl-262 \tx50 \tx490 \tqr \tx7290 \fs24 \f0 {\pard \posx1615 \posy7114 \phpg \pvpg \absh-306 \absw2180 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s8 \posx1615 \posy7114 \phpg \pvpg \absh-306 \absw2180 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx2129 Priority of Sprites\par 
}\pard \tx50 \tqr \tx2129 \fs24 \f0 {\pard \posx1604 \posy7490 \phpg \pvpg \absh-3710 \absw7356 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s9 \posx1604 \posy7490 \phpg \pvpg \absh-3710 \absw7356 \dxfrtext200 \qj \li50 \ri58 \sl-261 \tx50 \tqr \tx7297 The "priority" parameter controls whether the sprite is behind (1) or in front of (0) images in the bit\_mapped display. With respect to each other, a sprite's priority is set by its number\'97a lower number sprite will appear "in front of" a higher number sprite. Thus,~sprite number 1 has the highest priority and sprite number 8 the lowest. The x\_exp and y\_exp parameters control the sprite's horizontal and vertical expansion. When either param\-eter is a 1, the sprite becomes twice as large in the corresponding direction.\par 
\fs10 \f0 \fs25 \f0 \pard \s10 \posx1604 \posy7490 \phpg \pvpg \absh-3710 \absw7356 \dxfrtext200 \qj \li57 \fi436 \ri50 \sl-261 \tx57 \tx493 \tqr \tx7305 The mode parameter determines if the sprite will be a standard bit\-mapped sprite or a multicolor sprite. A multicolor sprite occurs when this parameter is 1, and that sprite changes size to 12 dots wide by 21 dots high. The horizontal direction shrinks because the horizontal reso\-lution of the multicolor mode is only 160 pixels. You can combine multi\-color and standard bit\_mapped sprites in any bit\_mapped mode, but you can't display sprites in the text mode. The standard bit\_mapped sprites\par 
}\pard \sl-261 \tx57 \tx493 \tqr \tx7305 \fs24 \f0 {\pard \posx10374 \posy22 \phpg \pvpg \absh-312 \absw317 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s11 \posx10374 \posy22 \phpg \pvpg \absh-312 \absw317 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx266 r\par 
}\pard \sl-261 \tx50 \tqr \tx266 \fs24 \f0 {\pard \posx11239 \posy366 \phpg \pvpg \absh-1083 \absw7330 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s12 \posx11239 \posy366 \phpg \pvpg \absh-1083 \absw7330 \dxfrtext200 \li50 \ri50 \sl-257 \tx50 \tqr \tx7279 can have two colors: the background color set with the \fs23 \f1 COLOR \fs25 \f0 statement and the foreground color set with the \fs23 \f1 SPRITE \fs25 \f0 statement. \fs25 \f0 \b Multicolor sprites \fs25 \f0 \plain \fs25 \lang1033 can have two foreground colors and these are set with the \fs23 \f1 SPRCOL \fs25 \f0 statement. Here are some examples of setting up sprites:\par 
}\pard \sl-257 \tx50 \tqr \tx7279 \fs24 \f0 {\pard \posx10655 \posy1665 \phpg \pvpg \absh-734 \absw2489 \dxfrtext200 \fs10 \f0 \fs20 \f5 \pard \s13 \posx10655 \posy1665 \phpg \pvpg \absh-734 \absw2489 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tqr \tx2438 100 SPRITE 1,1,7:\par 
\pard \s13 \posx10655 \posy1665 \phpg \pvpg \absh-734 \absw2489 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tqr \tx2438 i10 SPRITE 2,1,5,1:\par 
\pard \s13 \posx10655 \posy1665 \phpg \pvpg \absh-734 \absw2489 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tqr \tx2438 120 SPRITE 8,0,8,,1,1\par 
}\pard \sl-219 \tx50 \tqr \tx2438 \fs24 \f0 {\pard \posx13254 \posy1670 \phpg \pvpg \absh-911 \absw4519 \dxfrtext200 \fs20 \f5 \pard \s14 \posx13254 \posy1670 \phpg \pvpg \absh-911 \absw4519 \dxfrtext200 \li52 \ri718 \sl-217 \tx52 \tqr \tx3800 REM sprite 1, on, blue\par 
\pard \s14 \posx13254 \posy1670 \phpg \pvpg \absh-911 \absw4519 \dxfrtext200 \li52 \ri718 \sl-217 \tx52 \tqr \tx3800 REM sprite 2, on, purple, behind\par 
\fs20 \f5 \pard \s15 \posx13254 \posy1670 \phpg \pvpg \absh-911 \absw4519 \dxfrtext200 \li595 \fi-545 \ri50 \sl-220 \tx50 \tx595 \tqr \tx4468 REM sprite 8, off, yellow, in front, x\-exp, y\_exp\par 
}\pard \sl-220 \tx50 \tx595 \tqr \tx4468 \fs24 \f0 {\pard \posx10649 \posy2581 \phpg \pvpg \absh-470 \absw6886 \dxfrtext200 \fs20 \f5 \pard \s16 \posx10649 \posy2581 \phpg \pvpg \absh-470 \absw6886 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tx100 \tx2654 \tqr \tx6835 \tab 130 SPRITE 8,1,7,,,,1\tab REM sprite 8, on, blue, frnt, no exp,\par 
\fs20 \f5 \pard \s17 \posx10649 \posy2581 \phpg \pvpg \absh-470 \absw6886 \dxfrtext200 \li3079 \ri2046 \sl-211 \tx3079 \tqr \tx4839 multicolor mode\par 
}\pard \sl-211 \tx3079 \tqr \tx4839 \fs24 \f0 {\pard \posx12238 \posy3640 \phpg \pvpg \absh-312 \absw5350 \dxfrtext200 \fs25 \f0 \fs25 \f0 \b \pard \s18 \posx12238 \posy3640 \phpg \pvpg \absh-312 \absw5350 \dxfrtext200 \qc \sl-261 \tx50 \tqr \tx5299 Figure 6\_11. The Syntax for the SPRITE Statement\par 
}\pard \sl-261 \tx50 \tqr \tx5299 \fs24 \f0 {\pard \posx10675 \posy4293 \phpg \pvpg \absh-1020 \absw8474 \dxfrtext200 \fs10 \f0 \fs20 \f5 \plain \fs20 \f5 \lang1033 \pard \s19 \posx10675 \posy4293 \phpg \pvpg \absh-1020 \absw8474 \dxfrtext200 \li50 \ri50 \sl-510 \tx50 \tx1855 \tqr \tx8423 SPRITE number, on/off, fund, pr o city, x\_exp, y\_exp, mode\par 
\fs53 \f0 \pard \s19 \posx10675 \posy4293 \phpg \pvpg \absh-1020 \absw8474 \dxfrtext200 \li1855 \ri50 \sl-510 \tx50 \tx1855 \tqr \tx8423 \_\_ T ~ ~ \fs110 \f0 T Ate\par 
}\pard \sl-510 \tx50 \tx1855 \tqr \tx8423 \fs24 \f0 {\pard \posx13647 \posy10753 \phpg \pvpg \absh-534 \absw1672 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s20 \posx13647 \posy10753 \phpg \pvpg \absh-534 \absw1672 \dxfrtext200 \li50 \ri50 \sl-222 \tx50 \tqr \tx1621 Sprite number to control, 1\_8\par 
}\pard \sl-222 \tx50 \tqr \tx1621 \fs24 \f0 {\pard \posx13704 \posy9179 \phpg \pvpg \absh-571 \absw3275 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s21 \posx13704 \posy9179 \phpg \pvpg \absh-571 \absw3275 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tx100 \tx1575 \tqr \tx3224 \tab \_\tab Foreground color,\par 
\fs10 \f0 \fs25 \f0 \pard \s22 \posx13704 \posy9179 \phpg \pvpg \absh-571 \absw3275 \dxfrtext200 \li1587 \ri885 \sl-261 \tx1587 \tqr \tx2389 1 to 16\par 
}\pard \sl-261 \tx1587 \tqr \tx2389 \fs24 \f0 {\pard \posx14480 \posy9871 \phpg \pvpg \absh-754 \absw2038 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s23 \posx14480 \posy9871 \phpg \pvpg \absh-754 \absw2038 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx1987 Turn sprite on or off\par 
\pard \s23 \posx14480 \posy9871 \phpg \pvpg \absh-754 \absw2038 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx1987 1\'97sprite on\par 
\pard \s23 \posx14480 \posy9871 \phpg \pvpg \absh-754 \absw2038 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx1987 0 = sprite off\par 
}\pard \sl-221 \tx50 \tqr \tx1987 \fs24 \f0 {\pard \posx17566 \posy5043 \phpg \pvpg \absh-486 \absw1438 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s24 \posx17566 \posy5043 \phpg \pvpg \absh-486 \absw1438 \dxfrtext200 \qj \li50 \ri50 \sl-222 \tx50 \tqr \tx1387 1 = standard bit\_mapped\par 
}\pard \sl-222 \tx50 \tqr \tx1387 \fs24 \f0 {\pard \posx17585 \posy5529 \phpg \pvpg \absh-705 \absw1570 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s25 \posx17585 \posy5529 \phpg \pvpg \absh-705 \absw1570 \dxfrtext200 \qj \li50 \ri50 \sl-219 \tx50 \tqr \tx1519 (24x21 pixels) 0 = multicolor (12x21 pixels)\par 
}\pard \sl-219 \tx50 \tqr \tx1519 \fs24 \f0 {\pard \posx17267 \posy6360 \phpg \pvpg \absh-755 \absw1917 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s26 \posx17267 \posy6360 \phpg \pvpg \absh-755 \absw1917 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx1866 Y\_expansion\par 
\pard \s26 \posx17267 \posy6360 \phpg \pvpg \absh-755 \absw1917 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx1866 1 = double height\par 
\pard \s26 \posx17267 \posy6360 \phpg \pvpg \absh-755 \absw1917 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx1866 0 = normal height\par 
}\pard \sl-221 \tx50 \tqr \tx1866 \fs24 \f0 {\pard \posx16650 \posy7242 \phpg \pvpg \absh-750 \absw1897 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s27 \posx16650 \posy7242 \phpg \pvpg \absh-750 \absw1897 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tqr \tx1846 X\_expansion\par 
\pard \s27 \posx16650 \posy7242 \phpg \pvpg \absh-750 \absw1897 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tqr \tx1846 1 = double width\par 
\pard \s27 \posx16650 \posy7242 \phpg \pvpg \absh-750 \absw1897 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tqr \tx1846 0 = normal width\par 
}\pard \sl-219 \tx50 \tqr \tx1846 \fs24 \f0 {\pard \posx16082 \posy8118 \phpg \pvpg \absh-976 \absw2007 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s28 \posx16082 \posy8118 \phpg \pvpg \absh-976 \absw2007 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx1956 Behind or in front of bit map background 1 = behind (default) 0 = in front\par 
}\pard \sl-221 \tx50 \tqr \tx1956 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tx491 \tqr \tx7281 \qj \li1122 \fi441 \ri50 \sl253 \sbasedon0 \snext2 OmniPage #2049;}
{\s3 \tx61 \tqr \tx3932 \ql \sl319 \li1111 \ri3395 \sbasedon0 \snext3 OmniPage #2050;}
{\s4 \tx50 \tqr \tx7277 \qj \li1122 \ri50 \sl262 \sbasedon0 \snext4 OmniPage #2051;}
{\s5 \tqr \tx3209 \ql \li1122 \ri50 \sl219 \sbasedon0 \snext5 OmniPage #2052;}
{\s6 \tqr \tx2729 \ql \sl221 \li1122 \ri50 \sbasedon0 \snext6 OmniPage #2053;}
{\s7 \tx477 \tqr \tx7303 \ql \li1122 \fi427 \ri50 \sl261 \sbasedon0 \snext7 OmniPage #2054;}
{\s8 \tx50 \tqr \tx2834 \ql \sl211 \li1122 \ri50 \sbasedon0 \snext8 OmniPage #2055;}
{\s9 \tqr \tx7259 \ql \li1122 \ri69 \sl265 \sbasedon0 \snext9 OmniPage #2056;}
{\s10 \tx55 \tx492 \tqr \tx7278 \ql \li1117 \fi437 \ri50 \sl261 \sbasedon0 \snext10 OmniPage #2057;}
{\s11 \tx50 \tqr \tx2844 \ql \sl211 \li1122 \ri50 \sbasedon0 \snext11 OmniPage #2058;}
{\s12 \tqr \tx7265 \ql \li1122 \ri50 \sl262 \sbasedon0 \snext12 OmniPage #2059;}
{\s13 \tqr \tx2598 \ql \sl211 \li1122 \ri50 \sbasedon0 \snext13 OmniPage #2060;}
{\s14 \tqr \tx5059 \ql \li1122 \ri2255 \sl261 \sbasedon0 \snext14 OmniPage #2061;}
{\s15 \tx51 \tx488 \tqr \tx7264 \ql \li1121 \fi437 \ri50 \sl261 \sbasedon0 \snext15 OmniPage #2062;}
{\s16 \tx50 \tqr \tx287 \ql \li1122 \ri50 \sl261 \sbasedon0 \snext16 OmniPage #2063;}
{\s17 \tqr \tx7285 \ql \li1122 \ri50 \sl256 \sbasedon0 \snext17 OmniPage #2064;}
{\s18 \tqr \tx7098 \ql \sl211 \li1122 \ri50 \sbasedon0 \snext18 OmniPage #2065;}
{\s19 \tqr \tx7262 \ql \li1122 \ri74 \sl260 \sbasedon0 \snext19 OmniPage #2066;}
{\s20 \tx51 \tx483 \tqr \tx7286 \ql \li1121 \fi432 \ri50 \sl260 \sbasedon0 \snext20 OmniPage #2067;}
{\s21 \tx50 \tqr \tx5217 \ql \li1122 \ri50 \sl303 \sbasedon0 \snext21 OmniPage #2068;}
{\s22 \tqr \tx7266 \ql \li1122 \ri50 \sl260 \sbasedon0 \snext22 OmniPage #2069;}
{\s23 \tqr \tx4859 \qc \sl261 \sbasedon0 \snext23 OmniPage #2070;}
}\par {\pard \posx1668 \posy311 \phpg \pvpg \absh-1071 \absw7332 \dxfrtext200 \fs25 \f0 \pard \s2 \posx1668 \posy311 \phpg \pvpg \absh-1071 \absw7332 \dxfrtext200 \qj \li50 \fi441 \ri50 \sl-253 \tx50 \tx491 \tqr \tx7281 The example in line 120 turns sprite number 8 off, changes its color to yellow, its priority defaults to in front, and the x and y sizes of the sprite are doubled. Note when a sprite parameter is not specified its default is normally 0.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1059 \margrsxn1544 \pard \sl-253 \tx50 \tx491 \tqr \tx7281 \fs24 \f0 {\pard \posx1678 \posy1684 \phpg \pvpg \absh-1785 \absw7328 \dxfrtext200 \fs10 \f0 \fs30 \f1 \i \pard \s3 \posx1678 \posy1684 \phpg \pvpg \absh-1785 \absw7328 \dxfrtext200 \li61 \ri3395 \sl-319 \tx61 \tqr \tx3932 Animating Sprites: MOVSPR\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s4 \posx1678 \posy1684 \phpg \pvpg \absh-1785 \absw7328 \dxfrtext200 \qj \li50 \ri50 \sl-262 \tx50 \tqr \tx7277 Now that we know how to define a sprite with the sprite designer and how to turn the sprite on and off, color it, and set its priority, let's see how to put it in motion. The \fs23 \f2 MOVSPR \fs25 \f0 statement is used to set a sprite's position, start it moving and stop it. There are three syntaxes for \fs23 \f2 MOVSPR, \fs25 \f0 as follows:\par 
}\pard \sl-262 \tx50 \tqr \tx7277 \fs24 \f0 {\pard \posx1109 \posy3657 \phpg \pvpg \absh-734 \absw3260 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s5 \posx1109 \posy3657 \phpg \pvpg \absh-734 \absw3260 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tqr \tx3209 MOVSPR number, x, y: MOVSPR number, +/\_x, +/\_y: MOVSPR number, x#y:\par 
}\pard \sl-219 \tx50 \tqr \tx3209 \fs24 \f0 {\pard \posx4750 \posy3659 \phpg \pvpg \absh-739 \absw2780 \dxfrtext200 \fs21 \f3 \pard \s6 \posx4750 \posy3659 \phpg \pvpg \absh-739 \absw2780 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx2729 REM absolute position\par 
\pard \s6 \posx4750 \posy3659 \phpg \pvpg \absh-739 \absw2780 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx2729 REM relative position\par 
\pard \s6 \posx4750 \posy3659 \phpg \pvpg \absh-739 \absw2780 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx2729 REM angle and speed\par 
}\pard \sl-221 \tx50 \tqr \tx2729 \fs24 \f0 {\pard \posx1690 \posy4618 \phpg \pvpg \absh-1095 \absw7354 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s7 \posx1690 \posy4618 \phpg \pvpg \absh-1095 \absw7354 \dxfrtext200 \li50 \fi427 \ri50 \sl-261 \tx50 \tx477 \tqr \tx7303 Here the parameter "number" is the sprite number you wish to move (1 to 8), while x and y are the coordinates of the new sprite location. When you put the values of x and y in the sprite statement, the sprite will move to the new location automatically. For example:\par 
}\pard \sl-261 \tx50 \tx477 \tqr \tx7303 \fs24 \f0 {\pard \posx1127 \posy5899 \phpg \pvpg \absh-296 \absw2885 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s8 \posx1127 \posy5899 \phpg \pvpg \absh-296 \absw2885 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx2834 100 MOVSPR 1, 285, 178\par 
}\pard \sl-211 \tx50 \tqr \tx2834 \fs24 \f0 {\pard \posx1707 \posy6426 \phpg \pvpg \absh-1361 \absw7329 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s9 \posx1707 \posy6426 \phpg \pvpg \absh-1361 \absw7329 \dxfrtext200 \li50 \ri69 \sl-265 \tx50 \tqr \tx7259 will move sprite number 1 from its current position to the lower right corner of the screen.\par 
\fs10 \f0 \fs25 \f0 \pard \s10 \posx1707 \posy6426 \phpg \pvpg \absh-1361 \absw7329 \dxfrtext200 \li55 \fi437 \ri50 \sl-261 \tx55 \tx492 \tqr \tx7278 If you use relative values for x and y, (i.e., you give them + or\_ signs, as shown in the second example) the sprite is moved relative to the last sprite position (not relative to the PC). For example:\par 
}\pard \sl-261 \tx55 \tx492 \tqr \tx7278 \fs24 \f0 {\pard \posx1120 \posy7964 \phpg \pvpg \absh-296 \absw2895 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s11 \posx1120 \posy7964 \phpg \pvpg \absh-296 \absw2895 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx2844 110 MOVSPR 1, +50, \_50\par 
}\pard \sl-211 \tx50 \tqr \tx2844 \fs24 \f0 {\pard \posx1710 \posy8500 \phpg \pvpg \absh-837 \absw7316 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s12 \posx1710 \posy8500 \phpg \pvpg \absh-837 \absw7316 \dxfrtext200 \li50 \ri50 \sl-262 \tx50 \tqr \tx7265 will move sprite number 1 from its last position to 50 pixels toward the right screen horizontally and 50 pixels towards the top of the screen vertically. Note this is not the same as the statement:\par 
}\pard \sl-262 \tx50 \tqr \tx7265 \fs24 \f0 {\pard \posx1120 \posy9509 \phpg \pvpg \absh-296 \absw2649 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s13 \posx1120 \posy9509 \phpg \pvpg \absh-296 \absw2649 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx2598 110 MOVSPR 1, 50, 50\par 
}\pard \sl-211 \tx50 \tqr \tx2598 \fs24 \f0 {\pard \posx1719 \posy10045 \phpg \pvpg \absh-1097 \absw7315 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s14 \posx1719 \posy10045 \phpg \pvpg \absh-1097 \absw7315 \dxfrtext200 \li50 \ri2255 \sl-261 \tx50 \tqr \tx5059 which will move the sprite to the location 50, 50.\par 
\fs10 \f0 \fs25 \f0 \pard \s15 \posx1719 \posy10045 \phpg \pvpg \absh-1097 \absw7315 \dxfrtext200 \li51 \fi437 \ri50 \sl-261 \tx51 \tx488 \tqr \tx7264 The third form of the \fs23 \f2 MOVSPR \fs25 \f0 statement allows you to set sprites into automatic motion and to stop them. In this "turtle mode" case we use the third syntax for \fs23 \f2 MOVSPR, \fs25 \f0 where x and y are separated by a #\par 
}\pard \sl-261 \tx51 \tx488 \tqr \tx7264 \fs24 \f0 {\pard \posx10423 \posy25 \phpg \pvpg \absh-312 \absw338 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s16 \posx10423 \posy25 \phpg \pvpg \absh-312 \absw338 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx287 r\par 
}\pard \sl-261 \tx50 \tqr \tx287 \fs24 \f0 {\pard \posx11231 \posy324 \phpg \pvpg \absh-1082 \absw7336 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s17 \posx11231 \posy324 \phpg \pvpg \absh-1082 \absw7336 \dxfrtext200 \li50 \ri50 \sl-256 \tx50 \tqr \tx7285 sign. In this case the value of x specifies a clockwise angle in degrees for the direction the sprite will move between 0 and 360 degrees. The value for y represents a constant speed for the sprite, from 0 through 15. In this example:\par 
}\pard \sl-256 \tx50 \tqr \tx7285 \fs24 \f0 {\pard \posx10650 \posy1651 \phpg \pvpg \absh-296 \absw7149 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s18 \posx10650 \posy1651 \phpg \pvpg \absh-296 \absw7149 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx7098 100 MOVSPR 2,135#8: REM sprite 2, 135 degrees, speed 8\par 
}\pard \sl-211 \tx50 \tqr \tx7098 \fs24 \f0 {\pard \posx11226 \posy2110 \phpg \pvpg \absh-2126 \absw7337 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s19 \posx11226 \posy2110 \phpg \pvpg \absh-2126 \absw7337 \dxfrtext200 \li50 \ri74 \sl-260 \tx50 \tqr \tx7262 sprite number 2 will move on a 135 degree angle (down and to the right) at a relative speed of 8. This is shown in Figure 6\_12.\par 
\fs10 \f0 \fs25 \f0 \pard \s20 \posx11226 \posy2110 \phpg \pvpg \absh-2126 \absw7337 \dxfrtext200 \li51 \fi432 \ri50 \sl-260 \tx51 \tx483 \tqr \tx7286 What is wonderful about these sprites is that you can set one or all of them in motion and they will continue to move, wrapping around the screen and passing over each other, without any slowdown in the program. When a sprite is turned off with the SPRITE command, it remembers its last position. When it is turned on again with SPRITE, the object moves off in the last heading and speed, unless it is changed.\par 
}\pard \sl-260 \tx51 \tx483 \tqr \tx7286 \fs24 \f0 {\pard \posx11211 \posy4539 \phpg \pvpg \absh-675 \absw5268 \dxfrtext200 \fs10 \f0 \fs30 \f1 \i \pard \s21 \posx11211 \posy4539 \phpg \pvpg \absh-675 \absw5268 \dxfrtext200 \li50 \ri50 \sl-303 \tx50 \tqr \tx5217 Handling Sprite Collisions: COLLISION and BUMP\par 
}\pard \sl-303 \tx50 \tqr \tx5217 \fs24 \f0 {\pard \posx11218 \posy5267 \phpg \pvpg \absh-832 \absw7317 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s22 \posx11218 \posy5267 \phpg \pvpg \absh-832 \absw7317 \dxfrtext200 \li50 \ri50 \sl-260 \tx50 \tqr \tx7266 Another very useful feature of Commodore BASIC and its sprites is that you can determine when sprites collide with each other or with the background. The COLLISION statement is used to allow your program to\par 
}\pard \sl-260 \tx50 \tqr \tx7266 \fs24 \f0 {\pard \posx12442 \posy6569 \phpg \pvpg \absh-312 \absw4910 \dxfrtext200 \fs10 \f0 \fs25 \f4 \b \pard \s23 \posx12442 \posy6569 \phpg \pvpg \absh-312 \absw4910 \dxfrtext200 \qc \sl-261 \tx50 \tqr \tx4859 Figure 6\_12. Automatic Motion with MOVSPR\par 
}\pard \qc \sl-261 \tx50 \tqr \tx4859 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx7259 \qj \li1122 \ri50 \sl250 \sbasedon0 \snext2 OmniPage #2305;}
{\s3 \tqr \tx3245 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext3 OmniPage #2306;}
{\s4 \tqr \tx7270 \qj \li1122 \ri71 \sl258 \sbasedon0 \snext4 OmniPage #2307;}
{\s5 \tx52 \tx495 \tqr \tx7291 \qj \li1120 \fi443 \ri50 \sl261 \sbasedon0 \snext5 OmniPage #2308;}
{\s6 \tx511 \tqr \tx7275 \qj \li661 \ri66 \sl253 \sbasedon0 \snext6 OmniPage #2309;}
{\s7 \tx50 \tqr \tx3553 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext7 OmniPage #2310;}
{\s8 \tx493 \tqr \tx7263 \qj \li1122 \fi443 \ri64 \sl265 \sbasedon0 \snext8 OmniPage #2311;}
{\s9 \tx50 \tx493 \tqr \tx7277 \qj \li1122 \fi443 \ri50 \sl261 \sbasedon0 \snext9 OmniPage #2312;}
{\s10 \tx50 \tqr \tx6315 \qc \sl253 \sbasedon0 \snext10 OmniPage #2313;}
{\s11 \tx643 \tqr \tx5006 \ql \sl253 \li529 \ri1359 \sbasedon0 \snext11 OmniPage #2314;}
{\s12 \tx50 \tqr \tx316 \ql \sl253 \li1122 \ri50 \sbasedon0 \snext12 OmniPage #2315;}
{\s13 \tqr \tx2893 \ql \sl238 \li1122 \ri50 \sbasedon0 \snext13 OmniPage #2316;}
{\s14 \tqr \tx7263 \qj \li1122 \ri79 \sl255 \sbasedon0 \snext14 OmniPage #2317;}
{\s15 \tx484 \tqr \tx7292 \qj \li1122 \fi434 \ri50 \sl260 \sbasedon0 \snext15 OmniPage #2318;}
{\s16 \tx50 \tx484 \tqr \tx7235 \qj \li1122 \fi434 \ri107 \sl265 \sbasedon0 \snext16 OmniPage #2319;}
{\s17 \tx50 \tqr \tx3867 \ql \sl222 \li1122 \ri50 \sbasedon0 \snext17 OmniPage #2320;}
{\s18 \tqr \tx7345 \ql \li1122 \ri50 \sl253 \sbasedon0 \snext18 OmniPage #2321;}
{\s19 \tqr \tx7822 \ql \li1122 \ri50 \sl217 \sbasedon0 \snext19 OmniPage #2322;}
{\s20 \tqr \tx6835 \ql \li1122 \ri50 \sl202 \sbasedon0 \snext20 OmniPage #2323;}
{\s21 \tqr \tx6724 \ql \li1122 \ri50 \sl219 \sbasedon0 \snext21 OmniPage #2324;}
{\s22 \tqr \tx7167 \ql \li1122 \ri50 \sl221 \sbasedon0 \snext22 OmniPage #2325;}
{\s23 \tx488 \tqr \tx7282 \ql \li1122 \fi438 \ri50 \sl260 \sbasedon0 \snext23 OmniPage #2326;}
}\par {\pard \posx1649 \posy288 \phpg \pvpg \absh-565 \absw7310 \dxfrtext200 \fs24 \f0 \plain \lang1033 \pard \s2 \posx1649 \posy288 \phpg \pvpg \absh-565 \absw7310 \dxfrtext200 \qj \li50 \ri50 \sl-250 \tx50 \tqr \tx7259 be signaled when sprites collide and the BUMP statement to determine which sprites collided.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1032 \margrsxn1527 \pard \sl-250 \tx50 \tqr \tx7259 {\pard \posx1654 \posy1045 \phpg \pvpg \absh-315 \absw3296 \dxfrtext200 \fs10 \f0 \fs24 \f1 \b \pard \s3 \posx1654 \posy1045 \phpg \pvpg \absh-315 \absw3296 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx3245 Event Trapping: COLLISION\par 
}\pard \sl-253 \tx50 \tqr \tx3245 \fs24 \f0 {\pard \posx1647 \posy1428 \phpg \pvpg \absh-3968 \absw7342 \dxfrtext200 \fs10 \f0 \fs24 \f0 \plain \lang1033 \pard \s4 \posx1647 \posy1428 \phpg \pvpg \absh-3968 \absw7342 \dxfrtext200 \qj \li50 \ri71 \sl-258 \tx50 \tqr \tx7270 The COLLISION statement detects three different types of "events": col\-lisions between sprites, collisions between sprites and the bit map images, and light pen activation. When one of these events occurs, BASIC will finish whatever statement it was executing, and then it will transfer control to the the first line in your collision\_handling routine, as specified by the COLLISION statement. When your routine is complete, a RETURN state\-ment must be executed. This causes the program to resume on the line following the one that was executing when the event occurred.\par 
\fs10 \f0 \fs24 \f0 \pard \s5 \posx1647 \posy1428 \phpg \pvpg \absh-3968 \absw7342 \dxfrtext200 \qj \li52 \fi443 \ri50 \sl-261 \tx52 \tx495 \tqr \tx7291 Thus your program is interrupted by a collision, and sent to a specific routine which controls what happens when there is a collision. This is called event "trapping". The event subroutine might reverse the direction of the sprite if it hits a wall on the screen edge, or it might make a sprite "blow up" and disappear if it hits another sprite, and so on. The COLLI\-SION statement effectively "arms" the program to respond to such collisions.\par 
\fs10 \f0 \fs24 \f0 \pard \s6 \posx1647 \posy1428 \phpg \pvpg \absh-3968 \absw7342 \dxfrtext200 \qj \li511 \ri66 \sl-253 \tx511 \tqr \tx7275 The syntax of the COLLISION statement is:\par 
}\pard \sl-253 \tx511 \tqr \tx7275 {\pard \posx1082 \posy5562 \phpg \pvpg \absh-324 \absw3604 \dxfrtext200 \fs10 \f0 \fs21 \f2 \b \pard \s7 \posx1082 \posy5562 \phpg \pvpg \absh-324 \absw3604 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx3553 COLLISION \fs24 \f0 \plain \lang1033 event, line number\par 
}\pard \sl-253 \tx50 \tqr \tx3553 {\pard \posx1665 \posy6101 \phpg \pvpg \absh-2409 \absw7328 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s8 \posx1665 \posy6101 \phpg \pvpg \absh-2409 \absw7328 \dxfrtext200 \qj \li50 \fi443 \ri64 \sl-265 \tx50 \tx493 \tqr \tx7263 Here the event parameter represents the type of event to be detected, as shown in Table 6\_8.\par 
\fs10 \f0 \fs24 \f0 \pard \s9 \posx1665 \posy6101 \phpg \pvpg \absh-2409 \absw7328 \dxfrtext200 \qj \li50 \fi443 \ri50 \sl-261 \tx50 \tx493 \tqr \tx7277 The parameter line number is the line number you wish the program to branch to when the type interrupt occurs. When line number is not included in the statement, trapping is disabled. Understand that a collision occurs only when a non\_background part of a sprite overlaps the non\-background part of another sprite. Although the sprite (moving image) pixels are independent of the bit\_mapped screen pixels, the VIC II chip can tell when the sprite image and bit\_mapped screen contents are over\-\pard \posx1665 \posy6101 \phpg \pvpg \absh-2409 \absw7328 \dxfrtext200 \qj \li50 \fi443 \ri50 \sl-261 \tx50 \tx493 \tqr \tx7277 \par 
}\pard \sl-261 \tx50 \tx493 \tqr \tx7277 {\pard \posx2202 \posy9087 \phpg \pvpg \absh-847 \absw6366 \dxfrtext200 \fs10 \f0 \fs24 \f1 \b \pard \s10 \posx2202 \posy9087 \phpg \pvpg \absh-847 \absw6366 \dxfrtext200 \qc \sl-253 \tx50 \tqr \tx6315 Table 6\_8. Meaning of Event Numbers in MOVSPR Statement\par 
\fs21 \f1 \pard \posx2202 \posy9087 \phpg \pvpg \absh-847 \absw6366 \dxfrtext200 \sl-218 \tx50 \tqr \tx6315 \par 
\fs10 \f0 \fs24 \f0 \plain \lang1033 \pard \s11 \posx2202 \posy9087 \phpg \pvpg \absh-847 \absw6366 \dxfrtext200 \li643 \ri1359 \sl-253 \tx643 \tqr \tx5006 Value Event to Detect\par 
}\pard \sl-253 \tx643 \tqr \tx5006 {\pard \posx2997 \posy10582 \phpg \pvpg \absh-315 \absw367 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s12 \posx2997 \posy10582 \phpg \pvpg \absh-315 \absw367 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx316 2\par 
}\pard \sl-253 \tx50 \tqr \tx316 {\pard \posx5033 \posy10095 \phpg \pvpg \absh-791 \absw2944 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s13 \posx5033 \posy10095 \phpg \pvpg \absh-791 \absw2944 \dxfrtext200 \li50 \ri50 \sl-238 \tx50 \tqr \tx2893 Sprite to sprite collision\par 
\pard \s13 \posx5033 \posy10095 \phpg \pvpg \absh-791 \absw2944 \dxfrtext200 \li50 \ri50 \sl-238 \tx50 \tqr \tx2893 Sprite to display data collision\par 
\pard \s13 \posx5033 \posy10095 \phpg \pvpg \absh-791 \absw2944 \dxfrtext200 \li50 \ri50 \sl-238 \tx50 \tqr \tx2893 Light pen activation\par 
}\pard \sl-238 \tx50 \tqr \tx2893 {\pard \posx11241 \posy292 \phpg \pvpg \absh-3674 \absw7343 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s14 \posx11241 \posy292 \phpg \pvpg \absh-3674 \absw7343 \dxfrtext200 \qj \li50 \ri79 \sl-255 \tx50 \tqr \tx7263 lapping. Thus a sprite\_to\_bit\_mapped collision occurs whenever part of a sprite that is in the foreground color occupies the same location as a pixel in the bit\_map that is in the foreground color. Sprites that are turned off will not cause collisions to occur.\par 
\fs10 \f0 \fs24 \f0 \pard \s15 \posx11241 \posy292 \phpg \pvpg \absh-3674 \absw7343 \dxfrtext200 \qj \li50 \fi434 \ri50 \sl-260 \tx50 \tx484 \tqr \tx7292 Although you may have several types of event detection active at the same time, only one collision can be processed on the C128 at a time. Therefore the first thing that must be done by your event handling routine is to turn off further processing of events until it is finished. After you process the event and return to the main program, any event that occurred while you were in the previous process will be remembered and cause a new event interrupt. Hopefully your event handling routine will be brief so that any sprite collisions won't be missed.\par 
\fs10 \f0 \fs24 \f0 \pard \s16 \posx11241 \posy292 \phpg \pvpg \absh-3674 \absw7343 \dxfrtext200 \qj \li50 \fi434 \ri107 \sl-265 \tx50 \tx484 \tqr \tx7235 Here is how a typical program that used COLLISION detection of sprites might look:\par 
}\pard \sl-265 \tx50 \tx484 \tqr \tx7235 {\pard \posx10682 \posy4127 \phpg \pvpg \absh-537 \absw3918 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s17 \posx10682 \posy4127 \phpg \pvpg \absh-537 \absw3918 \dxfrtext200 \li50 \ri50 \sl-222 \tx50 \tqr \tx3867 100 COLOR \fs24 \f0 statement to set color\par 
\fs21 \f3 \pard \s17 \posx10682 \posy4127 \phpg \pvpg \absh-537 \absw3918 \dxfrtext200 \li50 \ri50 \sl-222 \tx50 \tqr \tx3867 110 GRAPHIC \fs24 \f0 statement to set mode\par 
}\pard \sl-222 \tx50 \tqr \tx3867 {\pard \posx10717 \posy4782 \phpg \pvpg \absh-315 \absw7396 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s18 \posx10717 \posy4782 \phpg \pvpg \absh-315 \absw7396 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx7345 (BASIC \fs24 \f0 statements to set up program, draw screen background, etc. )\par 
}\pard \sl-253 \tx50 \tqr \tx7345 {\pard \posx10668 \posy5224 \phpg \pvpg \absh-532 \absw7873 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s19 \posx10668 \posy5224 \phpg \pvpg \absh-532 \absw7873 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx7822 500 COLLISION 1,1000: REM \fs24 \f0 start detecting sprite to sprite collisions \fs21 \f3 510 COLLISION 2,2000: REM \fs24 \f0 start detecting sprite to bkgnd collisions\par 
}\pard \sl-217 \tx50 \tqr \tx7822 {\pard \posx10664 \posy5879 \phpg \pvpg \absh-517 \absw6886 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s20 \posx10664 \posy5879 \phpg \pvpg \absh-517 \absw6886 \dxfrtext200 \li50 \ri50 \sl-202 \tx50 \tqr \tx6835 520 (Loop \fs24 \f0 here while waiting for sprites to collide with each other or with the background)\par 
}\pard \sl-202 \tx50 \tqr \tx6835 {\pard \posx10664 \posy6533 \phpg \pvpg \absh-1191 \absw6775 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s21 \posx10664 \posy6533 \phpg \pvpg \absh-1191 \absw6775 \dxfrtext200 \li50 \ri50 \sl-219 \tx50 \tqr \tx6724 1000 COLLISION 1: COLLISION 2: REM \fs24 \f0 disable all sprite collision detection \fs21 \f3 1005 \fs24 \f0 (process sprite to sprite collision, reenable collision detection) \fs21 \f3 1500 RETURN\par 
}\pard \sl-219 \tx50 \tqr \tx6724 \fs24 \f0 {\pard \posx10664 \posy7852 \phpg \pvpg \absh-1201 \absw7218 \dxfrtext200 \fs21 \f3 \pard \s22 \posx10664 \posy7852 \phpg \pvpg \absh-1201 \absw7218 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx7167 2000 COLLISION 0: COLLISION 1: REM \fs24 \f0 disable all sprite collision detection 2005 (process sprite to background collision, reenable collision detection) 2500 \fs21 \f3 RETURN\par 
}\pard \sl-221 \tx50 \tqr \tx7167 \fs24 \f0 {\pard \posx11241 \posy9305 \phpg \pvpg \absh-1880 \absw7333 \dxfrtext200 \fs24 \f0 \fs24 \f0 \pard \s23 \posx11241 \posy9305 \phpg \pvpg \absh-1880 \absw7333 \dxfrtext200 \li50 \fi438 \ri50 \sl-260 \tx50 \tx488 \tqr \tx7282 Here you can see that after the program has set up its initial screens and other parameters, it "arms" the collision detection in lines 500 and 510. Next the program enters a loop where it can refresh the various things that the program is doing, moving any objects that are not sprites, playing music, reading the joystick, and so on. We call this the treadmill part of the program. Whenever a sprite hits another sprite or hits the background, the program will branch to the subroutine in lines 1000 or 2000 respec\-\pard \posx11241 \posy9305 \phpg \pvpg \absh-1880 \absw7333 \dxfrtext200 \li50 \fi438 \ri50 \sl-260 \tx50 \tx488 \tqr \tx7282 \par 
}\pard \sl-260 \tx50 \tx488 \tqr \tx7282 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx7271 \qj \li1122 \ri50 \sl252 \sbasedon0 \snext2 OmniPage #2561;}
{\s3 \tqr \tx3439 \ql \sl240 \li1122 \ri50 \sbasedon0 \snext3 OmniPage #2562;}
{\s4 \tqr \tx7285 \qj \li1122 \ri50 \sl261 \sbasedon0 \snext4 OmniPage #2563;}
{\s5 \tx59 \tx508 \tqr \tx7278 \qj \li1113 \fi449 \ri57 \sl262 \sbasedon0 \snext5 OmniPage #2564;}
{\s6 \tx50 \tqr \tx2248 \ql \sl217 \li1122 \ri50 \sbasedon0 \snext6 OmniPage #2565;}
{\s7 \tx499 \tqr \tx7292 \qj \li1122 \fi449 \ri50 \sl261 \sbasedon0 \snext7 OmniPage #2566;}
{\s8 \tx503 \tqr \tx7275 \qj \li669 \ri67 \sl261 \sbasedon0 \snext8 OmniPage #2567;}
{\s9 \tx50 \tqr \tx3217 \ql \sl217 \li1122 \ri50 \sbasedon0 \snext9 OmniPage #2568;}
{\s10 \tx499 \tqr \tx7268 \qj \li1122 \fi449 \ri50 \sl261 \sbasedon0 \snext10 OmniPage #2569;}
{\s11 \tx50 \tqr \tx7403 \ql \sl217 \li1122 \ri50 \sbasedon0 \snext11 OmniPage #2570;}
{\s12 \tqr \tx7085 \ql \sl216 \li1122 \ri50 \sbasedon0 \snext12 OmniPage #2571;}
{\s13 \tqr \tx6525 \ql \sl218 \li1122 \ri50 \sbasedon0 \snext13 OmniPage #2572;}
{\s14 \tqr \tx5867 \ql \sl216 \li1122 \ri50 \sbasedon0 \snext14 OmniPage #2573;}
{\s15 \tqr \tx4995 \ql \li1122 \ri50 \sl304 \sbasedon0 \snext15 OmniPage #2574;}
{\s16 \tqr \tx7273 \qj \li1122 \ri50 \sl260 \sbasedon0 \snext16 OmniPage #2575;}
{\s17 \tqr \tx2705 \ql \sl217 \li1122 \ri50 \sbasedon0 \snext17 OmniPage #2576;}
{\s18 \tqr \tx7296 \qj \li1122 \ri50 \sl261 \sbasedon0 \snext18 OmniPage #2577;}
{\s19 \tqr \tx6328 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext19 OmniPage #2578;}
{\s20 \tqr \tx4509 \ql \sl261 \li1122 \ri50 \sbasedon0 \snext20 OmniPage #2579;}
{\s21 \tqr \tx378 \qc \sl204 \sbasedon0 \snext21 OmniPage #2580;}
{\s22 \tqr \tx363 \qc \sl261 \sbasedon0 \snext22 OmniPage #2581;}
{\s23 \tqr \tx2515 \ql \li1122 \ri344 \sl217 \sbasedon0 \snext23 OmniPage #2582;}
{\s24 \tx53 \tqr \tx2809 \ql \sl217 \li1119 \ri50 \sbasedon0 \snext24 OmniPage #2583;}
}\par {\pard \posx1555 \posy383 \phpg \pvpg \absh-1323 \absw7322 \dxfrtext200 \fs25 \f0 \pard \s2 \posx1555 \posy383 \phpg \pvpg \absh-1323 \absw7322 \dxfrtext200 \qj \li50 \ri50 \sl-252 \tx50 \tqr \tx7271 lively, process the collision and return. For example, a sprite colliding with an edge of a rectangle surrounding the screen can be "bounced" off it by performing a mathematical computation on the angle in the \fs23 \f1 MOVSPR \fs25 \f0 statement. Note that the light pen type of event will cause an interrupt if enabled.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn931 \margrsxn1435 \pard \sl-252 \tx50 \tqr \tx7271 \fs24 \f0 {\pard \posx1573 \posy1914 \phpg \pvpg \absh-314 \absw3490 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s3 \posx1573 \posy1914 \phpg \pvpg \absh-314 \absw3490 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx3439 What Sprites Collided: \fs24 \f2 \b BUMP\par 
}\pard \tx50 \tqr \tx3439 \fs24 \f0 {\pard \posx1549 \posy2297 \phpg \pvpg \absh-2142 \absw7336 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s4 \posx1549 \posy2297 \phpg \pvpg \absh-2142 \absw7336 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7285 Just knowing that a sprite collided with another sprite or with the back\-ground may not be enough. Suppose there is more than one sprite? In a sprite\_to\_sprite collision you need a way to tell what sprites collided. Or if there is a sprite\_to\_bit\_mapped\_image collision you need to know what sprite hit the image. The \fs23 \f1 BUMP \fs25 \f0 function is provided for this purpose.\par 
\fs10 \f0 \fs25 \f0 \pard \s5 \posx1549 \posy2297 \phpg \pvpg \absh-2142 \absw7336 \dxfrtext200 \qj \li59 \fi449 \ri57 \sl-262 \tx59 \tx508 \tqr \tx7278 After you get a collision event interrupt and have branched to the processing routine, the \fs23 \f1 BUMP \fs25 \f0 function is used to tell what sprites have collided with each other or the background. The syntax of \fs23 \f1 BUMP is:\par 
}\pard \sl-262 \tx59 \tx508 \tqr \tx7278 \fs24 \f0 {\pard \posx984 \posy4629 \phpg \pvpg \absh-307 \absw2299 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s6 \posx984 \posy4629 \phpg \pvpg \absh-307 \absw2299 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx2248 BUMP (event type)\par 
}\pard \sl-217 \tx50 \tqr \tx2248 \fs24 \f0 {\pard \posx1551 \posy5142 \phpg \pvpg \absh-3705 \absw7343 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s7 \posx1551 \posy5142 \phpg \pvpg \absh-3705 \absw7343 \dxfrtext200 \qj \li50 \fi449 \ri50 \sl-261 \tx50 \tx499 \tqr \tx7292 Since bump is a function its result must be returned to a variable to be used in the program, such as \fs23 \f1 R = BUMP(1). \fs25 \f0 The parameter event type is used to tell \fs23 \f1 BUMP \fs25 \f0 what type of event you wish to know about. It corresponds exactly to the event types in the COLLISION statement, as listed in the previous table. \fs23 \f1 BUMP \fs25 \f0 returns a number between 0 and 255. The number is interpreted as an 8 bit binary value, with each bit position representing a sprite that has collided with another sprite or with the background. When that bit is on (1) there was a collision, when off (0) there was no collision for that sprite. When there are multiple collisions between sprites several bit positions will become active. In such a case you would use the RSPPOS function (described later). This function returns the current x\_position, the y\_position and the speed (1\_15) if the sprite is moving.\par 
\fs10 \f0 \fs25 \f0 \pard \s8 \posx1551 \posy5142 \phpg \pvpg \absh-3705 \absw7343 \dxfrtext200 \qj \li503 \ri67 \sl-261 \tx503 \tqr \tx7275 Here is an example of \fs23 \f1 BUMP:\par 
}\pard \sl-261 \tx503 \tqr \tx7275 \fs24 \f0 {\pard \posx984 \posy9018 \phpg \pvpg \absh-307 \absw3268 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s9 \posx984 \posy9018 \phpg \pvpg \absh-307 \absw3268 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx3217 1000 A=BUMP(0): B=BUMP(1)\par 
}\pard \sl-217 \tx50 \tqr \tx3217 \fs24 \f0 {\pard \posx1564 \posy9551 \phpg \pvpg \absh-1096 \absw7319 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s10 \posx1564 \posy9551 \phpg \pvpg \absh-1096 \absw7319 \dxfrtext200 \qj \li50 \fi449 \ri50 \sl-261 \tx50 \tx499 \tqr \tx7268 This line reads the sprite to sprite collisions, puts the result in the variable A, reads the sprite to bit\_map collisions, and puts the results in the variable \fs23 \f1 B. \fs25 \f0 The example shown below uses the logical AND operator to tell when sprite #2 has collided with the edge of the screen.\par 
}\pard \sl-261 \tx50 \tx499 \tqr \tx7268 \fs24 \f0 {\pard \posx981 \posy10818 \phpg \pvpg \absh-524 \absw7454 \dxfrtext200 \fs10 \f0 \fs19 \f4 \pard \s11 \posx981 \posy10818 \phpg \pvpg \absh-524 \absw7454 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx7403 100 GOSUB 3000: REM \fs21 \f3 draw screen boundary for sprite to hit\par 
\fs19 \f4 \pard \s11 \posx981 \posy10818 \phpg \pvpg \absh-524 \absw7454 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx7403 110 COLLISION 1,1000:REM \fs21 \f3 enable sprite to sprite collision detect\par 
}\pard \sl-217 \tx50 \tqr \tx7403 \fs24 \f0 {\pard \posx10742 \posy325 \phpg \pvpg \absh-740 \absw7136 \dxfrtext200 \fs21 \f3 \pard \s12 \posx10742 \posy325 \phpg \pvpg \absh-740 \absw7136 \dxfrtext200 \li50 \ri50 \sl-216 \tx50 \tqr \tx7085 120 \fs19 \f4 MOVSPR 1,160,190,45#8: REM \fs21 \f3 start spritel, move on angle\par 
\fs19 \f4 \pard \s12 \posx10742 \posy325 \phpg \pvpg \absh-740 \absw7136 \dxfrtext200 \li50 \ri50 \sl-216 \tx50 \tqr \tx7085 130 MOVSPR \fs21 \f3 2,160,190,135\fs19 \f4 #8: REM \fs21 \f3 start sprites, move on angle\par 
\pard \s12 \posx10742 \posy325 \phpg \pvpg \absh-740 \absw7136 \dxfrtext200 \li50 \ri50 \sl-216 \tx50 \tqr \tx7085 200 GOTO 200\par 
}\pard \sl-216 \tx50 \tqr \tx7085 \fs24 \f0 {\pard \posx10742 \posy1213 \phpg \pvpg \absh-946 \absw6576 \dxfrtext200 \fs19 \f4 \fs19 \f4 \pard \s13 \posx10742 \posy1213 \phpg \pvpg \absh-946 \absw6576 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx6525 1000 REM SPRITE COLLISION \_ DETERMINE WHAT ONE\par 
\pard \s13 \posx10742 \posy1213 \phpg \pvpg \absh-946 \absw6576 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx6525 1010 COLLISION 1: REM DISABLE INTERRUPTS\par 
\fs21 \f3 \pard \s13 \posx10742 \posy1213 \phpg \pvpg \absh-946 \absw6576 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx6525 1020 \fs19 \f4 IF RBUMP(1) \fs21 \f3 AND 2 \fs19 \f4 THEN GOSUB \fs21 \f3 2000: \fs19 \f4 REM SPRITE \fs21 \f3 2 HIT?\par 
\fs19 \f4 \pard \s13 \posx10742 \posy1213 \phpg \pvpg \absh-946 \absw6576 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx6525 1030 COLLISION 1,1000: RETURN: REM REARM COLLISION\par 
}\pard \sl-218 \tx50 \tqr \tx6525 \fs24 \f0 {\pard \posx10741 \posy2279 \phpg \pvpg \absh-740 \absw5918 \dxfrtext200 \fs19 \f4 \pard \s14 \posx10741 \posy2279 \phpg \pvpg \absh-740 \absw5918 \dxfrtext200 \li50 \ri50 \sl-216 \tx50 \tqr \tx5867 2000 REM GOT A SPRITE \fs21 \f3 #2 \fs19 \f4 COLLISION\par 
\pard \s14 \posx10741 \posy2279 \phpg \pvpg \absh-740 \absw5918 \dxfrtext200 \li50 \ri50 \sl-216 \tx50 \tqr \tx5867 2510 \fs21 \f3 (Process sprites hit with screen edge)\par 
\pard \s14 \posx10741 \posy2279 \phpg \pvpg \absh-740 \absw5918 \dxfrtext200 \li50 \ri50 \sl-216 \tx50 \tqr \tx5867 2600 \fs19 \f4 COLLISION 1,1000: RETURN: REM REARM COLLISION\par 
}\pard \sl-216 \tx50 \tqr \tx5867 \fs24 \f0 {\pard \posx11360 \posy3340 \phpg \pvpg \absh-354 \absw5046 \dxfrtext200 \fs30 \f5 \fs30 \f5 \i \pard \s15 \posx11360 \posy3340 \phpg \pvpg \absh-354 \absw5046 \dxfrtext200 \li50 \ri50 \sl-304 \tx50 \tqr \tx4995 Where are Sprites: RSPPOSfunction\par 
}\pard \sl-304 \tx50 \tqr \tx4995 \fs24 \f0 {\pard \posx11327 \posy3750 \phpg \pvpg \absh-1092 \absw7324 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s16 \posx11327 \posy3750 \phpg \pvpg \absh-1092 \absw7324 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7273 The RSPPOS function is used to determine the position and speed of a sprite. If you didn't have the RSPPOS function you would have to keep track of sprite position and speed with variables in your program, which is possible but complex. The syntax of RSPPOS is:\par 
}\pard \sl-260 \tx50 \tqr \tx7273 \fs24 \f0 {\pard \posx10745 \posy5027 \phpg \pvpg \absh-312 \absw2756 \dxfrtext200 \fs10 \f0 \fs19 \f0 \b \pard \s17 \posx10745 \posy5027 \phpg \pvpg \absh-312 \absw2756 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx2705 RSPPOS \fs19 \f4 \plain \fs19 \f4 \lang1033 ( \fs21 \f3 sprite, data)\par 
}\pard \sl-217 \tx50 \tqr \tx2705 \fs24 \f0 {\pard \posx11329 \posy5550 \phpg \pvpg \absh-2401 \absw7347 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s18 \posx11329 \posy5550 \phpg \pvpg \absh-2401 \absw7347 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7296 Here the sprite parameter is the sprite number you wish to get information about, while the data parameter determines what type of information is returned by RSPPOS, as shown in Table 6\_9. A good use of RSPPOS is to determine which of many bit\_mapped images you might have struck with a sprite. For example, in a game of Breakout you would make the ball a sprite and the many bricks bit\_mapped images. Then each time there was a collision with the bit map you would use the RSPPOS function to return the x and y position of the sprite, and thus find out what brick was struck. Then you could erase the individual brick from the screen.\par 
}\pard \sl-261 \tx50 \tqr \tx7296 \fs24 \f0 {\pard \posx11872 \posy9101 \phpg \pvpg \absh-316 \absw6379 \dxfrtext200 \fs10 \f0 \fs25 \f0 \b \pard \s19 \posx11872 \posy9101 \phpg \pvpg \absh-316 \absw6379 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx6328 Table \fs25 \f0 \plain \fs25 \lang1033 6\_9. \fs25 \f0 \b Meaning of Data Parameter in RSPPOS Statement\par 
}\pard \sl-261 \tx50 \tqr \tx6328 \fs24 \f0 {\pard \posx12499 \posy9652 \phpg \pvpg \absh-312 \absw4560 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s20 \posx12499 \posy9652 \phpg \pvpg \absh-312 \absw4560 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx4509 Data What is Returned\par 
}\pard \sl-261 \tx50 \tqr \tx4509 \fs24 \f0 {\pard \posx12599 \posy10372 \phpg \pvpg \absh-275 \absw429 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s21 \posx12599 \posy10372 \phpg \pvpg \absh-275 \absw429 \dxfrtext200 \qc \sl-204 \tx50 \tqr \tx378 1\'b0\par 
}\pard \sl-204 \tx50 \tqr \tx378 \fs24 \f0 {\pard \posx12612 \posy10647 \phpg \pvpg \absh-277 \absw414 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s22 \posx12612 \posy10647 \phpg \pvpg \absh-277 \absw414 \dxfrtext200 \qc \sl-261 \tx50 \tqr \tx363 2\par 
}\pard \sl-261 \tx50 \tqr \tx363 \fs24 \f0 {\pard \posx14760 \posy10134 \phpg \pvpg \absh-788 \absw2860 \dxfrtext200 \fs10 \f0 \fs21 \f3 \pard \s23 \posx14760 \posy10134 \phpg \pvpg \absh-788 \absw2860 \dxfrtext200 \li50 \ri344 \sl-217 \tx50 \tqr \tx2515 Current x\_position of sprite Current y\_position of sprite\par 
\fs21 \f3 \pard \s24 \posx14760 \posy10134 \phpg \pvpg \absh-788 \absw2860 \dxfrtext200 \li53 \ri50 \sl-217 \tx53 \tqr \tx2809 Current speed(0\_15)ofsprite\par 
}\pard \sl-217 \tx53 \tqr \tx2809 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx3734 \ql \sl312 \li1122 \ri50 \sbasedon0 \snext2 OmniPage #2817;}
{\s3 \tx65 \tqr \tx7294 \qj \li1107 \ri50 \sl258 \sbasedon0 \snext3 OmniPage #2818;}
{\s4 \tx58 \tx500 \tqr \tx7279 \qj \li1114 \fi442 \ri65 \sl260 \sbasedon0 \snext4 OmniPage #2819;}
{\s5 \tx50 \tx492 \tqr \tx7275 \qj \li1122 \fi442 \ri69 \sl261 \sbasedon0 \snext5 OmniPage #2820;}
{\s6 \tx50 \tqr \tx1526 \ql \sl369 \li1122 \ri50 \sbasedon0 \snext6 OmniPage #2821;}
{\s7 \tx64 \tqr \tx7281 \qj \li1108 \ri61 \sl260 \sbasedon0 \snext7 OmniPage #2822;}
{\s8 \tx50 \tx492 \tqr \tx7292 \qj \li1122 \fi442 \ri50 \sl261 \sbasedon0 \snext8 OmniPage #2823;}
{\s9 \tx54 \tqr \tx7264 \qj \li1118 \ri83 \sl261 \sbasedon0 \snext9 OmniPage #2824;}
{\s10 \tx50 \tqr \tx7279 \qj \li1122 \ri68 \sl258 \sbasedon0 \snext10 OmniPage #2825;}
{\s11 \tx73 \tx510 \tqr \tx7297 \qj \li1099 \fi437 \ri50 \sl260 \sbasedon0 \snext11 OmniPage #2826;}
{\s12 \tx518 \tqr \tx7284 \qj \li654 \ri63 \sl261 \sbasedon0 \snext12 OmniPage #2827;}
{\s13 \tx50 \tqr \tx7246 \ql \li1122 \ri50 \sl221 \sbasedon0 \snext13 OmniPage #2828;}
{\s14 \tx487 \tqr \tx7272 \qj \li1122 \fi437 \ri50 \sl262 \sbasedon0 \snext14 OmniPage #2829;}
{\s15 \tx50 \tqr \tx3554 \ql \sl217 \li1122 \ri50 \sbasedon0 \snext15 OmniPage #2830;}
{\s16 \tx487 \tqr \tx7297 \qj \li1122 \fi437 \ri50 \sl261 \sbasedon0 \snext16 OmniPage #2831;}
}\par {\pard \posx1657 \posy426 \phpg \pvpg \absh-348 \absw3785 \dxfrtext200 \fs30 \f0 \i \pard \s2 \posx1657 \posy426 \phpg \pvpg \absh-348 \absw3785 \dxfrtext200 \li50 \ri50 \sl-312 \tx50 \tqr \tx3734 Special Notes about Sprites\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn970 \margrsxn1421 \pard \sl-312 \tx50 \tqr \tx3734 \fs24 \f0 {\pard \posx1612 \posy808 \phpg \pvpg \absh-5256 \absw7345 \dxfrtext200 \fs10 \f0 \fs25 \f1 \plain \fs25 \f1 \lang1033 \pard \s3 \posx1612 \posy808 \phpg \pvpg \absh-5256 \absw7345 \dxfrtext200 \qj \li65 \ri50 \sl-258 \tx65 \tqr \tx7294 You can make a sprite invisible by making its foreground color that same as your bit\_map background color. The sprite will continue moving if it is in the automatic heading and speed mode but it will not be seen. There are many games where such a technique is useful. However, if collision detection is enabled, the sprite will still cause an interrupt with other sprites or the bit\_mapped screen images. If the routine that processes sprites can be told not to bother with the invisible sprites, then this "clocking" technique will work.\par 
\fs10 \f0 \fs25 \f1 \pard \s4 \posx1612 \posy808 \phpg \pvpg \absh-5256 \absw7345 \dxfrtext200 \qj \li58 \fi442 \ri65 \sl-260 \tx58 \tx500 \tqr \tx7279 Although there are only eight sprites, since you can use strings to hold images that can be transferred into sprites with SPRSAV, you can have many sprite definitions stored in strings and read them into sprites while the program is running A game with eight race cars, for example, can easily be changed into a game with eight rocket ships.\par 
\fs10 \f0 \fs25 \f1 \pard \s5 \posx1612 \posy808 \phpg \pvpg \absh-5256 \absw7345 \dxfrtext200 \qj \li50 \fi442 \ri69 \sl-261 \tx50 \tx492 \tqr \tx7275 The speed value in the MOVSPR statement (0 \_15) is used to control the actual number of dot positions to skip over in an equal time interval before drawing. Therefore, the movement is a series of instantaneous re\-locations. Thus, a sprite moving at a high enough speed or a sprite that has little foreground color in it (recall that it's only the foreground portion of sprites that interact) may miss colliding with a thin line or small shape, or another small sprite, by "jumping" over it.\par 
}\pard \sl-261 \tx50 \tx492 \tqr \tx7275 \fs24 \f0 {\pard \posx1020 \posy6303 \phpg \pvpg \absh-450 \absw1577 \dxfrtext200 \fs10 \f0 \fs32 \f2 \pard \s6 \posx1020 \posy6303 \phpg \pvpg \absh-450 \absw1577 \dxfrtext200 \li50 \ri50 \sl-369 \tx50 \tqr \tx1526 Windows\par 
}\pard \sl-369 \tx50 \tqr \tx1526 \fs24 \f0 {\pard \posx1588 \posy6792 \phpg \pvpg \absh-3446 \absw7343 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s7 \posx1588 \posy6792 \phpg \pvpg \absh-3446 \absw7343 \dxfrtext200 \qj \li64 \ri61 \sl-260 \tx64 \tqr \tx7281 Now that we understand bit\_mapped graphics and sprites, let's take a look at one more modern feature of the Commodore 128; its windows.\par 
\fs10 \f0 \fs25 \f1 \pard \s8 \posx1588 \posy6792 \phpg \pvpg \absh-3446 \absw7343 \dxfrtext200 \qj \li50 \fi442 \ri50 \sl-261 \tx50 \tx492 \tqr \tx7292 Windows are text areas on the screen that can be independently controlled, either from BASIC or from the keyboard with the ~ key. You can change a window's dimensions (its width and height) and you can change its position. Once a window is set up all the text you send to the screen, everything you type (including input to INPUT or GET statements) and listings of your BASIC program appear within the window's bound\-aries and do not affect any other text on the screen. Statements for clearing the screen, moving the cursor, and so on, still work\'97but only in the area defined by the new window. The windows can be moved to any column or row. When its position is altered to a different row and column, the upper left corner of the window becomes the new home position (0,0).\par 
}\pard \sl-261 \tx50 \tx492 \tqr \tx7292 \fs24 \f0 {\pard \posx11300 \posy451 \phpg \pvpg \absh-4046 \absw7348 \dxfrtext200 \fs10 \f0 \fs25 \f3 \b \pard \s9 \posx11300 \posy451 \phpg \pvpg \absh-4046 \absw7348 \dxfrtext200 \qj \li54 \ri83 \sl-261 \tx54 \tqr \tx7264 What Are Windows Good For?\par 
\fs10 \f0 \fs25 \f1 \plain \fs25 \f1 \lang1033 \pard \s10 \posx11300 \posy451 \phpg \pvpg \absh-4046 \absw7348 \dxfrtext200 \qj \li50 \ri68 \sl-258 \tx50 \tqr \tx7279 With windows you can organize the output of your program so that dif\-ferent areas of the screen are dedicated to specific functions. For example, in a Computer Aided Instruction type program, you might have an ex\-planatory part of lessons restricted to one window, questions about the lesson output to a second window and the user input restricted to a third window. The nice part about this is that when you output or input to or from the different windows you do not have to worry about interfering with the other windows: everything is protected that is outside the current active window.\par 
\fs10 \f0 \fs25 \f1 \pard \s11 \posx11300 \posy451 \phpg \pvpg \absh-4046 \absw7348 \dxfrtext200 \qj \li73 \fi437 \ri50 \sl-260 \tx73 \tx510 \tqr \tx7297 If you move the window from the old position, the information in it will not be changed unless you overlap it with a newly\_positioned window. There is no automatic refresh of window contents in BASIC 7.0, so you will have to write your own routines to handle that.\par 
\fs10 \f0 \fs25 \f1 \pard \s12 \posx11300 \posy451 \phpg \pvpg \absh-4046 \absw7348 \dxfrtext200 \qj \li518 \ri63 \sl-261 \tx518 \tqr \tx7284 The syntax for the window statement is:\par 
}\pard \sl-261 \tx518 \tqr \tx7284 \fs24 \f0 {\pard \posx10742 \posy4702 \phpg \pvpg \absh-750 \absw7297 \dxfrtext200 \fs10 \f0 \fs21 \f4 \pard \s13 \posx10742 \posy4702 \phpg \pvpg \absh-750 \absw7297 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx7246 WINDOW top\_left column, top left row, bottom\_right column, bottom\_right row, clear\par 
}\pard \sl-221 \tx50 \tqr \tx7246 \fs24 \f0 {\pard \posx11331 \posy5648 \phpg \pvpg \absh-1362 \absw7323 \dxfrtext200 \fs25 \f1 \fs25 \f1 \pard \s14 \posx11331 \posy5648 \phpg \pvpg \absh-1362 \absw7323 \dxfrtext200 \qj \li50 \fi437 \ri50 \sl-262 \tx50 \tx487 \tqr \tx7272 Here the maximum and minimum values for the column and row depend on whether you are in the 40\_column or 80\_column mode. If the clear option is 1 the window is cleared after being set. For example, to set up a window that is 15 columns wide, 10 lines deep, starts at row 10 and columnlO' and clears the window, we would use the statement:\par 
}\pard \sl-262 \tx50 \tx487 \tqr \tx7272 \fs24 \f0 {\pard \posx10776 \posy7195 \phpg \pvpg \absh-307 \absw3605 \dxfrtext200 \fs10 \f0 \fs21 \f4 \pard \s15 \posx10776 \posy7195 \phpg \pvpg \absh-307 \absw3605 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx3554 100 WINDOW 10, 10, 15, 20, 1\par 
}\pard \sl-217 \tx50 \tqr \tx3554 \fs24 \f0 {\pard \posx11342 \posy7717 \phpg \pvpg \absh-3446 \absw7348 \dxfrtext200 \fs25 \f1 \fs25 \f1 \pard \s16 \posx11342 \posy7717 \phpg \pvpg \absh-3446 \absw7348 \dxfrtext200 \qj \li50 \fi437 \ri50 \sl-261 \tx50 \tx487 \tqr \tx7297 One advantage of using windows is that their contents can be manip\-ulated with the Commodore ~3 key. Commodore provides a powerful screen editor feature via the ~ key that can be exploited by your pro\-gram. If you display any information on the screen in a window, you can allow the user of your program to delete lines, insert, scroll the contents of the window, change its size and position, and so on. This is not a word processing editor, but rather a screen editor; if you scroll up one line the text that moves outside the window is gone. It is also possible to control the screen from inside the program by sending the ~ key sequence in a PRINT statement to the screen. Some of the escape key functions are mnemonic; that is, the letter of the command represents the first letter of the function. For example, to insert a line in a window you type (A I, to delete a line you type ~ d.\par 
}\pard \sl-261 \tx50 \tx487 \tqr \tx7297 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx5326 \ql \sl250 \li1122 \ri50 \sbasedon0 \snext2 OmniPage #3073;}
{\s3 \tqr \tx7297 \qj \li1122 \ri50 \sl258 \sbasedon0 \snext3 OmniPage #3074;}
{\s4 \tx66 \tx507 \tqr \tx7273 \qj \li1106 \fi441 \ri74 \sl258 \sbasedon0 \snext4 OmniPage #3075;}
{\s5 \tx50 \tqr \tx1379 \ql \sl196 \li1122 \ri50 \sbasedon0 \snext5 OmniPage #3076;}
{\s6 \tqr \tx7291 \qj \li1122 \ri50 \sl261 \sbasedon0 \snext6 OmniPage #3077;}
{\s7 \tx54 \tx490 \tqr \tx7273 \qj \li1118 \fi436 \ri68 \sl261 \sbasedon0 \snext7 OmniPage #3078;}
}\par {\pard \posx1482 \posy392 \phpg \pvpg \absh-566 \absw5377 \dxfrtext200 \fs25 \f0 \b \pard \s2 \posx1482 \posy392 \phpg \pvpg \absh-566 \absw5377 \dxfrtext200 \li50 \ri50 \sl-250 \tx50 \tqr \tx5326 Get the Status of Current Window and Display:\par 
\fs25 \f1 \plain \fs25 \f1 \lang1033 \pard \s2 \posx1482 \posy392 \phpg \pvpg \absh-566 \absw5377 \dxfrtext200 \li50 \ri50 \sl-250 \tx50 \tqr \tx5326 RWINDOW\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn841 \margrsxn11286 \pard \sl-250 \tx50 \tqr \tx5326 \fs24 \f0 {\pard \posx1469 \posy1017 \phpg \pvpg \absh-1866 \absw7348 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s3 \posx1469 \posy1017 \phpg \pvpg \absh-1866 \absw7348 \dxfrtext200 \qj \li50 \ri50 \sl-258 \tx50 \tqr \tx7297 Suppose the user with the ~ key functions resizes the window used to display program output information, and you want to send information to this window. Since its size has changed, the program would want to know the new parameters, so it could adjust its output accordingly (you would not want to output text in 40 columns if the window has been set to 20).\par 
\fs10 \f0 \fs25 \f1 \pard \s4 \posx1469 \posy1017 \phpg \pvpg \absh-1866 \absw7348 \dxfrtext200 \qj \li66 \fi441 \ri74 \sl-258 \tx66 \tx507 \tqr \tx7273 We can find out the size of a window with the \fs23 \f2 RWINDOW \fs25 \f1 function, whose syntax is:\par 
}\pard \sl-258 \tx66 \tx507 \tqr \tx7273 \fs24 \f0 {\pard \posx891 \posy3108 \phpg \pvpg \absh-261 \absw1430 \dxfrtext200 \fs10 \f0 \fs17 \f3 \pard \s5 \posx891 \posy3108 \phpg \pvpg \absh-261 \absw1430 \dxfrtext200 \li50 \ri50 \sl-196 \tx50 \tqr \tx1379 RWINDOW (n)\par 
}\pard \sl-196 \tx50 \tqr \tx1379 \fs24 \f0 {\pard \posx1483 \posy3596 \phpg \pvpg \absh-3705 \absw7342 \dxfrtext200 \fs25 \f1 \fs25 \f1 \pard \s6 \posx1483 \posy3596 \phpg \pvpg \absh-3705 \absw7342 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7291 where the parameter "n" represents the parameter you wish to know about. If n is set to 0 the number of lines is returned, while if n is set to 1 the number of rows is returned. If n is set to 2, the \fs23 \f2 RWINDOW \fs25 \f1 command returns either 40 or 80, depending on what current console device is in use. Suppose a window was 20 columns wide and you were printing text that was 40 columns wide. You could write your program so that it always first checked the width of the window with the \fs23 \f2 RWINDOW(1) \fs25 \f1 function. Then it used this number to control the number of words that were output to the window so that they always wrapped on at the end of a word before reaching 20 columns. To do this, the program's display output routines would have to check the length of each line and adjust it to break correctly.\par 
\fs10 \f0 \fs25 \f1 \pard \s7 \posx1483 \posy3596 \phpg \pvpg \absh-3705 \absw7342 \dxfrtext200 \qj \li54 \fi436 \ri68 \sl-261 \tx54 \tx490 \tqr \tx7273 You've come a long way in this chapter! \fs23 \f2 Now \fs25 \f1 that you've been intro\-duced to some of the major aspects of graphics on the Commodore 128, let's move on and look at ways to generate sound effects and music.\par 
}\pard \sl-261 \tx54 \tx490 \tqr \tx7273 \fs24 \f0 }