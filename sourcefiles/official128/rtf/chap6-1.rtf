{\rtf1\ansi \deff0 {\fonttbl {\f0\froman Times New Roman;}
{\f1\froman Times New Roman;}{\f2\froman Times New Roman;}{\f3\froman Times New Roman;}{\f4\froman Times New Roman;}{\f5\fmodern MS LineDraw;}
{\f6\fdecor Symbol;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue127;\red0\green127\blue0;\red0\green127\blue127;\red127\green0\blue0;\red127\green0\blue127;\red127\green127\blue0;\red127\green127\blue127;\red63\green63\blue63;\red0\green0\blue255;\red0\green255\blue0;\red0\green255\blue255;\red255\green0\blue0;\red255\green0\blue255;\red255\green255\blue0;\red255\green255\blue255;}\linex0 \sbknone 
\paperh12240 \paperw20160 \margl1038 \margr1603 \margt259 \margb843 \plain \lang1033 \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tx1115 \tqr \tx4687 \ql \sl695 \li988 \ri50 \sbasedon0 \snext2 OmniPage #1;}
{\s3 \tqr \tx3139 \ql \li988 \ri50 \sl283 \sbasedon0 \snext3 OmniPage #2;}
{\s4 \tx500 \tqr \tx5220 \ql \li538 \fi-450 \ri50 \sl265 \sbasedon0 \snext4 OmniPage #3;}
{\s5 \tqr \tx4956 \ql \li988 \ri50 \sl283 \sbasedon0 \snext5 OmniPage #4;}
{\s6 \tqr \tx6280 \ql \li988 \ri50 \sl283 \sbasedon0 \snext6 OmniPage #5;}
{\s7 \tqr \tx4018 \ql \li988 \ri50 \sl283 \sbasedon0 \snext7 OmniPage #6;}
{\s8 \tqr \tx4615 \ql \li988 \ri50 \sl283 \sbasedon0 \snext8 OmniPage #7;}
{\s9 \tx500 \tqr \tx5477 \ql \li538 \fi-450 \ri50 \sl264 \sbasedon0 \snext9 OmniPage #8;}
{\s10 \tqr \tx7286 \qj \li988 \ri50 \sl261 \sbasedon0 \snext10 OmniPage #9;}
{\s11 \tqr \tx3856 \ql \sl363 \li988 \ri50 \sbasedon0 \snext11 OmniPage #10;}
{\s12 \tqr \tx7284 \qj \li988 \ri50 \sl261 \sbasedon0 \snext12 OmniPage #11;}
{\s13 \tqr \tx7255 \qj \li988 \ri50 \sl260 \sbasedon0 \snext13 OmniPage #12;}
{\s14 \tx87 \tqr \tx4409 \ql \li951 \ri2917 \sl319 \sbasedon0 \snext14 OmniPage #13;}
{\s15 \tx50 \tqr \tx7276 \qj \li988 \ri50 \sl258 \sbasedon0 \snext15 OmniPage #14;}
{\s16 \tx57 \tqr \tx4368 \qc \sl319 \sbasedon0 \snext16 OmniPage #15;}
{\s17 \tqr \tx2362 \ql \sl319 \li988 \ri2056 \sbasedon0 \snext17 OmniPage #16;}
{\s18 \tqr \tx7307 \qj \li988 \ri50 \sl260 \sbasedon0 \snext18 OmniPage #17;}
{\s19 \tx75 \tqr \tx5430 \ql \li963 \ri1890 \sl303 \sbasedon0 \snext19 OmniPage #18;}
{\s20 \tx50 \tqr \tx7270 \qj \li988 \ri50 \sl261 \sbasedon0 \snext20 OmniPage #19;}
}{\pard \posx1088 \posy625 \phpg \pvpg \absh-1384 \absw4738 \dxfrtext200 \fs50 \f0 \pard \s2 \posx1088 \posy625 \phpg \pvpg \absh-1384 \absw4738 \dxfrtext200 \li1115 \ri50 \sl-695 \tx50 \tx1115 \tqr \tx4687 6\par 
\pard \s2 \posx1088 \posy625 \phpg \pvpg \absh-1384 \absw4738 \dxfrtext200 \li50 \ri50 \sl-695 \tx50 \tx1115 \tqr \tx4687 Graphics on the Cl28\par 
}\linex0 \linemod0 \sbknone \lndscpsxn \pard \sl-695 \tx50 \tx1115 \tqr \tx4687 \fs24 \f0 {\pard \posx2115 \posy2662 \phpg \pvpg \absh-360 \absw3190 \dxfrtext200 \fs10 \f0 \fs25 \f1 \b \pard \s3 \posx2115 \posy2662 \phpg \pvpg \absh-360 \absw3190 \dxfrtext200 \li50 \ri50 \sl-283 \tx50 \tqr \tx3139 In this chapter you'll learn:\par 
}\pard \sl-283 \tx50 \tqr \tx3139 \fs24 \f0 {\pard \posx2105 \posy3139 \phpg \pvpg \absh-625 \absw5271 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s4 \posx2105 \posy3139 \phpg \pvpg \absh-625 \absw5271 \dxfrtext200 \li500 \fi-450 \ri50 \sl-265 \tx50 \tx500 \tqr \tx5220 \'b7 What Icinds of graphics are offered with the Commodore 128\par 
}\pard \sl-265 \tx50 \tx500 \tqr \tx5220 \fs24 \f0 {\pard \posx2108 \posy3880 \phpg \pvpg \absh-360 \absw5007 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s5 \posx2108 \posy3880 \phpg \pvpg \absh-360 \absw5007 \dxfrtext200 \li50 \ri50 \sl-283 \tx50 \tqr \tx4956 \'b7 The history of Commodore 128 graphics\par 
}\pard \sl-283 \tx50 \tqr \tx4956 \fs24 \f0 {\pard \posx2107 \posy4366 \phpg \pvpg \absh-360 \absw6331 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s6 \posx2107 \posy4366 \phpg \pvpg \absh-360 \absw6331 \dxfrtext200 \li50 \ri50 \sl-283 \tx50 \tqr \tx6280 \'b7 How to use the new Commodore 128 graphics modes\par 
}\pard \sl-283 \tx50 \tqr \tx6280 \fs24 \f0 {\pard \posx2112 \posy4848 \phpg \pvpg \absh-360 \absw4069 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s7 \posx2112 \posy4848 \phpg \pvpg \absh-360 \absw4069 \dxfrtext200 \li50 \ri50 \sl-283 \tx50 \tqr \tx4018 \'b7 How bit\_mapped graphics work\par 
}\pard \sl-283 \tx50 \tqr \tx4018 \fs24 \f0 {\pard \posx2112 \posy5324 \phpg \pvpg \absh-360 \absw4666 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s8 \posx2112 \posy5324 \phpg \pvpg \absh-360 \absw4666 \dxfrtext200 \li50 \ri50 \sl-283 \tx50 \tqr \tx4615 \'b7 How to malce and manipulate sprites\par 
}\pard \sl-283 \tx50 \tqr \tx4615 \fs24 \f0 {\pard \posx2111 \posy5805 \phpg \pvpg \absh-624 \absw5528 \dxfrtext200 \fs10 \f0 \fs25 \f1 \pard \s9 \posx2111 \posy5805 \phpg \pvpg \absh-624 \absw5528 \dxfrtext200 \li500 \fi-450 \ri50 \sl-264 \tx50 \tx500 \tqr \tx5477 \'b7 What the 80\_column mode offers in the way of graphics\par 
}\pard \sl-264 \tx50 \tx500 \tqr \tx5477 \fs24 \f0 {\pard \posx1674 \posy7204 \phpg \pvpg \absh-2145 \absw7337 \dxfrtext200 \fs10 \f0 \fs25 \f2 \plain \fs25 \f2 \lang1033 \pard \s10 \posx1674 \posy7204 \phpg \pvpg \absh-2145 \absw7337 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7286 In this chapter we will take a look at the exceptional graphics offered by the Commodore 128 personal computer. We will first briefly review the graphics of the C64 mode. However, the bulk of the material in this chapter focuses on the new C128 mode graphics. Since CP/M was designed to work only with text\_based ASCII terminals, it has no commands for manipulating video graphics, and we will not discuss it in this chapter. It is possible however, using a CP/M programming language such as BASIC or C, to create graphics in the CP/M mode via the 8563 video chip.\par 
}\pard \sl-261 \tx50 \tqr \tx7286 \fs24 \f0 {\pard \posx1095 \posy9607 \phpg \pvpg \absh-422 \absw3907 \dxfrtext200 \fs10 \f0 \fs33 \f3 \b \pard \s11 \posx1095 \posy9607 \phpg \pvpg \absh-422 \absw3907 \dxfrtext200 \li50 \ri50 \sl-363 \tx50 \tqr \tx3856 C128 Graphics Overview\par 
}\pard \sl-363 \tx50 \tqr \tx3856 \fs24 \f0 {\pard \posx1668 \posy10078 \phpg \pvpg \absh-1096 \absw7335 \dxfrtext200 \fs10 \f0 \fs25 \f2 \plain \fs25 \f2 \lang1033 \pard \s12 \posx1668 \posy10078 \phpg \pvpg \absh-1096 \absw7335 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7284 This chapter is not meant to provide an exhaustive study of Commodore 128 graphic programming techniques, but rather to give an overview of the features you get with C128 graphics, to provide insights into how the Commodore 128 uses the VIC II and new 8563 chip to send video to the\par 
}\pard \sl-261 \tx50 \tqr \tx7284 \fs24 \f0 {\pard \posx11172 \posy345 \phpg \pvpg \absh-572 \absw7306 \dxfrtext200 \fs10 \f0 \fs25 \f2 \pard \s13 \posx11172 \posy345 \phpg \pvpg \absh-572 \absw7306 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7255 screen, and finally to reveal the graphics operations now available from the BASIC 7.0. language.\par 
}\pard \sl-260 \tx50 \tqr \tx7255 \fs24 \f0 {\pard \posx11169 \posy1210 \phpg \pvpg \absh-1767 \absw7327 \dxfrtext200 \fs10 \f0 \fs30 \f4 \i \pard \s14 \posx11169 \posy1210 \phpg \pvpg \absh-1767 \absw7327 \dxfrtext200 \li87 \ri2917 \sl-319 \tx87 \tqr \tx4409 WhatDo We Mean by Graphics?\par 
\fs10 \f0 \fs25 \f2 \plain \fs25 \f2 \lang1033 \pard \s15 \posx11169 \posy1210 \phpg \pvpg \absh-1767 \absw7327 \dxfrtext200 \qj \li50 \ri50 \sl-258 \tx50 \tqr \tx7276 What do we mean by graphics? In this book graphics means the display of pictures instead of just letters and numbers. A picture can be anything you can represent on the Commodore 128 screen: a rocket, a robot, an artistic pattern, an arrangement of specially designed characters, the out\-line and boxes of a report form, and so on.\par 
}\pard \sl-258 \tx50 \tqr \tx7276 \fs24 \f0 {\pard \posx11171 \posy3279 \phpg \pvpg \absh-670 \absw4419 \dxfrtext200 \fs10 \f0 \fs30 \f4 \i \pard \s16 \posx11171 \posy3279 \phpg \pvpg \absh-670 \absw4419 \dxfrtext200 \qc \sl-319 \tx57 \tqr \tx4368 6566 VIC II and 8563: The Chips\par 
\fs10 \f0 \fs30 \f4 \pard \s17 \posx11171 \posy3279 \phpg \pvpg \absh-670 \absw4419 \dxfrtext200 \li50 \ri2056 \sl-319 \tx50 \tqr \tx2362 Behind the Video\par 
}\pard \sl-319 \tx50 \tqr \tx2362 \fs24 \f0 {\pard \posx11150 \posy4003 \phpg \pvpg \absh-4739 \absw7358 \dxfrtext200 \fs10 \f0 \fs25 \f2 \plain \fs25 \f2 \lang1033 \pard \s18 \posx11150 \posy4003 \phpg \pvpg \absh-4739 \absw7358 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7307 Before we get too far into learning graphics, a major point is in order. What makes Commodore graphics so special when compared to other low\-cost home computers is the way in which graphics are created and con\-trolled inside the computer. Most computers use arrangements of cheap, off\_the\_shelf circuits to control graphics. But the Commodore 64 and 128 share a complex chip called the VIC II, custom\_built by Commodore's MOS Technology semiconductor division. The VIC II chip evolved from the VIC I chip used in the old Commodore VIC 20 and is actually an entire microprocessor and video processor. Officially known as a video interface chip, because it translates computer signals into television or monitor signals, it is the fast and smart VIC II chip that gives the C128 and C64 its edge in graphics performance. In addition to the VIC II, the Commodore 128 also contains the brand new 8563 80\_column video chip. This new device gives the C128 the kind of graphics that business users demand: highly detailed 80\_column color text and graphics. Keep in mind as you read this chapter that everything you are doing from BASIC ultimately boils down to instructions to the powerful VIC II or 8563 80\_column chip and that these chips are ultimately the reason the graphics work so well.\par 
}\pard \sl-260 \tx50 \tqr \tx7307 \fs24 \f0 {\pard \posx11164 \posy9049 \phpg \pvpg \absh-2085 \absw7321 \dxfrtext200 \fs10 \f0 \fs30 \f4 \i \pard \s19 \posx11164 \posy9049 \phpg \pvpg \absh-2085 \absw7321 \dxfrtext200 \li75 \ri1890 \sl-303 \tx75 \tqr \tx5430 What Kind of Graphics Does Commodore 128 Offer?\par 
\fs10 \f0 \fs25 \f2 \plain \fs25 \f2 \lang1033 \pard \s20 \posx11164 \posy9049 \phpg \pvpg \absh-2085 \absw7321 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7270 The C128 mode offers the same graphics modes as the old Commodore 64, plus a few important new ones. There are six different display modes, and sixteen different colors. There is a new 80\_column mode. There are also eight programmable, movable objects called "sprites". Access to these modes, as we will soon see, has been greatly improved.\par 
}\pard \sl-261 \tx50 \tqr \tx7270 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tx485 \tqr \tx7273 \qj \li988 \fi435 \ri50 \sl256 \sbasedon0 \snext2 OmniPage #257;}
{\s3 \tx50 \tqr \tx3662 \ql \sl268 \li988 \ri50 \sbasedon0 \snext3 OmniPage #258;}
{\s4 \tqr \tx7290 \qj \li988 \ri63 \sl264 \sbasedon0 \snext4 OmniPage #259;}
{\s5 \tx86 \tx524 \tqr \tx7303 \qj \li952 \fi438 \ri50 \sl261 \sbasedon0 \snext5 OmniPage #260;}
{\s6 \tx50 \tqr \tx2859 \ql \sl268 \li988 \ri50 \sbasedon0 \snext6 OmniPage #261;}
{\s7 \tqr \tx2585 \ql \sl253 \li988 \ri50 \sbasedon0 \snext7 OmniPage #262;}
{\s8 \tqr \tx7263 \qj \li988 \ri50 \sl264 \sbasedon0 \snext8 OmniPage #263;}
{\s9 \tx2567 \tqr \tx7283 \qj \li988 \fi2517 \ri50 \sl263 \sbasedon0 \snext9 OmniPage #264;}
{\s10 \tx61 \tqr \tx7280 \qj \li977 \ri50 \sl258 \sbasedon0 \snext10 OmniPage #265;}
{\s11 \tx50 \tx483 \tqr \tx7274 \qj \li988 \fi433 \ri56 \sl259 \sbasedon0 \snext11 OmniPage #266;}
{\s12 \tx50 \tqr \tx3773 \ql \sl268 \li988 \ri50 \sbasedon0 \snext12 OmniPage #267;}
{\s13 \tqr \tx7299 \qj \li988 \ri50 \sl260 \sbasedon0 \snext13 OmniPage #268;}
{\s14 \tqr \tx3523 \ql \sl196 \li988 \ri50 \sbasedon0 \snext14 OmniPage #269;}
{\s15 \tqr \tx7278 \qj \li988 \ri50 \sl261 \sbasedon0 \snext15 OmniPage #270;}
}\par {\pard \posx1706 \posy271 \phpg \pvpg \absh-1599 \absw7324 \dxfrtext200 \fs24 \f0 \pard \s2 \posx1706 \posy271 \phpg \pvpg \absh-1599 \absw7324 \dxfrtext200 \qj \li50 \fi435 \ri50 \sl-256 \tx50 \tx485 \tqr \tx7273 Like the Commodore 64, the Commodore 128 has a 40\_column text and character graphics mode that is programmable in up to four colors. It has the same graphics and text character set. The C128 also has a high\-resolution 320 by 200 dot bit\_mapped mode. The new high\_resolution C128 bit\_mapped mode is now much more accessible and easy to use from BASIC. We'll say more on this soon.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1656 \margrsxn1599 \pard \sl-256 \tx50 \tx485 \tqr \tx7273 {\pard \posx1729 \posy2069 \phpg \pvpg \absh-319 \absw3713 \dxfrtext200 \fs10 \f0 \fs25 \f1 \b \pard \s3 \posx1729 \posy2069 \phpg \pvpg \absh-319 \absw3713 \dxfrtext200 \li50 \ri50 \sl-268 \tx50 \tqr \tx3662 New Graphics 80\_Column Mode\par 
}\pard \sl-268 \tx50 \tqr \tx3662 \fs24 \f0 {\pard \posx1715 \posy2426 \phpg \pvpg \absh-5565 \absw7354 \dxfrtext200 \fs10 \f0 \fs24 \f0 \plain \lang1033 \pard \s4 \posx1715 \posy2426 \phpg \pvpg \absh-5565 \absw7354 \dxfrtext200 \qj \li50 \ri63 \sl-264 \tx50 \tqr \tx7290 The Commodore 128 offers one new graphics mode not available on the Commodore 64, namely the new 80\_column mode. As we mentioned in the introduction and in the chapter on CP/M, the 80\_column mode is created by the new 8563 video processor chip. This chip has features that are nearly identical to the color circuitry used in the popular IBM PC color board, namely 640 x 200 resolution, and 16 colors. This chip allows twice the horizontal resolution of the Commodore 64 graphics (640 dots versus 320), four times more color (16 colors versus 4), and twice as many characters (80 versus 40). This chip does require an 80\_column monitor to use and will not work with a regular television set.\par 
\fs10 \f0 \fs24 \f0 \pard \s5 \posx1715 \posy2426 \phpg \pvpg \absh-5565 \absw7354 \dxfrtext200 \qj \li86 \fi438 \ri50 \sl-261 \tx86 \tx524 \tqr \tx7303 This new mode also offers a bit\_mapped character set, meaning that the shapes of the characters that appear on the monitor are stored in memory. This means you can create your own custom characters and even do bit\_mapped graphics on this chip. Since there are no BASIC 7.0 state\-ments to easily control the 8563, you will need to resort to using BASIC's PEEK and POKE statements to directly manipulate the registers of the new 8563 chip. This may make your programs more complex, but high\-quality business graphics are now perfectly feasible from BASIC. With the 80\_column chip and its high resolution, you can expect to see much more intense and detailed graphics programs, especially high\_quality, business programs for the "power user".\par 
}\pard \sl-261 \tx86 \tx524 \tqr \tx7303 {\pard \posx1773 \posy8196 \phpg \pvpg \absh-319 \absw2910 \dxfrtext200 \fs10 \f0 \fs25 \f1 \b \pard \s6 \posx1773 \posy8196 \phpg \pvpg \absh-319 \absw2910 \dxfrtext200 \li50 \ri50 \sl-268 \tx50 \tqr \tx2859 New Additional Memory\par 
}\pard \sl-268 \tx50 \tqr \tx2859 \fs24 \f0 {\pard \posx1782 \posy9132 \phpg \pvpg \absh-288 \absw2636 \dxfrtext200 \fs10 \f0 \fs24 \f0 \plain \lang1033 \pard \s7 \posx1782 \posy9132 \phpg \pvpg \absh-288 \absw2636 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx2585 to the programmer has a\par 
}\pard \sl-253 \tx50 \tqr \tx2585 {\pard \posx1773 \posy8581 \phpg \pvpg \absh-528 \absw7314 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s8 \posx1773 \posy8581 \phpg \pvpg \absh-528 \absw7314 \dxfrtext200 \qj \li50 \ri50 \sl-264 \tx50 \tqr \tx7263 The C128 has twice the memory capacity of the C64. This extra memory is desperately needed. In graphics the amount of memory that is available\par 
}\pard \sl-264 \tx50 \tqr \tx7263 {\pard \posx1771 \posy9109 \phpg \pvpg \absh-2135 \absw7334 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s9 \posx1771 \posy9109 \phpg \pvpg \absh-2135 \absw7334 \dxfrtext200 \qj \li50 \fi2517 \ri50 \sl-263 \tx50 \tx2567 \tqr \tx7283 strong bearing on the degree of complexity and the size of the program that can be written. The problem is that the graphics information that you see on the Commodore 128 screen is ac\-tually represented in the computer's memory as a series of bytes. As we start to draw more complex or more detailed images on the C128 screen, we begin to consume more and more RAkI memory. For example, one popular technique with games is to store several different graphics pic\-tures (scenes) in the computer's memory at one time. You then make the\par 
}\pard \sl-263 \tx50 \tx2567 \tqr \tx7283 {\pard \posx11181 \posy244 \phpg \pvpg \absh-2899 \absw7331 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s10 \posx11181 \posy244 \phpg \pvpg \absh-2899 \absw7331 \dxfrtext200 \qj \li61 \ri50 \sl-258 \tx61 \tqr \tx7280 VIC II rapidly switch between them, thereby creating brilliant animation effects, like those found in arcade games. Since each of these scenes consumes a piece of memory, we eventually reach a limit on how many can be stored.\par 
\fs10 \f0 \fs24 \f0 \pard \s11 \posx11181 \posy244 \phpg \pvpg \absh-2899 \absw7331 \dxfrtext200 \qj \li50 \fi433 \ri56 \sl-259 \tx50 \tx483 \tqr \tx7274 The extra 64K of memory in the Commodore 128 means that programs can have more complex and memory\_hungry graphics programs. There can be many more graphics scenes stored in memory, as well as more depth and realism to the graphics. This means you can expect to see far richer games than ever before, with many more variations. This same idea applies to the user of custom character sets and sprites, which we will explain soon.\par 
}\pard \sl-259 \tx50 \tx483 \tqr \tx7274 {\pard \posx11189 \posy3343 \phpg \pvpg \absh-319 \absw3824 \dxfrtext200 \fs10 \f0 \fs25 \f1 \b \pard \s12 \posx11189 \posy3343 \phpg \pvpg \absh-319 \absw3824 \dxfrtext200 \li50 \ri50 \sl-268 \tx50 \tqr \tx3773 New Graphics BASIC Statements\par 
}\pard \sl-268 \tx50 \tqr \tx3773 \fs24 \f0 {\pard \posx11158 \posy3723 \phpg \pvpg \absh-4223 \absw7350 \dxfrtext200 \fs10 \f0 \fs24 \f0 \plain \lang1033 \pard \s13 \posx11158 \posy3723 \phpg \pvpg \absh-4223 \absw7350 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7299 A major change in the graphics potential of the new C128 mode has to do with the way the graphics are now accessed and manipulated by the BASIC programmer. In the Commodore 64 the BASIC programmer was forced to use the commands POKE and PEEK to manipulate graphics. (Very briefly, the POKE command is used to change the contents of memory locations and the PEEK command is used to read the contents of memory locations.) Plotting a dot on the screen using these commands is quite a bizarre process. First you would have to figure out where in memory the bit corresponding to the dot you want to change is located (as we shall see, dots and bits are related). Then you must use a complex combination of POKE and PEEK statements to change this single bit without changing the neighboring bits around it. Another use of the POKE was to change the way the VIC II handled memory. Certain addresses in the VIC II would allow you to change where the chip looked for screen memory and how it interpreted this memory. One would frequently see statements in C64 programs like this; one that simply changes the mode to multicolor:\par 
}\pard \sl-260 \tx50 \tqr \tx7299 {\pard \posx10604 \posy8146 \phpg \pvpg \absh-261 \absw3574 \dxfrtext200 \fs10 \f0 \fs20 \f2 \pard \s14 \posx10604 \posy8146 \phpg \pvpg \absh-261 \absw3574 \dxfrtext200 \li50 \ri50 \sl-196 \tx50 \tqr \tx3523 POKE 53270, PEEK (53270) OR 16\par 
}\pard \sl-196 \tx50 \tqr \tx3523 \fs24 \f0 {\pard \posx11142 \posy8651 \phpg \pvpg \absh-2404 \absw7329 \dxfrtext200 \fs24 \f0 \fs24 \f0 \pard \s15 \posx11142 \posy8651 \phpg \pvpg \absh-2404 \absw7329 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7278 Thus, without a clear understanding of the VIC II chip, and the knowledge that address 53270 was the mode register of the chip, no one but experts could really do wondrous things with graphics. Most programmers were left in the dark. Although we could give a long story about why Commodore chose to do things this way, we'll shorten it by simply saying that the reason was an early mandate to keep the cost of the Commodore 64 as low as possible. Adding any more statements to the Commodore 64 BASIC to make graphics easier would have consumed more memory and required higher costs.\par 
}\pard \sl-261 \tx50 \tqr \tx7278 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tx485 \tqr \tx7276 \qj \li988 \fi435 \ri50 \sl257 \sbasedon0 \snext2 OmniPage #513;}
{\s3 \tx50 \tqr \tx5045 \ql \li988 \ri50 \sl304 \sbasedon0 \snext3 OmniPage #514;}
{\s4 \tqr \tx7275 \qj \li988 \ri78 \sl261 \sbasedon0 \snext4 OmniPage #515;}
{\s5 \tx60 \tx495 \tqr \tx7303 \qj \li978 \fi435 \ri50 \sl261 \sbasedon0 \snext5 OmniPage #516;}
{\s6 \tx61 \tx496 \tqr \tx7293 \qj \li977 \fi435 \ri60 \sl263 \sbasedon0 \snext6 OmniPage #517;}
{\s7 \tx67 \tqr \tx3867 \ql \sl312 \li971 \ri3443 \sbasedon0 \snext7 OmniPage #518;}
{\s8 \tx50 \tqr \tx7260 \qj \li988 \ri50 \sl265 \sbasedon0 \snext8 OmniPage #519;}
{\s9 \tx79 \tqr \tx5937 \ql \sl276 \li959 \ri1407 \sbasedon0 \snext9 OmniPage #520;}
{\s10 \tx50 \tqr \tx7294 \qj \li988 \ri50 \sl260 \sbasedon0 \snext10 OmniPage #521;}
{\s11 \tqr \tx7266 \qj \li988 \ri50 \sl257 \sbasedon0 \snext11 OmniPage #522;}
{\s12 \tqr \tx2823 \ql \sl276 \li988 \ri50 \sbasedon0 \snext12 OmniPage #523;}
{\s13 \tqr \tx7299 \qj \li988 \ri50 \sl259 \sbasedon0 \snext13 OmniPage #524;}
{\s14 \tx83 \tqr \tx5824 \ql \sl312 \li955 \ri1521 \sbasedon0 \snext14 OmniPage #525;}
{\s15 \tx50 \tqr \tx7295 \qj \li988 \ri50 \sl261 \sbasedon0 \snext15 OmniPage #526;}
{\s16 \tqr \tx3359 \ql \sl312 \li988 \ri50 \sbasedon0 \snext16 OmniPage #527;}
{\s17 \tqr \tx7277 \qj \li988 \ri50 \sl264 \sbasedon0 \snext17 OmniPage #528;}
}\par {\pard \posx1681 \posy366 \phpg \pvpg \absh-2629 \absw7327 \dxfrtext200 \fs25 \f0 \pard \s2 \posx1681 \posy366 \phpg \pvpg \absh-2629 \absw7327 \dxfrtext200 \qj \li50 \fi435 \ri50 \sl-257 \tx50 \tx485 \tqr \tx7276 The Commodore 128 changed all that. We now have 128K of RAM and a large group of BASIC statements for manipulating the Commodore graphics. In the rest of this chapter we will describe these statements and show how they drastically increase the efficiency of your programs. You can still use the POKE and PEEK statements, and there are times when they will still make sense. But generally these new BASIC graphics state\-ments greatly simplify the job of the graphics programmer: these state\-ments, coupled with the other powerful new BASIC 7.0 statements, will create a new generation of exciting games and educational and business programs that use graphics.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1631 \margrsxn1491 \pard \sl-257 \tx50 \tx485 \tqr \tx7276 \fs24 \f0 {\pard \posx1723 \posy3299 \phpg \pvpg \absh-652 \absw5096 \dxfrtext200 \fs10 \f0 \fs30 \f1 \i \pard \s3 \posx1723 \posy3299 \phpg \pvpg \absh-652 \absw5096 \dxfrtext200 \li50 \ri50 \sl-304 \tx50 \tqr \tx5045 Where Did the New BA SIC Statements Come From?\par 
}\pard \sl-304 \tx50 \tqr \tx5045 \fs24 \f0 {\pard \posx1699 \posy3979 \phpg \pvpg \absh-5019 \absw7354 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s4 \posx1699 \posy3979 \phpg \pvpg \absh-5019 \absw7354 \dxfrtext200 \qj \li50 \ri78 \sl-261 \tx50 \tqr \tx7275 Most technological improvements evolve from earlier designs, and the statements that make up the new C128 mode are no exception. In 1983 Commodore brought out a cartridge called the Super Expander 64. When plugged into the cartridge slot on the Commodore 64, the Super Expander 64 adds a set of new graphics, sound, function key, and game port state\-ments to the built\_in C64 BASIC language. Although these statements greatly improved BASIC, the Super Expander did not sell in very large quantities.\par 
\fs10 \f0 \fs25 \f0 \pard \s5 \posx1699 \posy3979 \phpg \pvpg \absh-5019 \absw7354 \dxfrtext200 \qj \li60 \fi435 \ri50 \sl-261 \tx60 \tx495 \tqr \tx7303 What Commodore has done in the new C128 mode is take the en\-hanced statements from the Super Expander 64 and place them in the ROM of the BASIC 7.0 language, thereby forcing them to be a standard. Anyone who buys a C128 gets the extended graphic statements. We can now expect to see dramatic use of these statements by the progamming community, and by magazines creating new sections that explore the C128 mode.\par 
\fs10 \f0 \fs25 \f0 \pard \s6 \posx1699 \posy3979 \phpg \pvpg \absh-5019 \absw7354 \dxfrtext200 \qj \li61 \fi435 \ri60 \sl-263 \tx61 \tx496 \tqr \tx7293 Now that you have a little history of the graphics for the Commodore 128, let's get a better look at just what modes are available and what they offer. The remainder of this chapter is divided into three sections: char\-acter (block) graphics, bit\_mapped graphics, and sprite graphics.\par 
}\pard \sl-263 \tx61 \tx496 \tqr \tx7293 \fs24 \f0 {\pard \posx1737 \posy9301 \phpg \pvpg \absh-948 \absw7311 \dxfrtext200 \fs10 \f0 \fs30 \f1 \i \pard \s7 \posx1737 \posy9301 \phpg \pvpg \absh-948 \absw7311 \dxfrtext200 \li67 \ri3443 \sl-312 \tx67 \tqr \tx3867 Overview of the C\_128 Modes\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s8 \posx1737 \posy9301 \phpg \pvpg \absh-948 \absw7311 \dxfrtext200 \qj \li50 \ri50 \sl-265 \tx50 \tqr \tx7260 There are six different graphics modes on the Commodore 128. Here we will give a brief overview of these modes.\par 
}\pard \sl-265 \tx50 \tqr \tx7260 \fs24 \f0 {\pard \posx1722 \posy10412 \phpg \pvpg \absh-939 \absw7345 \dxfrtext200 \fs10 \f0 \fs25 \f2 \b \pard \s9 \posx1722 \posy10412 \phpg \pvpg \absh-939 \absw7345 \dxfrtext200 \li79 \ri1407 \sl-276 \tx79 \tqr \tx5937 Standard 40\_Column Text and Block Graphics Mode\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s10 \posx1722 \posy10412 \phpg \pvpg \absh-939 \absw7345 \dxfrtext200 \qj \li50 \ri50 \sl-260 \tx50 \tqr \tx7294 This mode is identical to the standard C64 graphics mode. It allows up to 1000 text or graphics characters to be displayed in a format of 25 lines of\par 
}\pard \sl-260 \tx50 \tqr \tx7294 \fs24 \f0 {\pard \posx11291 \posy330 \phpg \pvpg \absh-1083 \absw7317 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s11 \posx11291 \posy330 \phpg \pvpg \absh-1083 \absw7317 \dxfrtext200 \qj \li50 \ri50 \sl-257 \tx50 \tqr \tx7266 40 characters each. Each character in this mode consists of an 8 by 8 dot region and may be in any one of the 16 available colors. This is one of the most popular modes for doing graphics because the 8 by 8 dot regions can be easily controlled. We'll have a lot to say about this mode soon.\par 
}\pard \sl-257 \tx50 \tqr \tx7266 \fs24 \f0 {\pard \posx11292 \posy1599 \phpg \pvpg \absh-337 \absw2874 \dxfrtext200 \fs10 \f0 \fs25 \f2 \b \pard \s12 \posx11292 \posy1599 \phpg \pvpg \absh-337 \absw2874 \dxfrtext200 \li50 \ri50 \sl-276 \tx50 \tqr \tx2823 Standard Bit Map Mode\par 
}\pard \sl-276 \tx50 \tqr \tx2823 \fs24 \f0 {\pard \posx11270 \posy1991 \phpg \pvpg \absh-3170 \absw7350 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s13 \posx11270 \posy1991 \phpg \pvpg \absh-3170 \absw7350 \dxfrtext200 \qj \li50 \ri50 \sl-259 \tx50 \tqr \tx7299 The standard bit map mode is also referred to as the high\_resolution mode. Its purpose is to allow the highest degree of precision and detail. In this mode, the screen is treated as a rectangular array of 320 horizontal dots by 200 vertical dots. In the 40\_column text mode we cannot directly access these individual dots, but in the bit\_mapped mode we can. As far as color is concerned, your choice is any two colors out of the available 16. One color is called foreground; the other, background. In the past, accessing the bit\_mapped mode from the C64 involved the complex usage of PEEKs and POKEs. The bit\_mapped mode is now easily accessed in a logical manner with BASIC 7.0 statements. In fact, as we shall see, the bulk of the new BASIC 7.0 graphics statements are specifically used to manipulate the bit\_mapped mode.\par 
}\pard \sl-259 \tx50 \tqr \tx7299 \fs24 \f0 {\pard \posx11262 \posy5489 \phpg \pvpg \absh-4369 \absw7346 \dxfrtext200 \fs10 \f0 \fs30 \f1 \i \pard \s14 \posx11262 \posy5489 \phpg \pvpg \absh-4369 \absw7346 \dxfrtext200 \li83 \ri1521 \sl-312 \tx83 \tqr \tx5824 Standard Bit\_Mapped Mode\'97Split Screen\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s15 \posx11262 \posy5489 \phpg \pvpg \absh-4369 \absw7346 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7295 The split screen mode mixes both the standard bit\_mapped mode and the standard 40\_column text modes. When you request this mode from BASIC the top 75 percent of the screen is in the standard bit\_mapped graphics mode, and the lower 25 percent is in the standard 40\_column text mode. Thus you get five lines of text that start on line 19 and extend down to line 24. This leaves the vertical size of the bit\_mapped mode at 160 pixels (200 minus 5 lines by 8 dots per line). You can even alter the line that the text mode starts on by specifying the s parameter to be any line from 0 to 24. The split screen mode is useful when you want to print information about events in high resolution. A frequent use of this technique is in games where, for example, the top of the high\_resolution screen gives a view into space from a space cruiser, and the bottom of the screen gives text messages from the mother ship. You could also exploit this split screen for business graphics, perhaps to share the screen between a chart in the top half and a word processor document in the bottom half\par 
}\pard \sl-261 \tx50 \tqr \tx7295 \fs24 \f0 {\pard \posx11273 \posy10190 \phpg \pvpg \absh-348 \absw3410 \dxfrtext200 \fs10 \f0 \fs30 \f1 \i \pard \s16 \posx11273 \posy10190 \phpg \pvpg \absh-348 \absw3410 \dxfrtext200 \li50 \ri50 \sl-312 \tx50 \tqr \tx3359 Multicolor Bit Map Mode\par 
}\pard \sl-312 \tx50 \tqr \tx3359 \fs24 \f0 {\pard \posx11258 \posy10591 \phpg \pvpg \absh-576 \absw7328 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s17 \posx11258 \posy10591 \phpg \pvpg \absh-576 \absw7328 \dxfrtext200 \qj \li50 \ri50 \sl-264 \tx50 \tqr \tx7277 In the multicolor mode horizontal resolution is sacrificed for increased color capability. The screen horizontal resolution is cut in half to 160 dots\par 
}\pard \sl-264 \tx50 \tqr \tx7277 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx7300 \qj \li988 \ri50 \sl257 \sbasedon0 \snext2 OmniPage #769;}
{\s3 \tqr \tx2984 \ql \sl312 \li988 \ri50 \sbasedon0 \snext3 OmniPage #770;}
{\s4 \tqr \tx7295 \qj \li988 \ri50 \sl261 \sbasedon0 \snext4 OmniPage #771;}
{\s5 \tqr \tx5015 \ql \sl363 \li988 \ri2931 \sbasedon0 \snext5 OmniPage #772;}
{\s6 \tx634 \tqr \tx7867 \qj \li404 \ri79 \sl261 \sbasedon0 \snext6 OmniPage #773;}
{\s7 \tx643 \tx1085 \tqr \tx7896 \qj \li395 \fi442 \ri50 \sl260 \sbasedon0 \snext7 OmniPage #774;}
{\s8 \tx659 \tx1101 \tqr \tx7875 \qj \li379 \fi442 \ri71 \sl261 \sbasedon0 \snext8 OmniPage #775;}
{\s9 \tx50 \tqr \tx7285 \qj \li988 \ri50 \sl257 \sbasedon0 \snext9 OmniPage #776;}
{\s10 \tx54 \tx492 \tqr \tx7252 \qj \li984 \fi438 \ri83 \sl261 \sbasedon0 \snext10 OmniPage #777;}
{\s11 \tx50 \tqr \tx1638 \ql \sl222 \li988 \ri50 \sbasedon0 \snext11 OmniPage #778;}
{\s12 \tx100 \tx2375 \tqr \tx2756 \ql \sl189 \li988 \ri50 \sbasedon0 \snext12 OmniPage #779;}
{\s13 \tqr \tx2460 \ql \sl189 \li988 \ri346 \sbasedon0 \snext13 OmniPage #780;}
{\s14 \tqr \tx307 \ql \sl96 \li988 \ri50 \sbasedon0 \snext14 OmniPage #781;}
{\s15 \tqr \tx666 \ql \sl132 \li988 \ri50 \sbasedon0 \snext15 OmniPage #782;}
{\s16 \tx78 \tx516 \tqr \tx7291 \qj \li960 \fi438 \ri58 \sl262 \sbasedon0 \snext16 OmniPage #783;}
{\s17 \tx75 \tx513 \tqr \tx7299 \qj \li963 \fi438 \ri50 \sl260 \sbasedon0 \snext17 OmniPage #784;}
{\s18 \tx62 \tx500 \tqr \tx7297 \qj \li976 \fi438 \ri52 \sl260 \sbasedon0 \snext18 OmniPage #785;}
{\s19 \tx50 \tx488 \tqr \tx7288 \qj \li988 \fi438 \ri61 \sl258 \sbasedon0 \snext19 OmniPage #786;}
}\par {\pard \posx1535 \posy260 \phpg \pvpg \absh-2115 \absw7351 \dxfrtext200 \fs24 \f0 \pard \s2 \posx1535 \posy260 \phpg \pvpg \absh-2115 \absw7351 \dxfrtext200 \qj \li50 \ri50 \sl-257 \tx50 \tqr \tx7300 and the vertical resolution stays the same at 200 dots. Each dot is twice as wide as each standard bit\_mapped dot, so instead of a tiny dot you get more of an extended rectangle. However, you can now display up to four different colors in each 8 by 8 dot region. The four colors are the back\-ground, foreground, and two new colors called multicolors and multicolors. The Multicolor Bit Map Mode is also available in the split screen mode. The multicolor mode is not used very much in Commodore software because the large size of the pixels makes the pictures look crude.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn941 \margrsxn1540 \pard \sl-257 \tx50 \tqr \tx7300 {\pard \posx1564 \posy2702 \phpg \pvpg \absh-348 \absw3035 \dxfrtext200 \fs10 \f0 \fs30 \f1 \i \pard \s3 \posx1564 \posy2702 \phpg \pvpg \absh-348 \absw3035 \dxfrtext200 \li50 \ri50 \sl-312 \tx50 \tqr \tx2984 80\_Column Text Mode\par 
}\pard \sl-312 \tx50 \tqr \tx2984 \fs24 \f0 {\pard \posx1550 \posy3099 \phpg \pvpg \absh-3453 \absw7346 \dxfrtext200 \fs10 \f0 \fs24 \f0 \plain \lang1033 \pard \s4 \posx1550 \posy3099 \phpg \pvpg \absh-3453 \absw7346 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7295 In 80\_Column mode we are using the 8563 chip and are allowed 80 characters per line and 25 lines, for a total of 2000 characters. In the text mode each character can be any of 16 colors. The 8563 is actually a bit\-mapped chip with a bit\_mapped custom character set. However, Com\-modore has provided no direct way (for example, via BASIC statements) to access the bit map. We will no doubt see books that describe a way to access this graphics mode via POKEs and PEEKs, and eventually there should appear an extension to BASIC that will allow direct access. This is desirable because the 8563's graphics resolution is 640 by 200 dots, which is twice that of the VIC II. In fact, this chip has identical graphics and color resolutions to that found on the IBM PC, so once BASIC is extended in this way, transferring applications from the IBM PC to the C128 should be easy.\par 
}\pard \sl-261 \tx50 \tqr \tx7295 {\pard \posx991 \posy6816 \phpg \pvpg \absh-4428 \absw7947 \dxfrtext200 \fs10 \f0 \fs34 \f2 \pard \s5 \posx991 \posy6816 \phpg \pvpg \absh-4428 \absw7947 \dxfrtext200 \li50 \ri2931 \sl-363 \tx50 \tqr \tx5015 Character (Block) Graphics Mode\par 
\fs10 \f0 \fs24 \f0 \pard \s6 \posx991 \posy6816 \phpg \pvpg \absh-4428 \absw7947 \dxfrtext200 \qj \li634 \ri79 \sl-261 \tx634 \tqr \tx7867 Before we teach you the new BASIC 7.0 graphics statements that operate on the bit\_mapped screen, it will be useful to understand how the 40\-column text mode is exploited for block graphics. There is much power in this mode and no discussion would be complete without it. Since there is a split screen mode, a mixture of bit\_mapped and block graphics is feasible and practical.\par 
\fs10 \f0 \fs24 \f0 \pard \s7 \posx991 \posy6816 \phpg \pvpg \absh-4428 \absw7947 \dxfrtext200 \qj \li643 \fi442 \ri50 \sl-260 \tx643 \tx1085 \tqr \tx7896 Character, or block, graphics are accomplished by using the C128 in the 40\_column text mode. This mode is what the Commodore 128 starts in when first turned on, and can be accessed at any time with the statement GRAPHIC 0. Although the 40\_column text mode appears to be the least attractive for doing graphics, it is in fact perhaps the most popular mode in terms of the developed and high\_performance software that exists today. This is the mode in which most Commodore 64 software is written.\par 
\fs10 \f0 \fs24 \f0 \pard \s8 \posx991 \posy6816 \phpg \pvpg \absh-4428 \absw7947 \dxfrtext200 \qj \li659 \fi442 \ri71 \sl-261 \tx659 \tx1101 \tqr \tx7875 In this 40\_column mode several techniques can be used for creating graphics. All these techniques make use of character graphics: the use of\par 
}\pard \sl-261 \tx659 \tx1101 \tqr \tx7875 {\pard \posx11235 \posy267 \phpg \pvpg \absh-3149 \absw7336 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s9 \posx11235 \posy267 \phpg \pvpg \absh-3149 \absw7336 \dxfrtext200 \qj \li50 \ri50 \sl-257 \tx50 \tqr \tx7285 special 8 dot by 8 dot pictures to form larger pictures. When using BASIC the simplest way to do graphics in this mode is to place combinations of keyboard graphic characters inside of PRINT statements. Like the C64, the C128 has a full complement of graphics characters that are shown on each key. In fact there are four possible graphics character sets you can use. When you press either the I\fs24 \f3 \ul shiftl \fs24 \f0 \plain \lang1033 or ~3 keys and the respective graphics key, the respective graphics character will appear on the screen. You can design a shape or object made up of graphics keys. You use the keyboard and the cursor keys to design the shape on\_screen. The shape is then captured in BASIC PRINT statements.\par 
\fs10 \f0 \fs24 \f0 \pard \s10 \posx11235 \posy267 \phpg \pvpg \absh-3149 \absw7336 \dxfrtext200 \qj \li54 \fi438 \ri83 \sl-261 \tx54 \tx492 \tqr \tx7252 For example, to make up an automobile image you could use type in BASIC statements like these:\par 
}\pard \sl-261 \tx54 \tx492 \tqr \tx7252 {\pard \posx10681 \posy3616 \phpg \pvpg \absh-472 \absw1689 \dxfrtext200 \fs10 \f0 \fs19 \f4 \pard \s11 \posx10681 \posy3616 \phpg \pvpg \absh-472 \absw1689 \dxfrtext200 \li50 \ri50 \sl-222 \tx50 \tqr \tx1638 100 PRINT "\par 
\pard \s11 \posx10681 \posy3616 \phpg \pvpg \absh-472 \absw1689 \dxfrtext200 \li50 \ri50 \sl-222 \tx50 \tqr \tx1638 110 PRINT "|\par 
}\pard \sl-222 \tx50 \tqr \tx1638 \fs24 \f0 {\pard \posx10677 \posy4107 \phpg \pvpg \absh-453 \absw2807 \dxfrtext200 \fs19 \f4 \pard \s12 \posx10677 \posy4107 \phpg \pvpg \absh-453 \absw2807 \dxfrtext200 \li50 \ri50 \sl-189 \tx50 \tx100 \tx2375 \tqr \tx2756 \tab 120 PRINT "|\tab It'\par 
\fs19 \f4 \pard \s13 \posx10677 \posy4107 \phpg \pvpg \absh-453 \absw2807 \dxfrtext200 \li50 \ri346 \sl-189 \tx50 \tqr \tx2460 130 PRINT " O 0~'\par 
}\pard \sl-189 \tx50 \tqr \tx2460 \fs24 \f0 {\pard \posx12500 \posy3544 \phpg \pvpg \absh-285 \absw358 \dxfrtext200 \fs19 \f4 \pard \s14 \posx12500 \posy3544 \phpg \pvpg \absh-285 \absw358 \dxfrtext200 \li50 \ri50 \sl-96 \tx50 \tqr \tx307 "\par 
}\pard \sl-96 \tx50 \tqr \tx307 \fs24 \f0 {\pard \posx12606 \posy3842 \phpg \pvpg \absh-265 \absw717 \dxfrtext200 \fs19 \f4 \pard \s15 \posx12606 \posy3842 \phpg \pvpg \absh-265 \absw717 \dxfrtext200 \li50 \ri50 \sl-132 \tx50 \tqr \tx666 \\ "\par 
}\pard \sl-132 \tx50 \tqr \tx666 \fs24 \f0 {\pard \posx11191 \posy4775 \phpg \pvpg \absh-6307 \absw7350 \dxfrtext200 \fs24 \f0 \fs24 \f0 \pard \s16 \posx11191 \posy4775 \phpg \pvpg \absh-6307 \absw7350 \dxfrtext200 \qj \li78 \fi438 \ri58 \sl-262 \tx78 \tx516 \tqr \tx7291 When you run the program, an automobile\_like image will appear on the screen. You can write a program that will redraw the automobile in different locations so that it appears to "run" across the screen.\par 
\fs10 \f0 \fs24 \f0 \pard \s17 \posx11191 \posy4775 \phpg \pvpg \absh-6307 \absw7350 \dxfrtext200 \qj \li75 \fi438 \ri50 \sl-260 \tx75 \tx513 \tqr \tx7299 With 128 different Commodore graphics characters to choose from, this mode is very powerful. Colors can also be set by using the Commodore color keys along with the graphics keys. You type the keys for the color you want, then the next graphics character typed into the PRINT statement appears in that color. Let's take a closer look at this mode.\par 
\fs10 \f0 \fs24 \f0 \pard \s18 \posx11191 \posy4775 \phpg \pvpg \absh-6307 \absw7350 \dxfrtext200 \qj \li62 \fi438 \ri52 \sl-260 \tx62 \tx500 \tqr \tx7297 In the Commodore 128 an area of memory is set aside to hold the characters and the colors displayed in this mode. The characters that you see on the screen are stored in an area of memory in a unique way, as shown in Figure 6\_1. Each possible character that you see on the screen is an 8 by 8 dot matrix and is represented by a unique "code" number stored in the memory. This can be a number between 0 and 255. The letter M, for example, is represented by the code 13; the graphic ball character by the code 81. The VIC II chip contains circuits that repeatedly go into the special screen area of memory one location at a time, read the code found there, convert it to a particular 8 by 8 letter or graphic character, and then display it at the right location on the screen.\par 
\fs10 \f0 \fs24 \f0 \pard \s19 \posx11191 \posy4775 \phpg \pvpg \absh-6307 \absw7350 \dxfrtext200 \qj \li50 \fi438 \ri61 \sl-258 \tx50 \tx488 \tqr \tx7288 How does each character get its color? In Figure 6\_2 we see that there are actually two important areas of memory for graphics. One is the screen memory holding the character codes. The other is the color memory, which is used to hold the color for each screen location. Color memory is also 1000 characters long, but instead of codes it contains color numbers\par 
}\pard \sl-258 \tx50 \tx488 \tqr \tx7288 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx7297 \qj \li988 \ri50 \sl257 \sbasedon0 \snext2 OmniPage #1025;}
{\s3 \tx60 \tx498 \tqr \tx7288 \qj \li978 \fi438 \ri59 \sl253 \sbasedon0 \snext3 OmniPage #1026;}
{\s4 \tx50 \tqr \tx6597 \qc \sl268 \sbasedon0 \snext4 OmniPage #1027;}
{\s5 \tx50 \tx488 \tqr \tx7283 \qj \li988 \fi438 \ri50 \sl257 \sbasedon0 \snext5 OmniPage #1028;}
{\s6 \tx50 \tqr \tx5167 \qc \sl253 \sbasedon0 \snext6 OmniPage #1029;}
}\par {\pard \posx1558 \posy220 \phpg \pvpg \absh-3140 \absw7348 \dxfrtext200 \fs24 \f0 \pard \s2 \posx1558 \posy220 \phpg \pvpg \absh-3140 \absw7348 \dxfrtext200 \qj \li50 \ri50 \sl-257 \tx50 \tqr \tx7297 between 0 and 15 (only the lower 4 bits of each location is used). Each location in color memory maps to a location in the screen memory. Thus when you change a color code in the color memory you are actually changing the color of a certain character on the screen. Also shown in this figure are the locations that are used to control the border, background and foreground colors if you are going to POKE them. Since the color and text memory locations are organized in the same format, you can imagine that the two memory areas are like "planes" that overlap each other. This is shown in Figure 6\_2 as well.\par 
\fs10 \f0 \fs24 \f0 \pard \s3 \posx1558 \posy220 \phpg \pvpg \absh-3140 \absw7348 \dxfrtext200 \qj \li60 \fi438 \ri59 \sl-253 \tx60 \tx498 \tqr \tx7288 Note that although there are only 1000 characters on a 40 by 25 screen, there are 1,024 locations set aside for the text screen. The extra 24 char\-acters are used for holding special Commodore system data.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1508 \margrsxn1527 \pard \sl-253 \tx60 \tx498 \tqr \tx7288 {\pard \posx1965 \posy3971 \phpg \pvpg \absh-583 \absw6648 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s4 \posx1965 \posy3971 \phpg \pvpg \absh-583 \absw6648 \dxfrtext200 \qc \sl-268 \tx50 \tqr \tx6597 Figure 6\_1. \fs24 \f1 \b Screen Codes in Memory Are Mapped to the Screen\par 
\pard \s4 \posx1965 \posy3971 \phpg \pvpg \absh-583 \absw6648 \dxfrtext200 \qc \sl-268 \tx50 \tqr \tx6597 Display\par 
}\pard \sl-268 \tx50 \tqr \tx6597 \fs24 \f0 {\pard \posx11250 \posy216 \phpg \pvpg \absh-1345 \absw7334 \dxfrtext200 \fs10 \f0 \fs24 \f0 \plain \lang1033 \pard \s5 \posx11250 \posy216 \phpg \pvpg \absh-1345 \absw7334 \dxfrtext200 \qj \li50 \fi438 \ri50 \sl-257 \tx50 \tx488 \tqr \tx7283 There is a third area of memory that is critical to maximizing use of the 40 column text mode. That area is the one that holds the character set for the screen. After the VIC II chip picks up a character code from screen memory, it uses it to "look up" a particular dot pattern stored in the character font area. There dot patterns tell the VIC II chip what kind of 8\par 
}\pard \sl-257 \tx50 \tx488 \tqr \tx7283 {\pard \posx12355 \posy2157 \phpg \pvpg \absh-315 \absw5218 \dxfrtext200 \fs10 \f0 \fs24 \f1 \b \pard \s6 \posx12355 \posy2157 \phpg \pvpg \absh-315 \absw5218 \dxfrtext200 \qc \sl-253 \tx50 \tqr \tx5167 Figure 6\_2. Screen Text and Color Memory Areas\par 
}\pard \qc \sl-253 \tx50 \tqr \tx5167 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx7255 \qj \li988 \ri103 \sl250 \sbasedon0 \snext2 OmniPage #1281;}
{\s3 \tx58 \tx500 \tqr \tx7283 \qj \li980 \fi442 \ri75 \sl259 \sbasedon0 \snext3 OmniPage #1282;}
{\s4 \tx61 \tx503 \tqr \tx7274 \qj \li977 \fi442 \ri84 \sl260 \sbasedon0 \snext4 OmniPage #1283;}
{\s5 \tx61 \tx503 \tqr \tx7308 \qj \li977 \fi442 \ri50 \sl261 \sbasedon0 \snext5 OmniPage #1284;}
{\s6 \tx50 \tqr \tx3847 \ql \sl232 \li988 \ri50 \sbasedon0 \snext6 OmniPage #1285;}
{\s7 \tx54 \tx492 \tqr \tx7282 \qj \li984 \fi438 \ri60 \sl258 \sbasedon0 \snext7 OmniPage #1286;}
{\s8 \tx50 \tx488 \tqr \tx7292 \qj \li988 \fi438 \ri50 \sl259 \sbasedon0 \snext8 OmniPage #1287;}
{\s9 \tx50 \tqr \tx3395 \ql \sl348 \li988 \ri4502 \sbasedon0 \snext9 OmniPage #1288;}
{\s10 \tx614 \tqr \tx7847 \qj \li424 \ri50 \sl260 \sbasedon0 \snext10 OmniPage #1289;}
{\s11 \tx609 \tx1047 \tqr \tx7847 \qj \li429 \fi438 \ri50 \sl260 \sbasedon0 \snext11 OmniPage #1290;}
{\s12 \tx50 \tx488 \tqr \tx7268 \qj \li988 \fi438 \ri50 \sl259 \sbasedon0 \snext12 OmniPage #1291;}
}\par {\pard \posx1581 \posy291 \phpg \pvpg \absh-6549 \absw7359 \dxfrtext200 \fs25 \f0 \plain \fs25 \lang1033 \pard \s2 \posx1581 \posy291 \phpg \pvpg \absh-6549 \absw7359 \dxfrtext200 \qj \li50 \ri103 \sl-250 \tx50 \tqr \tx7255 by 8 pattern to draw on the screen for the code. For example, the dot pattern for the M is shown in Figure 6\_3.\par 
\fs10 \f0 \fs25 \f0 \pard \s3 \posx1581 \posy291 \phpg \pvpg \absh-6549 \absw7359 \dxfrtext200 \qj \li58 \fi442 \ri75 \sl-259 \tx58 \tx500 \tqr \tx7283 Here the dark areas stand for the dots that will be turned into the foreground color, and the light areas are the dots that will be turned into the background color. Just like the screen memory, the character set memory can be made to contain any set of patterns you want. This character set can contain custom characters that, when assembled together, create pic\-tures of great detail. In fact, several popular font editors are available for the C64 that make creating custom character sets easy.\par 
\fs10 \f0 \fs25 \f0 \pard \s4 \posx1581 \posy291 \phpg \pvpg \absh-6549 \absw7359 \dxfrtext200 \qj \li61 \fi442 \ri84 \sl-260 \tx61 \tx503 \tqr \tx7274 The characters on the C128 keyboard are just not flexible enough to allow really detailed scenes. The most interesting software for the 40\-column text mode exploits the use of custom character sets. In fact it is possible to have several sets of characters in memory at one time and make the VIC switch between them.\par 
\fs10 \f0 \fs25 \f0 \pard \s5 \posx1581 \posy291 \phpg \pvpg \absh-6549 \absw7359 \dxfrtext200 \qj \li61 \fi442 \ri50 \sl-261 \tx61 \tx503 \tqr \tx7308 Furthermore, the location of screen memory (the part of memory holding the actual codes that tell the C128 what characters to put on the screen) in the 40\_column mode is not fixed as it is in most computers. The VIC II chip can be made to go instantly to another area of memory and treat it like the new display memory. Since this screen memory only consumes about 1Kbytes of RAM, it is possible to have many predefined 40\_column screens waiting in memory. This idea is exploited in many games where you want the user to be faced with different "rooms" or "caves" to explore. The initialization phase of the program builds the screens; then the VIC II chip is simply directed to the beginning of the desired area.\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1531 \margrsxn1503 \pard \sl-261 \tx61 \tx503 \tqr \tx7308 \fs24 \f0 {\pard \posx3377 \posy7078 \phpg \pvpg \absh-286 \absw3898 \dxfrtext200 \fs10 \f0 \fs19 \f1 \pard \s6 \posx3377 \posy7078 \phpg \pvpg \absh-286 \absw3898 \dxfrtext200 \li50 \ri50 \sl-232 \tx50 \tqr \tx3847 Figaro fi..q 1 \fs14 \f2 tint pattern \fs24 \f3 for l.nttor M\par 
}\pard \sl-232 \tx50 \tqr \tx3847 \fs24 \f0 {\pard \posx11265 \posy276 \phpg \pvpg \absh-4196 \absw7343 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s7 \posx11265 \posy276 \phpg \pvpg \absh-4196 \absw7343 \dxfrtext200 \qj \li54 \fi438 \ri60 \sl-258 \tx54 \tx492 \tqr \tx7282 Besides controlling characters in the 40\_column mode with PRINT statements, you can also directly POKE them into screen memory. The use of this mode is not simple, and moving the screen memory and using custom characters requires intimate knowledge of the registers of the VIC II chip. See references in the back of this chapter for books that explain this.\par 
\fs10 \f0 \fs25 \f0 \pard \s8 \posx11265 \posy276 \phpg \pvpg \absh-4196 \absw7343 \dxfrtext200 \qj \li50 \fi438 \ri50 \sl-259 \tx50 \tx488 \tqr \tx7292 The 40\_column text mode is particularly useful for games and edu\-cational programs, as well as for text and menu presentations. One popular game uses a custom character set and a large database of uniquely placed screen codes to simulate flying over a land mass. Trees, lakes, railroads, houses, factories, and gun encampments are made up of custom charac\-ters. From our view above a bomber airplane, we see the shadow of the plane on the ground. A feature of the VIC II chip called "smooth scrolling" moves the information on the screen by one dot row or column. This is exploited to make it appear we are flying over real terrain. In reality, different character codes are being moved in and out of the screen memory.\par 
}\pard \sl-259 \tx50 \tx488 \tqr \tx7292 \fs24 \f0 {\pard \posx10701 \posy4740 \phpg \pvpg \absh-5175 \absw7898 \dxfrtext200 \fs10 \f0 \fs31 \f4 \b \pard \s9 \posx10701 \posy4740 \phpg \pvpg \absh-5175 \absw7898 \dxfrtext200 \li50 \ri4502 \sl-348 \tx50 \tqr \tx3395 The Bit\_Mapped Mode\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s10 \posx10701 \posy4740 \phpg \pvpg \absh-5175 \absw7898 \dxfrtext200 \qj \li614 \ri50 \sl-260 \tx614 \tqr \tx7847 Now that you understand the block graphics mode, you will find the bit\-mapped mode much more straightforward. The bit\_mapped mode is the mode affecting many of the new BASIC 7.0 graphics statements (the new sprite statements work with either bit\_mapped or text modes). The bit\-mapped mode is what you use to plot graphs and charts, draw lines, and control individual points on the display screen. In bit\_mapping, each dot (called a pixel) on the screen is assigned its own bit (location) in memory. If that memory bit is a one, the dot it is assinged to is "on". If the bit is set to zero, the dot is "off". "On" means that dot shows in the foreground color; "off" means it shows in the background color.\par 
\fs10 \f0 \fs25 \f0 \pard \s11 \posx10701 \posy4740 \phpg \pvpg \absh-5175 \absw7898 \dxfrtext200 \qj \li609 \fi438 \ri50 \sl-260 \tx609 \tx1047 \tqr \tx7847 A primary drawback to the bit\_mapped mode is it consumes a great amount of memory and delivers only one color plus background, or 4 colors if you use the multicolor bit\_mapped mode (but it offers only 160 hori\-zontal dots). For example, in the C128 bit\_mapped mode the resolution is 320 by 200, meaning there are 64000 dots and each needs a bit of memory. Since 8 bits are in a byte, a full 8000 bytes are needed for the bit\_mapped display. Recall that in the 40\_column text mode only 1000 bytes were needed to store the information for the entire screen.\par 
}\pard \sl-260 \tx609 \tx1047 \tqr \tx7847 \fs24 \f0 {\pard \posx11260 \posy9915 \phpg \pvpg \absh-1068 \absw7319 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s12 \posx11260 \posy9915 \phpg \pvpg \absh-1068 \absw7319 \dxfrtext200 \qj \li50 \fi438 \ri50 \sl-259 \tx50 \tx488 \tqr \tx7268 Bit\_mapping is best confined to programs where high speed or ani\-mation is not critical, as in engineering, CAD/CAM, business graphs, and so on. You would use the bit\_mapped mode to draw highly detailed objects or complex mathematical graphs.\par 
}\pard \sl-259 \tx50 \tx488 \tqr \tx7268 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx60 \tqr \tx5243 \ql \sl304 \li978 \ri2080 \sbasedon0 \snext2 OmniPage #1537;}
{\s3 \tx50 \tqr \tx7273 \ql \li988 \ri50 \sl258 \sbasedon0 \snext3 OmniPage #1538;}
{\s4 \tqr \tx2237 \ql \sl217 \li988 \ri50 \sbasedon0 \snext4 OmniPage #1539;}
{\s5 \tx488 \tqr \tx7272 \qj \li988 \fi438 \ri50 \sl261 \sbasedon0 \snext5 OmniPage #1540;}
{\s6 \tx507 \tqr \tx2973 \ql \sl253 \li531 \ri4349 \sbasedon0 \snext6 OmniPage #1541;}
{\s7 \tx50 \tqr \tx7848 \ql \sl146 \li988 \ri50 \sbasedon0 \snext7 OmniPage #1542;}
{\s8 \tx488 \tqr \tx7268 \ql \li988 \fi438 \ri50 \sl263 \sbasedon0 \snext8 OmniPage #1543;}
{\s9 \tx50 \tx488 \tqr \tx7245 \ql \li988 \fi438 \ri73 \sl260 \sbasedon0 \snext9 OmniPage #1544;}
{\s10 \tx50 \tqr \tx1554 \ql \sl217 \li988 \ri50 \sbasedon0 \snext10 OmniPage #1545;}
{\s11 \tqr \tx4242 \ql \sl253 \li988 \ri50 \sbasedon0 \snext11 OmniPage #1546;}
{\s12 \tx100 \tx3120 \tqr \tx4318 \ql \sl253 \li988 \ri50 \sbasedon0 \snext12 OmniPage #1547;}
{\s13 \tqr \tx329 \ql \li988 \ri50 \sl204 \sbasedon0 \snext13 OmniPage #1548;}
{\s14 \tqr \tx234 \ql \li988 \ri50 \sl240 \sbasedon0 \snext14 OmniPage #1549;}
{\s15 \tqr \tx2912 \ql \sl240 \li988 \ri50 \sbasedon0 \snext15 OmniPage #1550;}
{\s16 \tx484 \tqr \tx7283 \qj \li988 \fi434 \ri50 \sl254 \sbasedon0 \snext16 OmniPage #1551;}
{\s17 \tx83 \tqr \tx3435 \ql \sl304 \li955 \ri3892 \sbasedon0 \snext17 OmniPage #1552;}
{\s18 \tx50 \tqr \tx7277 \qj \li988 \ri50 \sl269 \sbasedon0 \snext18 OmniPage #1553;}
{\s19 \tqr \tx2451 \qc \sl217 \sbasedon0 \snext19 OmniPage #1554;}
{\s20 \tqr \tx7349 \ql \sl253 \li988 \ri50 \sbasedon0 \snext20 OmniPage #1555;}
{\s21 \tqr \tx7279 \ql \li988 \ri120 \sl241 \sbasedon0 \snext21 OmniPage #1556;}
{\s22 \tqr \tx5094 \qc \sl253 \sbasedon0 \snext22 OmniPage #1557;}
{\s23 \tqr \tx690 \ql \sl253 \li988 \ri50 \sbasedon0 \snext23 OmniPage #1558;}
{\s24 \tqr \tx1201 \ql \sl253 \li988 \ri50 \sbasedon0 \snext24 OmniPage #1559;}
{\s25 \tx152 \tqr \tx416 \qj \li886 \ri150 \sl241 \sbasedon0 \snext25 OmniPage #1560;}
{\s26 \tx50 \tqr \tx516 \qc \sl240 \sbasedon0 \snext26 OmniPage #1561;}
{\s27 \tx50 \tqr \tx337 \ql \sl240 \li988 \ri50 \sbasedon0 \snext27 OmniPage #1562;}
{\s28 \tqr \tx337 \ql \sl246 \li988 \ri50 \sbasedon0 \snext28 OmniPage #1563;}
{\s29 \tx66 \tqr \tx727 \qj \li972 \ri671 \sl240 \sbasedon0 \snext29 OmniPage #1564;}
{\s30 \tx114 \tqr \tx740 \ql \sl247 \li924 \ri658 \sbasedon0 \snext30 OmniPage #1565;}
{\s31 \tx50 \tqr \tx770 \qj \li988 \ri628 \sl242 \sbasedon0 \snext31 OmniPage #1566;}
{\s32 \tx54 \tqr \tx1348 \qj \li984 \ri50 \sl240 \sbasedon0 \snext32 OmniPage #1567;}
{\s33 \tx61 \tqr \tx1179 \qj \li977 \ri219 \sl240 \sbasedon0 \snext33 OmniPage #1568;}
}\par {\pard \posx1596 \posy155 \phpg \pvpg \absh-1738 \absw7324 \dxfrtext200 \fs29 \f0 \i \pard \s2 \posx1596 \posy155 \phpg \pvpg \absh-1738 \absw7324 \dxfrtext200 \li60 \ri2080 \sl-304 \tx60 \tqr \tx5243 Setting the Graphics Mode: GRAPHICS\par 
\fs10 \f0 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s3 \posx1596 \posy155 \phpg \pvpg \absh-1738 \absw7324 \dxfrtext200 \li50 \ri50 \sl-258 \tx50 \tqr \tx7273 The Commodore 128 starts up in the 40\_column text mode. To get into the high resolution bit\_mapped modes, as well as to switch to the 80\-column and split screen modes, you use the GRAPHIC statement. Let's see how that works. The format for the GRAPHIC mode statement is as follows:\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn954 \margrsxn1513 \pard \sl-258 \tx50 \tqr \tx7273 \fs24 \f0 {\pard \posx1004 \posy2095 \phpg \pvpg \absh-307 \absw2288 \dxfrtext200 \fs10 \f0 \fs21 \f2 \pard \s4 \posx1004 \posy2095 \phpg \pvpg \absh-307 \absw2288 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx2237 GRAPHIC mode ,c,s\par 
}\pard \sl-217 \tx50 \tqr \tx2237 \fs24 \f0 {\pard \posx1592 \posy2593 \phpg \pvpg \absh-1884 \absw7323 \dxfrtext200 \fs23 \f1 \fs23 \f1 \pard \s5 \posx1592 \posy2593 \phpg \pvpg \absh-1884 \absw7323 \dxfrtext200 \qj \li50 \fi438 \ri50 \sl-261 \tx50 \tx488 \tqr \tx7272 The variable mode is a digit between 0 and 5 which selects the desired mode, as shown in Table 6\_1. The c parameter means clear or do not clear the screen of text after switching to the mode. If c = 1 it means clear, if c = 0 it means don't clear. The s parameter sets the line number at which the 40\_column text screen starts in the split screen mode. It then defaults to line 19, giving 5 lines of text at the bottom of the screen.\par 
\fs10 \f0 \fs23 \f1 \pard \s6 \posx1592 \posy2593 \phpg \pvpg \absh-1884 \absw7323 \dxfrtext200 \li507 \ri4349 \sl-253 \tx507 \tqr \tx2973 Look at these examples:\par 
}\pard \sl-253 \tx507 \tqr \tx2973 \fs24 \f0 {\pard \posx1010 \posy4675 \phpg \pvpg \absh-745 \absw7899 \dxfrtext200 \fs10 \f0 \fs21 \f2 \pard \s7 \posx1010 \posy4675 \phpg \pvpg \absh-745 \absw7899 \dxfrtext200 \li50 \ri50 \sl-146 \tx50 \tqr \tx7848 GRAPHIC O,l:REM 40 column text mode, clear screen\par 
\pard \s7 \posx1010 \posy4675 \phpg \pvpg \absh-745 \absw7899 \dxfrtext200 \li50 \ri50 \sl-146 \tx50 \tqr \tx7848 GRAPHIC 2,0,15: REM split screen, no clear, text starts on 15th\par 
\pard \s7 \posx1010 \posy4675 \phpg \pvpg \absh-745 \absw7899 \dxfrtext200 \li50 \ri50 \sl-146 \tx50 \tqr \tx7848 . .\par 
\pard \s7 \posx1010 \posy4675 \phpg \pvpg \absh-745 \absw7899 \dxfrtext200 \li50 \ri50 \sl-146 \tx50 \tqr \tx7848 line\par 
}\pard \sl-146 \tx50 \tqr \tx7848 \fs24 \f0 {\pard \posx1616 \posy5630 \phpg \pvpg \absh-1619 \absw7319 \dxfrtext200 \fs23 \f1 \fs23 \f1 \pard \s8 \posx1616 \posy5630 \phpg \pvpg \absh-1619 \absw7319 \dxfrtext200 \li50 \fi438 \ri50 \sl-263 \tx50 \tx488 \tqr \tx7268 The first statement switches us into the 40\_column text mode and clears the screen. The second statement switches into a split screen, doesn't clear, gives us 10 lines of text starting on line 15 and a bit\_mapped display of 320 by 120 pixels.\par 
\fs10 \f0 \fs23 \f1 \pard \s9 \posx1616 \posy5630 \phpg \pvpg \absh-1619 \absw7319 \dxfrtext200 \li50 \fi438 \ri73 \sl-260 \tx50 \tx488 \tqr \tx7245 To enter the bit mapped mode and clear the screen, we would put this statement in our program:\par 
}\pard \sl-260 \tx50 \tx488 \tqr \tx7245 \fs24 \f0 {\pard \posx1019 \posy7447 \phpg \pvpg \absh-307 \absw1605 \dxfrtext200 \fs10 \f0 \fs21 \f2 \pard \s10 \posx1019 \posy7447 \phpg \pvpg \absh-307 \absw1605 \dxfrtext200 \li50 \ri50 \sl-217 \tx50 \tqr \tx1554 GRAPHIC 1,1\par 
}\pard \sl-217 \tx50 \tqr \tx1554 \fs24 \f0 {\pard \posx3180 \posy8182 \phpg \pvpg \absh-315 \absw4293 \dxfrtext200 \fs23 \f3 \fs23 \f3 \b \pard \s11 \posx3180 \posy8182 \phpg \pvpg \absh-315 \absw4293 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx4242 Table 6\_1. Graphics Modes for the C128\par 
}\pard \sl-253 \tx50 \tqr \tx4242 \fs24 \f0 {\pard \posx2723 \posy8729 \phpg \pvpg \absh-315 \absw4369 \dxfrtext200 \fs10 \f0 \fs23 \f3 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s12 \posx2723 \posy8729 \phpg \pvpg \absh-315 \absw4369 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tx100 \tx3120 \tqr \tx4318 \tab Mode\tab Description\par 
}\pard \sl-253 \tx50 \tx100 \tx3120 \tqr \tx4318 \fs24 \f0 {\pard \posx2925 \posy9451 \phpg \pvpg \absh-279 \absw380 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s13 \posx2925 \posy9451 \phpg \pvpg \absh-279 \absw380 \dxfrtext200 \li50 \ri50 \sl-204 \tx50 \tqr \tx329 1\'b0\par 
}\pard \sl-204 \tx50 \tqr \tx329 \fs24 \f0 {\pard \posx2920 \posy9730 \phpg \pvpg \absh-1003 \absw285 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s14 \posx2920 \posy9730 \phpg \pvpg \absh-1003 \absw285 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx234 2 3 4 5\par 
}\pard \tx50 \tqr \tx234 \fs24 \f0 {\pard \posx4946 \posy9209 \phpg \pvpg \absh-1519 \absw2963 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s15 \posx4946 \posy9209 \phpg \pvpg \absh-1519 \absw2963 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx2912 Standard 40\_column text\par 
\pard \s15 \posx4946 \posy9209 \phpg \pvpg \absh-1519 \absw2963 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx2912 Standard bit map\par 
\pard \s15 \posx4946 \posy9209 \phpg \pvpg \absh-1519 \absw2963 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx2912 Standard bit map split screen\par 
\pard \s15 \posx4946 \posy9209 \phpg \pvpg \absh-1519 \absw2963 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx2912 Multicolor bit map\par 
\pard \s15 \posx4946 \posy9209 \phpg \pvpg \absh-1519 \absw2963 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx2912 Multicolor bit map split screen\par 
\pard \s15 \posx4946 \posy9209 \phpg \pvpg \absh-1519 \absw2963 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx2912 80\_column text\par 
}\pard \tx50 \tqr \tx2912 \fs24 \f0 {\pard \posx11188 \posy137 \phpg \pvpg \absh-1840 \absw7334 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s16 \posx11188 \posy137 \phpg \pvpg \absh-1840 \absw7334 \dxfrtext200 \qj \li50 \fi434 \ri50 \sl-254 \tx50 \tx484 \tqr \tx7283 When the GRAPHIC statement is issued with the bit\_mapped mode, it allocates an area in memory for your bit\_mapped screen information. The GRAPHIC CLR statement clears out this area and returns it to memory. This means the area is now available for program code. However, if you switch back into the graphics mode and your program has grown too long, you may get an error. Now that we have selected the bit mapped mode with the GRAPHIC statement, let's see how color is selected.\par 
}\pard \sl-254 \tx50 \tx484 \tqr \tx7283 \fs24 \f0 {\pard \posx11183 \posy2314 \phpg \pvpg \absh-1237 \absw7328 \dxfrtext200 \fs10 \f0 \fs29 \f0 \i \pard \s17 \posx11183 \posy2314 \phpg \pvpg \absh-1237 \absw7328 \dxfrtext200 \li83 \ri3892 \sl-304 \tx83 \tqr \tx3435 Choosing Colors: COLOR\par 
\fs10 \f0 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s18 \posx11183 \posy2314 \phpg \pvpg \absh-1237 \absw7328 \dxfrtext200 \qj \li50 \ri50 \sl-269 \tx50 \tqr \tx7277 The statement for choosing what colors to use for the screen foreground, background and border is set by the COLOR statement. The format of COLOR is:\par 
}\pard \sl-269 \tx50 \tqr \tx7277 \fs24 \f0 {\pard \posx10601 \posy3759 \phpg \pvpg \absh-307 \absw2502 \dxfrtext200 \fs10 \f0 \fs21 \f2 \pard \s19 \posx10601 \posy3759 \phpg \pvpg \absh-307 \absw2502 \dxfrtext200 \qc \sl-217 \tx50 \tqr \tx2451 COLOR source, color\par 
}\pard \sl-217 \tx50 \tqr \tx2451 \fs24 \f0 {\pard \posx11198 \posy4223 \phpg \pvpg \absh-844 \absw7400 \dxfrtext200 \fs23 \f1 \fs23 \f1 \pard \s20 \posx11198 \posy4223 \phpg \pvpg \absh-844 \absw7400 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx7349 where source is the section of the screen you wish to color (the foreground,\par 
\fs10 \f0 \fs23 \f1 \pard \s21 \posx11198 \posy4223 \phpg \pvpg \absh-844 \absw7400 \dxfrtext200 \li50 \ri120 \sl-241 \tx50 \tqr \tx7279 background or border for a specific mode) and color is the color code (1\-16) for the color you want assigned to that source. Table 6\_2 lists the colors\par 
}\pard \sl-241 \tx50 \tqr \tx7279 \fs24 \f0 {\pard \posx12313 \posy5774 \phpg \pvpg \absh-315 \absw5145 \dxfrtext200 \fs10 \f0 \fs23 \f3 \b \pard \s22 \posx12313 \posy5774 \phpg \pvpg \absh-315 \absw5145 \dxfrtext200 \qc \sl-253 \tx50 \tqr \tx5094 Table 6\_2. Color Codes for the COLOR Statement\par 
}\pard \sl-253 \tx50 \tqr \tx5094 \fs24 \f0 {\pard \posx12695 \posy6302 \phpg \pvpg \absh-315 \absw741 \dxfrtext200 \fs10 \f0 \fs23 \f1 \plain \fs23 \f1 \lang1033 \pard \s23 \posx12695 \posy6302 \phpg \pvpg \absh-315 \absw741 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx690 Color\par 
}\pard \sl-253 \tx50 \tqr \tx690 \fs24 \f0 {\pard \posx15803 \posy6306 \phpg \pvpg \absh-315 \absw1252 \dxfrtext200 \fs10 \f0 \fs18 \f4 \i \pard \s24 \posx15803 \posy6306 \phpg \pvpg \absh-315 \absw1252 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx1201 Color \fs23 \f1 \plain \fs23 \f1 \lang1033 Code\par 
}\pard \sl-253 \tx50 \tqr \tx1201 \fs24 \f0 {\pard \posx12749 \posy6783 \phpg \pvpg \absh-2688 \absw567 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s25 \posx12749 \posy6783 \phpg \pvpg \absh-2688 \absw567 \dxfrtext200 \qj \li152 \ri150 \sl-241 \tx152 \tqr \tx416 1 2 3 4 5 6 7 8 9\par 
\fs10 \f0 \fs23 \f1 \pard \s26 \posx12749 \posy6783 \phpg \pvpg \absh-2688 \absw567 \dxfrtext200 \qc \tx50 \tqr \tx516 10\par 
\pard \s26 \posx12749 \posy6783 \phpg \pvpg \absh-2688 \absw567 \dxfrtext200 \qc \tx50 \tqr \tx516 11\par 
}\pard \tx50 \tqr \tx516 \fs24 \f0 {\pard \posx12926 \posy9471 \phpg \pvpg \absh-722 \absw388 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s27 \posx12926 \posy9471 \phpg \pvpg \absh-722 \absw388 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx337 2\par 
\pard \s27 \posx12926 \posy9471 \phpg \pvpg \absh-722 \absw388 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx337 3\par 
\pard \s27 \posx12926 \posy9471 \phpg \pvpg \absh-722 \absw388 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx337 4\par 
}\pard \tx50 \tqr \tx337 \fs24 \f0 {\pard \posx12930 \posy10193 \phpg \pvpg \absh-524 \absw388 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s28 \posx12930 \posy10193 \phpg \pvpg \absh-524 \absw388 \dxfrtext200 \li50 \ri50 \sl-246 \tx50 \tqr \tx337 5\par 
\pard \s28 \posx12930 \posy10193 \phpg \pvpg \absh-524 \absw388 \dxfrtext200 \li50 \ri50 \sl-246 \tx50 \tqr \tx337 6\par 
}\pard \sl-246 \tx50 \tqr \tx337 \fs24 \f0 {\pard \posx15624 \posy6788 \phpg \pvpg \absh-3929 \absw1399 \dxfrtext200 \fs10 \f0 \fs23 \f1 \pard \s29 \posx15624 \posy6788 \phpg \pvpg \absh-3929 \absw1399 \dxfrtext200 \qj \li66 \ri671 \tx66 \tqr \tx727 Black White Red\par 
\fs10 \f0 \fs23 \f1 \pard \s30 \posx15624 \posy6788 \phpg \pvpg \absh-3929 \absw1399 \dxfrtext200 \li114 \ri658 \sl-247 \tx114 \tqr \tx740 Cyan\par 
\fs10 \f0 \fs23 \f1 \pard \s31 \posx15624 \posy6788 \phpg \pvpg \absh-3929 \absw1399 \dxfrtext200 \qj \li50 \ri628 \sl-242 \tx50 \tqr \tx770 Purple Green Blue\par 
\fs10 \f0 \fs23 \f1 \pard \s32 \posx15624 \posy6788 \phpg \pvpg \absh-3929 \absw1399 \dxfrtext200 \qj \li54 \ri50 \tx54 \tqr \tx1348 Yellow Orange Brown Yellow\_Green Pink\par 
\fs10 \f0 \fs23 \f1 \pard \s33 \posx15624 \posy6788 \phpg \pvpg \absh-3929 \absw1399 \dxfrtext200 \qj \li61 \ri219 \tx61 \tqr \tx1179 Blue\_Green Lt. Blue Dk. Blue Lt. Green\par 
}\pard \tx61 \tqr \tx1179 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx7264 \ql \li988 \ri50 \sl253 \sbasedon0 \snext2 OmniPage #1793;}
{\s3 \tx493 \tqr \tx6526 \ql \li545 \ri788 \sl261 \sbasedon0 \snext3 OmniPage #1794;}
{\s4 \tx71 \tqr \tx5061 \ql \sl217 \li967 \ri2965 \sbasedon0 \snext4 OmniPage #1795;}
{\s5 \tx50 \tqr \tx7976 \qj \li988 \ri50 \sl202 \sbasedon0 \snext5 OmniPage #1796;}
{\s6 \tx478 \tqr \tx7277 \qj \li988 \fi428 \ri50 \sl260 \sbasedon0 \snext6 OmniPage #1797;}
{\s7 \tx50 \tqr \tx4409 \ql \sl319 \li988 \ri50 \sbasedon0 \snext7 OmniPage #1798;}
{\s8 \tqr \tx7277 \qj \li988 \ri50 \sl261 \sbasedon0 \snext8 OmniPage #1799;}
{\s9 \tqr \tx5255 \qc \sl261 \sbasedon0 \snext9 OmniPage #1800;}
{\s10 \tx100 \tx3072 \tqr \tx4637 \ql \sl261 \li988 \ri50 \sbasedon0 \snext10 OmniPage #1801;}
{\s11 \tqr \tx260 \ql \li988 \ri50 \sl240 \sbasedon0 \snext11 OmniPage #1802;}
{\s12 \tqr \tx3990 \ql \sl240 \li988 \ri50 \sbasedon0 \snext12 OmniPage #1803;}
{\s13 \tqr \tx4232 \ql \sl319 \li988 \ri50 \sbasedon0 \snext13 OmniPage #1804;}
{\s14 \tx57 \tqr \tx7276 \qj \li981 \ri54 \sl257 \sbasedon0 \snext14 OmniPage #1805;}
{\s15 \tx50 \tx484 \tqr \tx7280 \qj \li988 \fi434 \ri50 \sl259 \sbasedon0 \snext15 OmniPage #1806;}
{\s16 \tx50 \tqr \tx4780 \ql \sl319 \li988 \ri50 \sbasedon0 \snext16 OmniPage #1807;}
{\s17 \tqr \tx7253 \qj \li988 \ri50 \sl240 \sbasedon0 \snext17 OmniPage #1808;}
{\s18 \tqr \tx5197 \qc \sl261 \sbasedon0 \snext18 OmniPage #1809;}
}\par {\pard \posx1596 \posy223 \phpg \pvpg \absh-1085 \absw7315 \dxfrtext200 \fs25 \f0 \pard \s2 \posx1596 \posy223 \phpg \pvpg \absh-1085 \absw7315 \dxfrtext200 \li50 \ri50 \sl-253 \tx50 \tqr \tx7264 and codes used with the Commodore 128. Table 6\_3 lists the six color sources and their codes for this statement. The trick here is that you can assign different colors to different modes.\par 
\fs10 \f0 \fs25 \f0 \pard \s3 \posx1596 \posy223 \phpg \pvpg \absh-1085 \absw7315 \dxfrtext200 \li493 \ri788 \sl-261 \tx493 \tqr \tx6526 Here are some examples of the use of the \fs26 \f1 COLOR \fs25 \f0 statement:\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn943 \margrsxn1586 \pard \sl-261 \tx493 \tqr \tx6526 \fs24 \f0 {\pard \posx993 \posy1498 \phpg \pvpg \absh-731 \absw8027 \dxfrtext200 \fs10 \f0 \fs22 \f2 \pard \s4 \posx993 \posy1498 \phpg \pvpg \absh-731 \absw8027 \dxfrtext200 \li71 \ri2965 \sl-217 \tx71 \tqr \tx5061 10 COLOR 0,15: REM background dark blue\par 
\fs10 \f0 \fs22 \f2 \pard \s5 \posx993 \posy1498 \phpg \pvpg \absh-731 \absw8027 \dxfrtext200 \qj \li50 \ri50 \sl-202 \tx50 \tqr \tx7976 20 COLOR 1,4: REM set foreground color bit map (1) to cyan (4) 30 COLOR 4,11: REM set border color (4) to yellow\_green (11)\par 
}\pard \sl-202 \tx50 \tqr \tx7976 \fs24 \f0 {\pard \posx1586 \posy2443 \phpg \pvpg \absh-1355 \absw7328 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s6 \posx1586 \posy2443 \phpg \pvpg \absh-1355 \absw7328 \dxfrtext200 \qj \li50 \fi428 \ri50 \sl-260 \tx50 \tx478 \tqr \tx7277 In this example we are changing the normal color Commodore 128 defaults. The first line sets the background for text and graphics to dark blue. The second line sets the foreground color for the bit map to cyan and the last line sets the border color for the bit\_mapped and text display to yellow\_green.\par 
}\pard \sl-260 \tx50 \tx478 \tqr \tx7277 \fs24 \f0 {\pard \posx1619 \posy4110 \phpg \pvpg \absh-372 \absw4460 \dxfrtext200 \fs10 \f0 \fs30 \f3 \i \pard \s7 \posx1619 \posy4110 \phpg \pvpg \absh-372 \absw4460 \dxfrtext200 \li50 \ri50 \sl-319 \tx50 \tqr \tx4409 Other Color Oriented Statements\par 
}\pard \sl-319 \tx50 \tqr \tx4409 \fs24 \f0 {\pard \posx1590 \posy4526 \phpg \pvpg \absh-2405 \absw7328 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s8 \posx1590 \posy4526 \phpg \pvpg \absh-2405 \absw7328 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7277 The \fs26 \f1 SCNCLR \fs25 \f0 statement is used to clear the screen in any mode. For example, \fs26 \f1 SCNCLR0 \fs25 \f0 clears the 40\_column text mode and \fs26 \f1 SCNCLR2 \fs25 \f0 clears the standard bit\_mapped mode (by "clear" we mean sets it to the back\-ground color). If your program needs to know what color was assigned to a particular source, such as the color of the foreground of the bit\_mapped mode, you use the \fs26 \f1 RCLR(N) \fs25 \f0 function. You assign a number to \fs26 \f1 N \fs25 \f0 to rep\-resent the source mode you want to check, and it returns a color number between 1 and 16. A similar new function is \fs26 \f1 RGR, \fs25 \f0 which simply returns the current mode number 0 to 5.\par 
}\pard \sl-261 \tx50 \tqr \tx7277 \fs24 \f0 {\pard \posx2649 \posy8041 \phpg \pvpg \absh-312 \absw5306 \dxfrtext200 \fs10 \f0 \fs25 \f4 \b \pard \s9 \posx2649 \posy8041 \phpg \pvpg \absh-312 \absw5306 \dxfrtext200 \qc \sl-261 \tx50 \tqr \tx5255 Table 6\_3. Source Codes for the COLOR Statement\par 
}\pard \sl-261 \tx50 \tqr \tx5255 \fs24 \f0 {\pard \posx2387 \posy8593 \phpg \pvpg \absh-312 \absw4688 \dxfrtext200 \fs10 \f0 \fs25 \f4 \fs25 \f0 \plain \fs25 \lang1033 \pard \s10 \posx2387 \posy8593 \phpg \pvpg \absh-312 \absw4688 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tx100 \tx3072 \tqr \tx4637 \tab Number\tab Source Affected\par 
}\pard \sl-261 \tx50 \tx100 \tx3072 \tqr \tx4637 \fs24 \f0 {\pard \posx2705 \posy9075 \phpg \pvpg \absh-1759 \absw311 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s11 \posx2705 \posy9075 \phpg \pvpg \absh-1759 \absw311 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx260 o 1 2 3 \fs22 \f2 4 5 6\par 
}\pard \tx50 \tqr \tx260 \fs24 \f0 {\pard \posx4211 \posy9070 \phpg \pvpg \absh-1756 \absw4041 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s12 \posx4211 \posy9070 \phpg \pvpg \absh-1756 \absw4041 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx3990 Background 40\_column text mode\par 
\pard \s12 \posx4211 \posy9070 \phpg \pvpg \absh-1756 \absw4041 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx3990 Foreground bit\_mapped mode\par 
\pard \s12 \posx4211 \posy9070 \phpg \pvpg \absh-1756 \absw4041 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx3990 Foreground multicolors mode\par 
\pard \s12 \posx4211 \posy9070 \phpg \pvpg \absh-1756 \absw4041 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx3990 Foreground multicolors mode\par 
\pard \s12 \posx4211 \posy9070 \phpg \pvpg \absh-1756 \absw4041 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx3990 Bord\'e9r 40\_column or bit\_mapped mode\par 
\pard \s12 \posx4211 \posy9070 \phpg \pvpg \absh-1756 \absw4041 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx3990 Character color 40\_or 80\_column text mode\par 
\pard \s12 \posx4211 \posy9070 \phpg \pvpg \absh-1756 \absw4041 \dxfrtext200 \li50 \ri50 \tx50 \tqr \tx3990 Background 80\_column text mode\par 
}\pard \tx50 \tqr \tx3990 \fs24 \f0 {\pard \posx11202 \posy249 \phpg \pvpg \absh-372 \absw4283 \dxfrtext200 \fs10 \f0 \fs30 \f3 \i \pard \s13 \posx11202 \posy249 \phpg \pvpg \absh-372 \absw4283 \dxfrtext200 \li50 \ri50 \sl-319 \tx50 \tqr \tx4232 Bit\_Mapped Coordinate System\par 
}\pard \sl-319 \tx50 \tqr \tx4232 \fs24 \f0 {\pard \posx11194 \posy669 \phpg \pvpg \absh-3676 \absw7331 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s14 \posx11194 \posy669 \phpg \pvpg \absh-3676 \absw7331 \dxfrtext200 \qj \li57 \ri54 \sl-257 \tx57 \tqr \tx7276 There are several statements that help you draw pictures on the standard graphics mode screen. There are statements for plotting dots and for draw\-ing lines, boxes, circles, and polygons.\par 
\fs10 \f0 \fs25 \f0 \pard \s15 \posx11194 \posy669 \phpg \pvpg \absh-3676 \absw7331 \dxfrtext200 \qj \li50 \fi434 \ri50 \sl-259 \tx50 \tx484 \tqr \tx7280 The coordinate system for the bit\_mapped mode is shown in Figure 6\_4. As you can see, the upper left corner is the home position (0,0) and the bottom right corner is the maximum value of the coordinate system (319,199). Each pixel on this display is indicated by an x and a y pair of "coordinates". For example, the pixel in the middle of the screen is at locations 160,100. Trying to plot a coordinate value outside the screen limits will cause the computer to stop and give a syntax error. The num\-bering of the axis (0 on top and maximum running toward the bottom) may appear to be upside\_down to mathematicians (who expect positive numbers to grow upward), but in fact this is the way personal computers typically treat the screen.\par 
}\pard \sl-259 \tx50 \tx484 \tqr \tx7280 \fs24 \f0 {\pard \posx11196 \posy4647 \phpg \pvpg \absh-372 \absw4831 \dxfrtext200 \fs10 \f0 \fs30 \f3 \i \pard \s16 \posx11196 \posy4647 \phpg \pvpg \absh-372 \absw4831 \dxfrtext200 \li50 \ri50 \sl-319 \tx50 \tqr \tx4780 Locating the Pixel Cursor: LOCATE\par 
}\pard \sl-319 \tx50 \tqr \tx4780 \fs24 \f0 {\pard \posx11201 \posy5073 \phpg \pvpg \absh-552 \absw7304 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s17 \posx11201 \posy5073 \phpg \pvpg \absh-552 \absw7304 \dxfrtext200 \qj \li50 \ri50 \tx50 \tqr \tx7253 Before we show you how to draw on the bit\_mapped display, you need to understand something called the pixel cursor, or PC. A pixel corresponds\par 
}\pard \tx50 \tqr \tx7253 \fs24 \f0 {\pard \posx12274 \posy6051 \phpg \pvpg \absh-312 \absw5248 \dxfrtext200 \fs10 \f0 \fs25 \f4 \b \pard \s18 \posx12274 \posy6051 \phpg \pvpg \absh-312 \absw5248 \dxfrtext200 \qc \sl-261 \tx50 \tqr \tx5197 Figure 6\_4. Bit\_Mapped Mode Coordinate System\par 
}\pard \qc \sl-261 \tx50 \tqr \tx5197 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx7286 \qj \li988 \ri50 \sl256 \sbasedon0 \snext2 OmniPage #2049;}
{\s3 \tx64 \tx503 \tqr \tx7252 \qj \li974 \fi439 \ri84 \sl267 \sbasedon0 \snext3 OmniPage #2050;}
{\s4 \tx50 \tqr \tx4190 \ql \sl211 \li988 \ri50 \sbasedon0 \snext4 OmniPage #2051;}
{\s5 \tx489 \tqr \tx7254 \qj \li988 \fi439 \ri50 \sl262 \sbasedon0 \snext5 OmniPage #2052;}
{\s6 \tx50 \tqr \tx2237 \ql \sl211 \li988 \ri50 \sbasedon0 \snext6 OmniPage #2053;}
{\s7 \tx489 \tqr \tx7271 \qj \li988 \fi439 \ri50 \sl261 \sbasedon0 \snext7 OmniPage #2054;}
{\s8 \tx58 \tqr \tx4498 \ql \sl312 \li980 \ri2824 \sbasedon0 \snext8 OmniPage #2055;}
{\s9 \tx50 \tqr \tx7272 \qj \li988 \ri50 \sl261 \sbasedon0 \snext9 OmniPage #2056;}
{\s10 \tqr \tx4664 \ql \sl211 \li988 \ri50 \sbasedon0 \snext10 OmniPage #2057;}
{\s11 \tx483 \tqr \tx7276 \qj \li988 \fi433 \ri50 \sl261 \sbasedon0 \snext11 OmniPage #2058;}
{\s12 \tx50 \tqr \tx7277 \qj \li988 \ri50 \sl261 \sbasedon0 \snext12 OmniPage #2059;}
{\s13 \tqr \tx3195 \ql \sl211 \li988 \ri50 \sbasedon0 \snext13 OmniPage #2060;}
{\s14 \tqr \tx7293 \ql \li988 \ri50 \sl260 \sbasedon0 \snext14 OmniPage #2061;}
{\s15 \tqr \tx7388 \ql \li988 \ri50 \sl222 \sbasedon0 \snext15 OmniPage #2062;}
{\s16 \tqr \tx7244 \ql \li988 \ri67 \sl255 \sbasedon0 \snext16 OmniPage #2063;}
{\s17 \tx53 \tx487 \tqr \tx7261 \ql \li985 \fi434 \ri50 \sl261 \sbasedon0 \snext17 OmniPage #2064;}
{\s18 \tx50 \tqr \tx6114 \ql \sl218 \li988 \ri50 \sbasedon0 \snext18 OmniPage #2065;}
{\s19 \tqr \tx7250 \ql \li988 \ri50 \sl263 \sbasedon0 \snext19 OmniPage #2066;}
{\s20 \tqr \tx3747 \ql \li988 \ri50 \sl303 \sbasedon0 \snext20 OmniPage #2067;}
{\s21 \tqr \tx7299 \ql \li988 \ri50 \sl261 \sbasedon0 \snext21 OmniPage #2068;}
{\s22 \tx488 \tqr \tx6239 \ql \li550 \ri1110 \sl261 \sbasedon0 \snext22 OmniPage #2069;}
}\par {\pard \posx1728 \posy493 \phpg \pvpg \absh-2886 \absw7337 \dxfrtext200 \fs25 \f0 \plain \fs25 \lang1033 \pard \s2 \posx1728 \posy493 \phpg \pvpg \absh-2886 \absw7337 \dxfrtext200 \qj \li50 \ri50 \sl-256 \tx50 \tqr \tx7286 to a dot location on the screen. The "pixel cursor" is similar to the flashing cursor you see in the Commodore 128 text mode that tells where the next character will be displayed. The pixel cursor indicates where the next dot will be placed, but there is no blinking dot to be seen. The PC is used differently in graphics. In BASIC statements where the optional coordi\-nates are omitted, the pixel cursor is what is used as the default coordi\-nates. For example, if we use the CIRCLE statement (we'll see it soon) without specifying the center coordinates for the circle, the pixel cursor is used as the default. How do we specify where the pixel cursor is located?\par 
\fs10 \f0 \fs25 \f0 \pard \s3 \posx1728 \posy493 \phpg \pvpg \absh-2886 \absw7337 \dxfrtext200 \qj \li64 \fi439 \ri84 \sl-267 \tx64 \tx503 \tqr \tx7252 The LOCATE statement is used to move the pixel cursor to the desired coordinates on the screen. The syntax of LOCATE is:\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1074 \margrsxn1515 \pard \sl-267 \tx64 \tx503 \tqr \tx7252 \fs24 \f0 {\pard \posx1124 \posy3573 \phpg \pvpg \absh-296 \absw4241 \dxfrtext200 \fs10 \f0 \fs21 \f1 \pard \s4 \posx1124 \posy3573 \phpg \pvpg \absh-296 \absw4241 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx4190 LOCATE x\_coordinate, y\_coordinate\par 
}\pard \sl-211 \tx50 \tqr \tx4190 \fs24 \f0 {\pard \posx1748 \posy4086 \phpg \pvpg \absh-574 \absw7305 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s5 \posx1748 \posy4086 \phpg \pvpg \absh-574 \absw7305 \dxfrtext200 \qj \li50 \fi439 \ri50 \sl-262 \tx50 \tx489 \tqr \tx7254 Here is an example of LOCATE that moves the PC to the center of the screen:\par 
}\pard \sl-262 \tx50 \tx489 \tqr \tx7254 \fs24 \f0 {\pard \posx1145 \posy4853 \phpg \pvpg \absh-296 \absw2288 \dxfrtext200 \fs10 \f0 \fs21 \f1 \pard \s6 \posx1145 \posy4853 \phpg \pvpg \absh-296 \absw2288 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx2237 10 LOCATE 160,100\par 
}\pard \sl-211 \tx50 \tqr \tx2237 \fs24 \f0 {\pard \posx1745 \posy5366 \phpg \pvpg \absh-1618 \absw7322 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s7 \posx1745 \posy5366 \phpg \pvpg \absh-1618 \absw7322 \dxfrtext200 \qj \li50 \fi439 \ri50 \sl-261 \tx50 \tx489 \tqr \tx7271 Note that you will see nothing when this statment is executed, but the next time you draw something and leave out a beginning coordinate, it will start at the PC location. This statement can be used to control where text is printed on the graphics screen, as we shall see when we learn how to use the CHAR statement. Now let's see how you actually draw on the graphics screen.\par 
}\pard \sl-261 \tx50 \tx489 \tqr \tx7271 \fs24 \f0 {\pard \posx1750 \posy7306 \phpg \pvpg \absh-1767 \absw7323 \dxfrtext200 \fs10 \f0 \fs30 \f2 \i \pard \s8 \posx1750 \posy7306 \phpg \pvpg \absh-1767 \absw7323 \dxfrtext200 \li58 \ri2824 \sl-312 \tx58 \tqr \tx4498 Drawing Lines and Points: DRAW\par 
\fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s9 \posx1750 \posy7306 \phpg \pvpg \absh-1767 \absw7323 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7272 Now you know how to select the different graphic modes, set the color sources, and position the pixel cursor, let's learn how lines and points are easily drawn. The Commodore 128 BASIC 7.0 uses a format of line\-drawing statement also found in the Apple II BASIC called the \fs23 \f3 DRAW \fs25 \f0 statement. The syntax of \fs23 \f3 DRAW is \fs25 \f0 as follows:\par 
}\pard \sl-261 \tx50 \tqr \tx7272 \fs24 \f0 {\pard \posx1146 \posy9272 \phpg \pvpg \absh-296 \absw4715 \dxfrtext200 \fs10 \f0 \fs21 \f1 \pard \s10 \posx1146 \posy9272 \phpg \pvpg \absh-296 \absw4715 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx4664 DRAW color source, al, bl, TO a2, be,\par 
}\pard \sl-211 \tx50 \tqr \tx4664 \fs24 \f0 {\pard \posx1764 \posy9779 \phpg \pvpg \absh-1358 \absw7327 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s11 \posx1764 \posy9779 \phpg \pvpg \absh-1358 \absw7327 \dxfrtext200 \qj \li50 \fi433 \ri50 \sl-261 \tx50 \tx483 \tqr \tx7276 In this description "color source" is a value of 1 to 3 representing the source on which to draw. For example, if color source equals one it would mean draw in the color of the foreground for the bit\_mapped mode, a two would mean draw in the color of the foreground for the multicolors mode, a three in the multicolors mode. The values al and bl represent the x\_y\par 
}\pard \sl-261 \tx50 \tx483 \tqr \tx7276 \fs24 \f0 {\pard \posx11242 \posy474 \phpg \pvpg \absh-573 \absw7328 \dxfrtext200 \fs10 \f0 \fs25 \f0 \pard \s12 \posx11242 \posy474 \phpg \pvpg \absh-573 \absw7328 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7277 coordinates for the starting point of the line, and the values a2 and b2 are the x\_y coordinates for the ending point for the line. Thus the statement:\par 
}\pard \sl-261 \tx50 \tqr \tx7277 \fs24 \f0 {\pard \posx10712 \posy1273 \phpg \pvpg \absh-296 \absw3246 \dxfrtext200 \fs10 \f0 \fs21 \f1 \pard \s13 \posx10712 \posy1273 \phpg \pvpg \absh-296 \absw3246 \dxfrtext200 \li50 \ri50 \sl-211 \tx50 \tqr \tx3195 100 DRAW 1,10,10 TO 50,50\par 
}\pard \sl-211 \tx50 \tqr \tx3195 \fs24 \f0 {\pard \posx11252 \posy1741 \phpg \pvpg \absh-1352 \absw7344 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s14 \posx11252 \posy1741 \phpg \pvpg \absh-1352 \absw7344 \dxfrtext200 \li50 \ri50 \sl-260 \tx50 \tqr \tx7293 will draw a line in the foreground color for the standard bit\_mapped mode from the location 10,10 to the location 50,50 on the screen. The three periods in the syntax definition tell us that you can continue to specify coordinates to \fs23 \f3 DRAW TO, \fs25 \f0 and thereby create complex geometric figures. For example, the statements:\par 
}\pard \sl-260 \tx50 \tqr \tx7293 \fs24 \f0 {\pard \posx11154 \posy3316 \phpg \pvpg \absh-518 \absw7439 \dxfrtext200 \fs10 \f0 \fs21 \f1 \pard \s15 \posx11154 \posy3316 \phpg \pvpg \absh-518 \absw7439 \dxfrtext200 \li50 \ri50 \sl-222 \tx50 \tqr \tx7388 DRAW 1,100,100 TO 160,40 TO 220,100 TO 100,100: REM Triangle DRAW 1,0,0 TO 0,199 TO 319,199 TO 319,0 TO 0,0: REM Border\par 
}\pard \sl-222 \tx50 \tqr \tx7388 \fs24 \f0 {\pard \posx11248 \posy4017 \phpg \pvpg \absh-1352 \absw7312 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s16 \posx11248 \posy4017 \phpg \pvpg \absh-1352 \absw7312 \dxfrtext200 \li50 \ri67 \sl-255 \tx50 \tqr \tx7244 would draw a triangle centered on the screen and then a borderline around the edges of the screen.\par 
\fs10 \f0 \fs25 \f0 \pard \s17 \posx11248 \posy4017 \phpg \pvpg \absh-1352 \absw7312 \dxfrtext200 \li53 \fi434 \ri50 \sl-261 \tx53 \tx487 \tqr \tx7261 You can also use the \fs23 \f3 DRAW \fs25 \f0 statement to "plot" individual points by simply leaving out the TO and the ending coordinate specification. Think of this as a line with a length of one pixel. Thus the statements:\par 
}\pard \sl-261 \tx53 \tx487 \tqr \tx7261 \fs24 \f0 {\pard \posx10696 \posy5575 \phpg \pvpg \absh-951 \absw6165 \dxfrtext200 \fs10 \f0 \fs21 \f1 \pard \s18 \posx10696 \posy5575 \phpg \pvpg \absh-951 \absw6165 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx6114 30 FOR X=1 to 319\par 
\pard \s18 \posx10696 \posy5575 \phpg \pvpg \absh-951 \absw6165 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx6114 40 Y=(X^2)/490: REM plot curve of Y=X**2\par 
\pard \s18 \posx10696 \posy5575 \phpg \pvpg \absh-951 \absw6165 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx6114 50 DRAW 1,X,Y: REM note special draw with no TO\par 
\pard \s18 \posx10696 \posy5575 \phpg \pvpg \absh-951 \absw6165 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx6114 60 NEXT X\par 
}\pard \sl-218 \tx50 \tqr \tx6114 \fs24 \f0 {\pard \posx11244 \posy6742 \phpg \pvpg \absh-575 \absw7301 \dxfrtext200 \fs25 \f0 \fs25 \f0 \pard \s19 \posx11244 \posy6742 \phpg \pvpg \absh-575 \absw7301 \dxfrtext200 \li50 \ri50 \sl-263 \tx50 \tqr \tx7250 will produce a plot of the curving equation Y equals X squared. (Of course, you can use any equation you wish with the \fs23 \f3 DRAW \fs25 \f0 statement.)\par 
}\pard \sl-263 \tx50 \tqr \tx7250 \fs24 \f0 {\pard \posx11226 \posy7641 \phpg \pvpg \absh-651 \absw3798 \dxfrtext200 \fs10 \f0 \fs30 \f2 \i \pard \s20 \posx11226 \posy7641 \phpg \pvpg \absh-651 \absw3798 \dxfrtext200 \li50 \ri50 \sl-303 \tx50 \tqr \tx3747 Drawing Filled and Unfilled Rectangles: BOX\par 
}\pard \sl-303 \tx50 \tqr \tx3747 \fs24 \f0 {\pard \posx11234 \posy8350 \phpg \pvpg \absh-2403 \absw7350 \dxfrtext200 \fs10 \f0 \fs25 \f0 \plain \fs25 \lang1033 \pard \s21 \posx11234 \posy8350 \phpg \pvpg \absh-2403 \absw7350 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx7299 The BOX statement allows you to draw the outlines of rectangles of any width and height and any location on the bit\_mapped screen. What is more, you can specify that the rectangle be filled with the current color source, so you get a solid filled box. To make the statement even more powerful, you can set the degree of rotation for the rectangle, causing it to spin about its center a precise number of degrees before it is displayed. Such a feature is useful for plotting in color coordinates, doing simula\-tions, for turtle graphics and for games.\par 
\fs10 \f0 \fs25 \f0 \pard \s22 \posx11234 \posy8350 \phpg \pvpg \absh-2403 \absw7350 \dxfrtext200 \li488 \ri1110 \sl-261 \tx488 \tqr \tx6239 The syntax of the BOX statement is shown in Figure 6\_5.\par 
}\pard \sl-261 \tx488 \tqr \tx6239 \fs24 \f0 \page \lndscpsxn {\stylesheet {\snext0 Normal;}
{\s2 \tx50 \tqr \tx4714 \ql \li988 \ri50 \sl261 \sbasedon0 \snext2 OmniPage #2305;}
{\s3 \tqr \tx2707 \ql \sl196 \li988 \ri50 \sbasedon0 \snext3 OmniPage #2306;}
{\s4 \tqr \tx7288 \qj \li988 \ri50 \sl261 \sbasedon0 \snext4 OmniPage #2307;}
{\s5 \tqr \tx4168 \ql \sl261 \li988 \ri50 \sbasedon0 \snext5 OmniPage #2308;}
{\s6 \tx545 \tqr \tx5767 \ql \li493 \fi-495 \ri50 \sl81 \sbasedon0 \snext6 OmniPage #2309;}
{\s7 \ql \sl232 \li988 \ri50 \sbasedon0 \snext7 OmniPage #2310;}
{\s8 \tqr \tx797 \ql \sl153 \li988 \ri50 \sbasedon0 \snext8 OmniPage #2311;}
{\s9 \tqr \tx1194 \ql \li988 \ri50 \sl221 \sbasedon0 \snext9 OmniPage #2312;}
{\s10 \tqr \tx1956 \ql \li988 \ri50 \sl222 \sbasedon0 \snext10 OmniPage #2313;}
{\s11 \tqr \tx2242 \ql \li988 \ri50 \sl216 \sbasedon0 \snext11 OmniPage #2314;}
{\s12 \tqr \tx2400 \ql \sl212 \li988 \ri50 \sbasedon0 \snext12 OmniPage #2315;}
{\s13 \tqr \tx3225 \ql \sl218 \li988 \ri50 \sbasedon0 \snext13 OmniPage #2316;}
{\s14 \tqr \tx7283 \ql \li988 \ri50 \sl255 \sbasedon0 \snext14 OmniPage #2317;}
{\s15 \tqr \tx2573 \ql \sl196 \li988 \ri50 \sbasedon0 \snext15 OmniPage #2318;}
{\s16 \tx62 \tqr \tx7265 \ql \li976 \ri52 \sl260 \sbasedon0 \snext16 OmniPage #2319;}
{\s17 \tx50 \tx490 \tqr \tx7267 \ql \li988 \fi440 \ri50 \sl263 \sbasedon0 \snext17 OmniPage #2320;}
{\s18 \tx50 \tqr \tx3184 \ql \sl196 \li988 \ri50 \sbasedon0 \snext18 OmniPage #2321;}
{\s19 \tqr \tx7273 \ql \li988 \ri50 \sl284 \sbasedon0 \snext19 OmniPage #2322;}
{\s20 \tqr \tx252 \ql \sl81 \li988 \ri50 \sbasedon0 \snext20 OmniPage #2323;}
{\s21 \tqr \tx6285 \ql \sl261 \li988 \ri50 \sbasedon0 \snext21 OmniPage #2324;}
}\par {\pard \posx2212 \posy381 \phpg \pvpg \absh-312 \absw4765 \dxfrtext200 \fs24 \f0 \pard \s2 \posx2212 \posy381 \phpg \pvpg \absh-312 \absw4765 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx4714 A typical BOX statement would look like this:\par 
}\sect \sectd \linex0 \linemod0 \sbknone \lndscpsxn \marglsxn1147 \margrsxn1514 \pard \sl-261 \tx50 \tqr \tx4714 {\pard \posx1197 \posy914 \phpg \pvpg \absh-261 \absw2758 \dxfrtext200 \fs10 \f0 \fs21 \f1 \pard \s3 \posx1197 \posy914 \phpg \pvpg \absh-261 \absw2758 \dxfrtext200 \li50 \ri50 \sl-196 \tx50 \tqr \tx2707 100 BOX 1 ,10 ,1O , HO , 60\par 
}\pard \sl-196 \tx50 \tqr \tx2707 \fs24 \f0 {\pard \posx1769 \posy1389 \phpg \pvpg \absh-2400 \absw7339 \dxfrtext200 \fs24 \f0 \fs24 \f0 \pard \s4 \posx1769 \posy1389 \phpg \pvpg \absh-2400 \absw7339 \dxfrtext200 \qj \li50 \ri50 \sl-261 \tx50 \tqr \tx7288 The first parameter, color source #, is used to specify what screen to use for the rectangle, and can be 0 to 3. Color source is normally the standard bit mapped screen (color source# = 1) and is the default. It may also be the multicolors mode (2), multicolors mode (3), or the 40\_column text mode (0). The next parameters, al and bl, are the coordinates of the upper left corner of the rectangle. The parameters a2 and b2 are the coordinates of the lower right corner of the rectangle. In the above statement a rectangle is drawn from the coordinate 10,10 to the coordinate 60,60. The box is drawn on the standard bit mapped screen since color source number is\par 
}\pard \sl-261 \tx50 \tqr \tx7288 {\pard \posx3406 \posy4983 \phpg \pvpg \absh-312 \absw4219 \dxfrtext200 \fs10 \f0 \fs24 \f2 \b \pard \s5 \posx3406 \posy4983 \phpg \pvpg \absh-312 \absw4219 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx4168 Figure 6\_5. The BOX Statement Syntax\par 
}\pard \sl-261 \tx50 \tqr \tx4168 \fs24 \f0 {\pard \posx1236 \posy5639 \phpg \pvpg \absh-393 \absw5818 \dxfrtext200 \fs10 \f0 \fs21 \f1 \plain \fs21 \f1 \lang1033 \pard \s6 \posx1236 \posy5639 \phpg \pvpg \absh-393 \absw5818 \dxfrtext200 \li545 \fi-495 \ri50 \sl-81 \tx50 \tx545 \tqr \tx5767 BOX \fs24 \f0 color source#, al, bl, as, b2, angle, paint _ ~ _~ ` . ~ _' ~\par 
}\pard \sl-81 \tx50 \tx545 \tqr \tx5767 {\pard \posx2515 \posy8127 \phpg \pvpg \absh-312 \absw344 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s7 \posx2515 \posy8127 \phpg \pvpg \absh-312 \absw344 \dxfrtext200 \li50 \ri50 \sl-232 \tx50 \tqr \tx293 1\par 
}\pard \sl-232 \tx50 \tqr \tx293 {\pard \posx6365 \posy5704 \phpg \pvpg \absh-312 \absw848 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s8 \posx6365 \posy5704 \phpg \pvpg \absh-312 \absw848 \dxfrtext200 \li50 \ri50 \sl-153 \tx50 \tqr \tx797 _\par 
}\pard \sl-153 \tx50 \tqr \tx797 {\pard \posx7118 \posy6114 \phpg \pvpg \absh-976 \absw1245 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s9 \posx7118 \posy6114 \phpg \pvpg \absh-976 \absw1245 \dxfrtext200 \li50 \ri50 \sl-221 \tx50 \tqr \tx1194 Paint shape with color 0 = off 1 = on\par 
}\pard \sl-221 \tx50 \tqr \tx1194 {\pard \posx6510 \posy7221 \phpg \pvpg \absh-978 \absw2007 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s10 \posx6510 \posy7221 \phpg \pvpg \absh-978 \absw2007 \dxfrtext200 \li50 \ri50 \sl-222 \tx50 \tqr \tx1956 Rotation in degrees: Clockwise, about center rectangle (default is 0 degrees)\par 
}\pard \sl-222 \tx50 \tqr \tx1956 {\pard \posx5747 \posy8336 \phpg \pvpg \absh-745 \absw2293 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s11 \posx5747 \posy8336 \phpg \pvpg \absh-745 \absw2293 \dxfrtext200 \li50 \ri50 \sl-216 \tx50 \tqr \tx2242 Corner opposite to (al, bl). Scaled. Default is PC (pixel cursor)\par 
}\pard \sl-216 \tx50 \tqr \tx2242 {\pard \posx4763 \posy9223 \phpg \pvpg \absh-736 \absw2451 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s12 \posx4763 \posy9223 \phpg \pvpg \absh-736 \absw2451 \dxfrtext200 \li50 \ri50 \sl-212 \tx50 \tqr \tx2400 Corner coordinate.\par 
\pard \s12 \posx4763 \posy9223 \phpg \pvpg \absh-736 \absw2451 \dxfrtext200 \li50 \ri50 \sl-212 \tx50 \tqr \tx2400 Scaled. (o< = al< = 319,\par 
\pard \s12 \posx4763 \posy9223 \phpg \pvpg \absh-736 \absw2451 \dxfrtext200 \li50 \ri50 \sl-212 \tx50 \tqr \tx2400 o<=bl< = 199)\par 
}\pard \sl-212 \tx50 \tqr \tx2400 {\pard \posx3799 \posy10111 \phpg \pvpg \absh-1187 \absw3276 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s13 \posx3799 \posy10111 \phpg \pvpg \absh-1187 \absw3276 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx3225 Color source (0\_3)\par 
\pard \s13 \posx3799 \posy10111 \phpg \pvpg \absh-1187 \absw3276 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx3225 0 = 40\_column background\par 
\pard \s13 \posx3799 \posy10111 \phpg \pvpg \absh-1187 \absw3276 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx3225 1 = standard graphics foreground\par 
\pard \s13 \posx3799 \posy10111 \phpg \pvpg \absh-1187 \absw3276 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx3225 2 = multicolors foreground\par 
\pard \s13 \posx3799 \posy10111 \phpg \pvpg \absh-1187 \absw3276 \dxfrtext200 \li50 \ri50 \sl-218 \tx50 \tqr \tx3225 3 = multicolors foreground\par 
}\pard \sl-218 \tx50 \tqr \tx3225 {\pard \posx11263 \posy359 \phpg \pvpg \absh-567 \absw7334 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s14 \posx11263 \posy359 \phpg \pvpg \absh-567 \absw7334 \dxfrtext200 \li50 \ri50 \sl-255 \tx50 \tqr \tx7283 1. You can leave out a parameter by typing the comma that normally follows it. For example:\par 
}\pard \sl-255 \tx50 \tqr \tx7283 {\pard \posx10715 \posy1131 \phpg \pvpg \absh-261 \absw2624 \dxfrtext200 \fs10 \f0 \fs21 \f1 \pard \s15 \posx10715 \posy1131 \phpg \pvpg \absh-261 \absw2624 \dxfrtext200 \li50 \ri50 \sl-196 \tx50 \tqr \tx2573 100 BOX ,10,10,16, 60\par 
}\pard \sl-196 \tx50 \tqr \tx2573 \fs24 \f0 {\pard \posx11241 \posy1624 \phpg \pvpg \absh-1352 \absw7318 \dxfrtext200 \fs24 \f0 \fs24 \f0 \pard \s16 \posx11241 \posy1624 \phpg \pvpg \absh-1352 \absw7318 \dxfrtext200 \li62 \ri52 \sl-260 \tx62 \tqr \tx7265 uses the default, or last value set for the color source #, which is not included in the statement above but is represented by a comma\par 
\fs10 \f0 \fs24 \f0 \pard \s17 \posx11241 \posy1624 \phpg \pvpg \absh-1352 \absw7318 \dxfrtext200 \li50 \fi440 \ri50 \sl-263 \tx50 \tx490 \tqr \tx7267 The parameter following the opposite corner coordinates is called angle, and controls the number of degrees that the rectangle is rotated before it is displayed. For example, the statement:\par 
}\pard \sl-263 \tx50 \tx490 \tqr \tx7267 {\pard \posx10703 \posy3181 \phpg \pvpg \absh-261 \absw3235 \dxfrtext200 \fs10 \f0 \fs21 \f1 \pard \s18 \posx10703 \posy3181 \phpg \pvpg \absh-261 \absw3235 \dxfrtext200 \li50 \ri50 \sl-196 \tx50 \tqr \tx3184 110 BOX ,10,10, 60, 60, 45,1\par 
}\pard \sl-196 \tx50 \tqr \tx3184 \fs24 \f0 {\pard \posx11233 \posy3655 \phpg \pvpg \absh-596 \absw7324 \dxfrtext200 \fs24 \f0 \fs24 \f0 \pard \s19 \posx11233 \posy3655 \phpg \pvpg \absh-596 \absw7324 \dxfrtext200 \li50 \ri50 \sl-284 \tx50 \tqr \tx7273 will draw a box on the screen, centered about 35,35, and rotated 45 degrees as shown in Figure 6\_6.\par 
}\pard \sl-284 \tx50 \tqr \tx7273 {\pard \posx16865 \posy4600 \phpg \pvpg \absh-312 \absw303 \dxfrtext200 \fs10 \f0 \fs24 \f0 \pard \s20 \posx16865 \posy4600 \phpg \pvpg \absh-312 \absw303 \dxfrtext200 \li50 \ri50 \sl-81 \tx50 \tqr \tx252 J\par 
}\pard \sl-81 \tx50 \tqr \tx252 {\pard \posx11761 \posy5041 \phpg \pvpg \absh-316 \absw6336 \dxfrtext200 \fs10 \f0 \fs24 \f2 \b \pard \s21 \posx11761 \posy5041 \phpg \pvpg \absh-316 \absw6336 \dxfrtext200 \li50 \ri50 \sl-261 \tx50 \tqr \tx6285 Figure 6\_6. \fs24 \f0 \plain \lang1033 BOX \fs24 \f2 \b Using the "Angle" Parameter of 45 Degrees\par 
}\pard \sl-261 \tx50 \tqr \tx6285 \fs24 \f0 }