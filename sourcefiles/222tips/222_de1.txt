*********

Welcome to International Project 64!

The goal of International Project 64 is to preserve non-English Commodore 64
related documents in electronic text format that might otherwise cease to
exist with the rapid advancement of computer technology and declining
interest in 8-bit computers on the part of the general population. If you
would like to help by converting C64 related hardcopy documents to
electronic texts please contact the manager of International Project 64,
Peter Krefting, at peter@softwolves.pp.se.

Extensive efforts were made to preserve the contents of the original
document. However, certain portions, such as diagrams, program listings, and
indexes may have been either altered or sacrificed due to the limitations of
plain vanilla text. Diagrams may have been eliminated where ASCII-art was
not feasible. Program listings may be missing display codes where
substitutions were not possible. Tables of contents and indexes may have
been changed from page number references to section number references.
Please accept our apologies for these limitations, alterations, and possible
omissions.

Document names are limited to the 8.3 file convention of DOS. The first
characters of the file name are an abbreviation of the original document
name and the language of the etext. The version number of the etext follows
next. After that a letter may appear to indicate the particular source of
the document. Finally, the document is given a
.TXT extension.

The author(s) of the original document and members of International Project
64 make no representations about the accuracy or suitability of this
material for any purpose. This etext is provided "as-is". Please refer to
the warantee of the original document, if any, that may included in this
etext. No other warantees, express or implied, are made to you as to the
etext or any medium it may be on. Neither the author(s) nor the members of
International Project 64 will assume liability for damages either from the
direct or indirect use of this etext or from the distribution of or
modification to this etext. Therefore if you read this document or use the
information herein you do so at your own risk.

*********

The International Project 64 etext of the book "222 Tips, Tricks und Tools
für den C 64", written and donated for IP64 distribution by Nikolaus Heusler
<nikolaus.heusler@lrz.tu-muenchen.de>.

222_DE1.TXT, June 1997, etext #8.

Note from the etexter: 

This is german text.

This document is the text of a book written by Nikolaus M. Heusler. The
book was published in 1992 and contains information about the C 64. No part
of this text may be copied, stored or published in any way without prior
written permission by the author. It is not allowed to store copies of this
text or of parts of it on computer-discettes or on computers which can be
accessed in the public, for example on the internet.

Das Werk einschliesslich aller seiner Teile ist urheberrechtlich geschuetzt. 
Jede Verwertung ausserhalb der engen Grenzen des Urheberrechtsgesetzes ist
ohne vorherige schriftliche Zustimmung des Verfassers unzulaessig und
strafbar. Dies gilt insbesondere fuer Vervielfaeltigungen, Uebersetzungen
und die Verarbeitung in elektronischen Systemen.

Einwilligungen zur Weiterverarbeitung wird der Verfasser im Einzelfall auf
schriftliche Anfrage gern geben, falls keine kommerziellen Interessen mit
der Verarbeitung verfolgt werden.

Produkt- und Herstellerangaben in dem Buch werden ohne Ruecksicht auf
eventuellen Patentschutz veroeffentlicht. Warennamen werden ohne Gewaehr-
leistung der freien Verwendbarkeit benutzt. Die Texte wurden mit groesster
Sorgfalt zusammengestellt. Trotzdem sind Fehler nicht vollstaendig
auszuschliessen. Fuer fehlerhafte Angaben und deren Folgen kann der Autor
weder juristische Verantwortung noch irgendeine Haftung uebernehmen.

Zu dem Buch gehoeren zwei Disketten im 1541-Format mit den Listings aus dem
Buch.

Das Buch selbst ist leider nicht mehr lieferbar.

Verfasser / Author: Nikolaus Heusler
                    Zwengauerweg 18
                    D-81479 Muenchen
                    Germany

Bei schriftlichen Anfragen bitte Rueckporto beilegen, ich antworte gern.

This version was published in the internet on the project "IP 64" in June
1997.

*********

                222 Tips, Tricks und Tools       fuer den C 64





INHALTSVERZEICHNIS


   Vorwort

1. Alles für den Basic-Alltag

   Detektiv für Basicprogramme: Das BKS
   Help! Fehlermeldungen erklärt
   Data Aid - Hilfe, die DATAs kommen
   TI$ - die Softwareuhr wird genauer
   Der intelligente REM-Killer
   Befehle auf Tastendruck - 64 Keys
   Array of byte
   komfortable INPUT-Routine
   eine geniale Suchroutine

2. Mehr Spaß mit Maschinensprache

   kompletter Assembler-Dateikurs
   Multitasking auf dem C 64
   das NSS-Kernal
   Eisberg - da friert der C 64
   Nie wieder Abstürze mit Uncrash
   Der Quickie-Generator
   neues DOS für die Floppy
   die große Maschinensprache-Bibliothek

3. Grafik - das Auge ißt mit

   Spritelist findet alle Sprites
   der Chartransposer
   Softscroll
   Double Print sagt's deutlich
   Letter - große Anfangsbuchstaben
   eine starke Using-Routine

4. die Floppy im Griff

   Kurs für relative Dateien
   ARC schlägt zu
   Rattern ade - der Bumpmaster
   Don't replace
   TSS - der Zwillingsfinder
   Verify 2 files
   Löschen rückgängig machen mit Unscratch
   Top Secret - Dateien verschlüsseln besser als der BND
   Der Diskettenspion
   Diskettenspeichermonitor DMS
   getestet auf Herz und Nieren - Tester 1541

5. Sonstiges

   DOC 64 - der Computerarzt
   Kalender im Griff
   Großputz - die Tastatur reinigen
   der Hyper-Reset
   Schmalschrift auf MPS-Druckern - Condensed
   Diskettenbriefe - der Message-Maker
   Die große Trickkiste - auch für Sie ist etwas dabei!

6. Das große Computerlexikon




Vorwort

Daran gibt es keinen Zweifel: Der C 64 ist Weltrekordhalter beim Verkauf von
Homecomputern. Mit ziemlicher Sicherheit wird es auch in der näheren Zukunft
keinen Rechner geben, der von der Verbreitung her an die über zehn Millionen
C 64 herankommt. Ein wichtiger Grund dafür ist sicherlich die für seinen
Preis ungewöhnlich gute technische Ausstattung, was Speicher,
Grafikfähigkeit und die Soundmöglichkeiten anbelangt.

Ein großes Manko war jedoch schon immer das Handbuch zum C 64. Der
frischgebackene Besitzer wird nur sehr grob in die wichtigsten Grundzüge des
eingebauten Basic-Dialekts eingeführt. Die Bedienungsanleitung geht weder
auf die Programmierung in Maschinensprache, die viele Anwendungen erst
ermöglicht, ein, noch steht etwas über die Programmierung der
hochauflösenden Grafik drin. Und das sparsame Basic V2 unterstützt die
enorme Leistungsfähigkeit kaum. Will man ernsthaft mit dem neuen Gerät
arbeiten und programmieren, ist man auf zusätzliche Literatur angewiesen.
Fachzeitschriften wie das 64'er-Magazin bieten regelmäßig interessante Tips
und Tricks, mit denen schnell die ersten Erfolgserlebnisse kommen.

Dieses Buch ist eine weitere wichtige und sehr ergiebige Informationsquelle
für Anwender, vor allem aber Programmierer. Enthalten sind unzählige kleine,
größere und umfangreiche Programme, die Ihren Programmieralltag erheblich
erleichtern werden. Nicht nur der Einsteiger findet hier die Anregungen und
Tips, die das Handbuch ausläßt. Was halten Sie von einem Tool, das alle
Basic-Fehlermeldungen in deutsch näher erläutert? Tastatur-Utilities
erlauben die Belegung der Funktionstasten oder das Abrufen von Basicbefehlen
auf Tastendruck. Auch für den Fortgeschrittenen ist viel dabei. Obwohl
praktische Hilfen für die Basicprogrammierung den Schwerpunkt darstellen,
ist auch einiges aus dem Bereich der Maschinensprache geboten, etwa ein
kompletter Kurs über die Dateiprogrammierung in Assembler. Natürlich soll
auch der Profi nicht zu kurz kommen, als Beispiele seien hier nur »DOC 64«
und der »Tester 1541« genannt, zwei Programme, die den C 64 und das Laufwerk
auf Herz und Nieren überprüfen, oder ein interessantes
Multitask-Hilfsprogramm, mit dessen Hilfe mehrere Projekte gleichzeitig
ablaufen. Zum Thema Floppyprogrammierung gibt es allerlei
Datei-Analyseprogramme, zwei Diskmonitoren, die die geheimnisvollen
schwarzen Scheiben entzaubern, oder ein Hilfsprogramm zum Retten gelöschter
Files.

Das alles geht ohne stundenlanges Abtippen: Auf den beiliegenden Disketten
finden Sie alle Programme fertig zum Ausprobieren. Obwohl viele Utilities
weitgehend selbsterklärend sind, lassen sich jedoch mit Hilfe der
ausführlichen Anleitungen ärgerliche Bedienungsfehler vermeiden.

Mein besonderer Dank gilt den vielen Lesern meiner Beiträge im
64'er-Magazin, die mit konstruktiver Kritik, Verbesserungsvorschlägen und
wichtigen Anregungen in Form von Leserbriefen entscheidend dazu beigetragen
haben, dieses Buch auf einen sehr breiten Leserkreis auszurichten. Dank
gebührt außerdem den Mitarbeitern des IPV-Verlags, vor allem den Herren
Felix Röscheisen und Axel Pretzsch, die mit viel Liebe und Sorgfalt die
Texte zusammengestellt und das Buch produziert haben. Seitens des Markt &
Technik Verlags bedanke ich mich vor allem bei der Redaktion des
64'er-Magazins für die sehr gute und freundschaftliche Zusammenarbeit.

Ich hoffe, daß dieses Buch dem Einsteiger eine gute Hilfe beim Erarbeiten
und zum Verständnis der C 64-Materie und dem Fortgeschrittenen ein
brauchbares Nachschlagewerk ist. Gerne nehme ich Kritik und
Verbesserungsvorschläge entgegen.

München-Solln, im August 1992

Nikolaus M. Heusler




KAPITEL 1: BASIC-PROGRAMMIERHILFEN



Der Detektiv für Basicprogramme: Anleitung zum Basic-Kontroll System (BKS),
Version 5.0

Gleich der erste Beitrag im Buch ist ein Highlight: Ein hervorragendes
Hilfsprogramm prüft Ihre Programme. Fehlerhafte Zeilen werden angezeigt und
auf Wunsch ausgedruckt. Die zweitraubende und schweißtreibende Fehlersuche
in einem Programm wird damit kinderleicht.

Das kurze Maschinenprogramm geht ein im Speicher stehendes Basicprogramm
Zeile für Zeile durch und testet dabei, ob typische Fehler enthalten sind,
die von vielen Leuten gemacht werden, beispielsweise: Klammer zu viel oder
wenig, Syntaxfehler, Formatfehler im Programmtext. Ganz besonders hat es die
Testroutine auf Sprungbefehle abgesehen. Hier werden eigentlich alle
möglichen Fehler gefunden. Dieses Programm wurde von mir als redaktionellem
Mitarbeiter eigentlich entwickelt, um Basic-Leserlistings für das
64'er-Magazin auf ihre Lauffähigkeit zu testen.

Doch das BKS (Basic Kontroll System) ist sicherlich nicht nur für
professionelle Programmtester interessant. Auch der »Privatmensch« kann
durchaus etwas damit anfangen. Beispielsweise ein Einsteiger, der gerne
überprüfen möchte, ob das Basicprogramm, das er gerade geschrieben hat, auch
sicher läuft. Auch der Fortgeschrittene hat etwas davon. Nehmen wir einmal
an, Sie haben ein längeres (vielleicht sogar fremdes) Basicprogramm
vorliegen, das Sie überarbeiten möchten. Sie nehmen hie und da eine Zeile
heraus, fügen dort eine neue ein, und vertauschen einige Programmteile. Doch
was ist, wenn Sie dabei irgendwo einen GOTO-Befehl übersehen haben, der
jetzt auf eine nicht mehr existierende Zeile weist? Das Programm wird
plötzlich aussteigen, wie üblich dann, wenn man es am wenigsten braucht.

Wenn Sie bereits Profi sind, kennen Sie sicher folgende Situation: Sie haben
ein langes und komplexes Basicprogramm geschrieben, das von
Maschinenprogrammen unterstützt wird. Da wird dann eifrig im Speicher
herumgepoket, der Programmierer wirft mit SYS-Befehlen um sich, ein Finger
hat seinen Stammplatz am RESET-Taster. Es ist bereits 2 Uhr nachts. Hopps !
Da haben Sie in der Eile einen falschen POKE-Befehl eingegeben, der das
Basicprogramm angegriffen hat. Oder durch eine ungeschickte Manipulation
wurde der Basic-Endezeiger 45/46 so verändert, daß ein Start des Programmes
den totalen Absturz zur Folge hat. In solch einem Fall lädt man einen
Monitor und versucht, zu retten, was noch zu retten ist. Doch stimmen alle
Zeiger, alle Zeilennummern, alle Sprünge jetzt noch?

In allen diesen Fällen können Sie sich mit dem BKS behelfen. Obwohl das BKS
aus Gründen der Geschwindigkeit und des Komforts vollständig in stark
optimierter Maschinensprache verfaßt wurde, brauchen Sie zur Anwendung
keinerlei Assemblerkenntnisse. Laden Sie die Testroutine mit

LOAD "BKS 5.0 (49152)",8,1

Danach geben Sie bitte NEW ein, um alle Pointer richtigzustellen. Keine
Angst, das Maschinenprogramm wird dabei nicht gelöscht. Es kann jederzeit
mit SYS 49152 gestartet werden, allerdings nur, wenn sich ein Basicprogramm
im Speicher befindet. Sonst wird eine entsprechende Meldung ausgegeben.

Laden Sie nun also das zu testende Basicprogramm. Der Stand des
Basic-Anfangszeigers (43/44) spielt keine Rolle. Starten Sie nun das BKS mit
SYS 49152. Es erscheinen nun einige Fragen, die Sie durch Druck auf die
Taste <J> für Ja oder <N> für Nein beantworten. Zunächst werden Sie gefragt,
ob Spaces bemängelt werden sollen. Manche Programmierer setzen in
Basicprogramme viele Leerzeichen, um sie übersichtlicher zu machen, andere
verschmähen dies. Sollten Sie zu letzteren gehören, können Sie die Frage mit
<J> beantworten, dann wird auch getestet, ob außerhalb von Anführungszeichen
und DATAs überflüssige Spaces auftreten. Wenn in einem Programm allerdings
zu viele Leerzeichen sind, besteht die Liste, die das BKS erzeugt, praktisch
nur noch aus diesem Fehler, und wird unübersichtlich. Schalten Sie den
Fehler dann also besser aus.

Die nächste Frage hat eine ähnliche Funktion. Das BKS kann auf Wunsch auch
Sprünge (RUN, GOTO, GOSUB, THEN) finden, die auf eine REM-Zeile oder eine
Trennzeile, das ist eine Zeile dieser Art:

10 :

weisen. Das kann problematisch werden, wenn das Programm mit einem
»unintelligenten« REM-Killer bearbeitet wird. Auch Listings in einer
Zeitschrift sollten solche Sprünge nicht enthalten, da der eine oder andere
Leser die REM-Zeilen wegläßt und nicht alle Sprünge findet, die er zu
korrigieren hat.

Auch diese Fehlermeldung kann man »ausblenden«, wenn der Fehler allzu oft
auftritt. Drücken Sie dazu die N-Taste.

Die folgende Frage ist wieder so etwas ähnliches. Man kann damit gleich zwei
Fehler auf einmal ausblenden: Den Fehler Nr. 7, der angezeigt wird, wenn ein
Sprungbefehl auf einen Strukturierbefehl zeigt, den man auch anstelle des
Sprungbefehles hätte setzen können. Beispiel:

10 A = 4 : GOTO 20
20 RETURN

kann man auch einfacher so schreiben:

10 A = 4 : RETURN

Der zweite Fehler, der von diesem »Schalter« betroffen ist, ist der Fehler
Nr. 17. Er wird gemeldet, wenn der Programmierer direkt hinter das
Befehlswort THEN einen GOTO Befehl gesetzt hat (anstelle THEN GOTO 12
schreibt man kürzer THEN 12). Da beides aber Schönheitsfehler sind, kann man
sie, wenn sie zu häufig auftreten, beide zusammen ausblenden, indem die
Frage mit <J> beantwortet wird.

Die letzte der vier »Ausblendfragen« betrifft gleich drei Fehler: Wie Sie
aus der Liste ersehen können, betreffen diese Fehler 12, 13 und 14
Befehlswörter, die ein geübter Programmierer nicht verwendet: LET, NEW und
STOP. LET kann man sich sowieso sparen, und NEW und STOP gehören nicht in
ein gutes Basicprogramm. Falls der Bediener des BKS anderer Meinung ist,
kann er die Ausgabe der drei Fehler unterdrücken, indem er die Frage mit <N>
beantwortet.

Als nächstes werden Sie gefragt, ob die fehlerhaften Zeilen auch gelistet
werden sollen, oder ob die Ausgabe der Zeilennummer genügt. Beantworten Sie
auch diese Frage wieder mit <J> oder <N>.

Die letzte Frage dient dazu, festzulegen, auf welches Gerät die Fehlerliste
ausgegeben werden soll. Drücken Sie eine der Tasten <D>, <S> oder <F>:

 S: Die Fehlerliste wird auf dem Bildschirm ausgegeben. Dieser Modus ist vor
allem bei sehr kurzen Programmen angebracht, und zum Test, ob die
ausblendbaren Fehler (siehe oben) zu oft vorkommen.

 D: Die Liste wird auf dem Drucker ausgegeben. Die Geräteadresse ist 4, die
Sekundäradresse 0. Die Routine wurde für Commodore-kompatible Drucker
geschrieben, müßte jedoch auch mit anderen Printern zusammenarbeiten. Diesen
Ausgabemodus braucht man, wenn die Fehlerliste schriftlich vorliegen soll,
beispielsweise beim Test von Leserlistings. Da die selbe Routine wie zur
Bildschirmausgabe verwendet wird, ist die Ausgabe nicht breiter als 40
Zeichen.

Sollten die eckigen Klammern, in denen der Härtecode erscheint (siehe
unten), auf Ihrem Drucker nicht oder fehlerhaft (z.B. als deutsche Umlaute)
wiedergegeben werden, beachten Sie bitte die untenstehenden Hinweise.

 F: Listet die Aufstellung auf Diskette. Dabei wird auf der (eingelegten)
Floppy ein Basicprogramm mit dem Namen erzeugt, den Sie nun eingeben. Er
beginnt gewöhnlich mit der Kennung »DOC.« für DOCument, diese kann durch
Eingabe von <Cursor left> jedoch überschrieben werden (Vorsicht! Den Cursor
nicht weiter links als auf das »D« bewegen!). Dieses File kann dann wie ein
normales Basicprogramm geladen werden, ansehen können Sie sich die
Auswertung durch Eingabe von LIST oder RUN (frei nach Wahl).

Nach der Eingabe dieser Parameter geht das BKS das Basicprogramm nun Zeile
für Zeile durch und überprüft, ob es Fehler enthält. Bei jeder neuen Zeile
wechselt der Bildschirmrahmen seine Farbe, so erkennen Sie, wenn es länger
dauert, daß die Routine nicht abgestürzt ist (das BKS ist so programmiert,
daß es nicht abstürzen KANN). Am Ende des Tests werden alle Dateien
geschlossen und das BKS beendet.

Jedesmal, wenn ein Fehler auftritt, wird eine Zeile mit folgendem Format
ausgegeben (auf Schirm, Drucker oder Diskette):

AAAAA: BB[C] blablablabla

AAAAA ist die Basic-Zeilennummer, in der der Fehler auftritt. Sie wird
rechtsbündig ausgegeben. BB ist die laufende Nummer des Fehlers, siehe dazu
die untenstehende Tabelle.

Es gibt zwei verschiedene Fehlergrade, die C angibt: leichte Fehler, die
eigentlich nur Schönheitsfehler sind und keine Fehlfunktion des Programmes
bewirken. C ist bei diesen Fehlern 1. Beispiele: überflüssige Spaces,
Listschutz, LET-Befehl. Anders ist es bei den schweren Fehlern (C=2): Hier
wird sich das Programm mit einer Basic-Fehlermeldung verabschieden,
beispielsweise, wenn Sprungbefehle auftreten, die auf nicht vorhandene
Zeilen zeigen, wenn das Programm formal zerstört ist (POKEs) oder bei
Syntaxfehlern.

Der hier mit »blablablabla« bezeichnete Teil stellt einen Pauschaltext dar,
der ungefähr die Art des Fehlers angibt. Die möglichen Texte sind:
»FORMATFEHLER«, »SPRUNGFEHLER«, »ÜBERFLÜSSIGER BEFEHL« und »UNERLAUBTER
BEFEHL«.

Da dieser Pauschaltext nicht genau die Art des Fehlers angibt, ist der
Parameter BB besonders wichtig: Er kann 28 verschiedene Werte annehmen: (in
Klammern der Härtecode, Parameter C)

 1 {1} Direkt nach der Zeilennummer folgt ein Nullbyte (dies wird zu
Listschutzzwecken verwendet).
 2 {1} Im Programmtext kommt ein überflüssiges Leerzeichen vor. Nach DATA,
in Anführungszeichen oder wenn diese Funktion abgeschaltet ist, werden die
Spaces nicht bemängelt.
 3 {2} Ein THEN, GOTO, LIST, RUN oder GOSUB Befehl zeigt auf eine nicht
existierende Zeile (UNDEF'D STATEMENT)
 4 {2} Die hinter einem dieser Befehle stehende Zeilennummer ist größer als
63999.
 5 {2} Die hinter einem dieser Befehle stehende Zeilennummer enthält
verbotene Zeichen (etwa GOTO 4+6 oder GOTO LABEL). PASCAL gewohnte
Programmierer werden diese Funktion des BKS zu schätzen wissen.
 6 {2} Eine Basic-Zeile ist länger als 255 Zeichen (Fehler von der
Suchroutine).
 7 {1} Ein GOTO oder THEN Befehl zeigt auf einen RETURN, GOTO, RUN usw.
Befehl (Strukturierbefehl), den man auch einfach anstelle des
Sprungbefehles hätte setzen können.
 8 {1} Ein Sprungbefehl zeigt auf eine REM- oder Trennzeile (das ist eine
Zeile, die nur einen Doppelpunkt enthält). Das kann zu Problemen beim
Abtippen führen, wenn die REM Zeile weggelassen wird. Falls in einem
Listing dieser Fehler zu oft vorkommt, kann auch die Ausgabe dieses Fehlers
abgeschaltet werden.
 9 {2} Eine Basic-Zeile ist länger als 255 Zeichen (Fehler von der
Hauptroutine). Wenn dieser Fehler auftritt, dürfen eventuelle sonstige
Fehler nicht mehr unbedingt ernstgenommen werden, da dann das System
vollkommen durcheinandergerät.
10 {2} Ein GOTO oder RUN-Befehl zeigt auf sich selbst (nicht hinter THEN;
Beispiel: 10 GOTO 10)
11 {2} Der Befehl CONT darf nicht im Programmtext vorkommen.
12 {1} Der Befehl STOP sollte nicht im Programmtext vorkommen.
13 {1} Der Befehl NEW sollte nicht im Programmtext vorkommen.
14 {1} Der Befehl LET sollte nicht im Programmtext vorkommen.
15 {1} Hinter einem REM Befehl steht ein geshiftetes L (Listschutz).
16 {2} Ein illegales Token (Zeichen, Byte) kommt im Programmtext vor.
17 {1} Der Befehl GOTO sollte nicht direkt hinter THEN stehen, einer von
beiden genügt.
18 {2} Hinter einem Befehl fehlt der Parameter (z.B. OPEN).
19 {2} Hinter GO fehlt TO.
20 {1} Hinter GOTO, RUN etc folgen weitere Befehle, die niemals ausgeführt
werden (z.B. GOTO 20:PRINT "GEISTERBAHN")
21 {2} Klammer(n) zu viel bzw. wenig.
22 {1} Das Zeichen »^« (Pfeil nach oben) zur Potenzierung sollte vermieden
werden (große Rechenungenauigkeit).
23 {2} Der Befehl PRINT# wurde mit ?# abgekürzt. (SYNTAX ERROR)
24 {2} Falsche Reihenfolge der Basiczeilen. Das kann zu Problemen bei
Sprungbefehlen führen.
25 {2} Ein falscher Linkpointer kommt im Programmtext vor. (Vor jeder
Basic-Zeile steht im Speicher ein Zeiger, der angibt, wo im Speicher die
nächste Zeile beginnt. Anhand dieser Zeiger »hangeln« sich u.a. die
Sprungbefehle zur gesuchten Zeile.)
26 {2} ON ohne legalen Sprungbefehl.
27 {2} THEN ohne IF.
28 {1} Der Pointer 45/46 zeigt nicht genau auf das Byte hinter dem Basic
Programm. Wahrscheinlich ist noch ein Maschinenprogramm angehängt, oder es
wurde ein fehlerhafter RENEW-Befehl verwendet.

Die Fehler 6 und 9 unterscheiden sich in ihrer Bedeutung nicht und werden
ggf. immer paarweise erscheinen. Diese Meldungen werden innerhalb des BKS an
zwei verschiedenen Stellen erzeugt: Nummer 6 in dem Unterprogramm, welches
bei Sprungbefehlen die Existenz der angesprochenen Zeile überprüft, und
Nummer 9 in der Hauptroutine, die das Basicprogramm Befehl für Befehl
durchgeht und nach Fehlern sucht. Die »Fehler«-Meldungen Nr. 11 (CONT) und
Nr. 5 (GOTO 4+6) wurden ebenso wie zum Beispiel Nr. 22 oder Nr. 12 nur der
Vollständigkeit halber in das BKS aufgenommen. Sie bezeichnen keine schweren
Fehler, insofern ist der Härtecode 2 hier prinzipiell übertrieben.

Die eckigen Klammern, in denen der Härtecode erscheint, können auf dem
Drucker nur dann richtig wiedergegeben werden, wenn Sie ihn vom deutschen in
den amerikanischen Zeichensatz schalten (bei MPS-Druckern nicht nötig).
Sollten hier falschen Zeichen ausgegeben werden, und gelingt Ihnen die
Anpassung nicht, können Sie den Code auch direkt im Programm ändern,
beispielsweise in runde Klammern. Die entsprechenden Speicherzellen sind
$ca4e und $ca5f.

Wie funktioniert das BKS intern? Für eine genaue Funktionsbeschreibung
reicht hier leider der Platz nicht aus. Der interessierte Leser erhält
jedoch vom Autor gegen Einsendung einer Diskette und einer Gebühr von DM
10,- gern den kompletten Quelltext (gilt für alle Programme!). Die Adresse
finden Sie in dem im folgenden beschriebenen Programm »BKS.WHAT«.

Dabei handelt es sich um ein wichtiges Zusatzprogramm zum BKS, mit dem die
ausgegebenen Listen genau kommentiert werden. Die Anwendung ist einfach:
Laden Sie wie oben beschrieben das BKS, dann das zu testende Programm.
Führen Sie den Test durch, und lassen Sie sich die Referenz auf den Drucker
ausgeben. Danach laden Sie, ohne vorher den Computer auszuschalten, das
Programm "BKS.WHAT 5.0" und starten es mit RUN. Sofern vorher eine
Auswertung mit dem BKS durchgeführt wurde, erscheint jetzt die Frage nach
dem Datum und dem Namen des getesteten Basicprogrammes. Alle anderen Angaben
hat das BKS dem Kommentierprogramm bereits übergeben (im »Common-Bereich«,
siehe Speicherbelegung). Nach kurzer Zeit wird jetzt ein ausführlicher
Kommentar auf den Drucker ausgegeben, und zwar diesmal über die
Sekundäradresse 7 (Groß-/Kleinschriftmodus). Darin enthalten ist eine
kommentierte Liste ähnlich der oben abgedruckten, die Auskunft über die
genaue Bedeutung der aufgetretenen Fehler gibt (siehe Beispielausdruck). Das
Druckprogramm wurde für MPS-Drucker geschrieben, und enthält einige
Steuercodes dieser Drucker.

Ich wünsche Ihnen nun noch viel Erfolg mit dem BKS!

ANHANG:

Speicherbelegung des BKS (Version 5.0, hexadezimal):
0002-0003 temporär (u.a. Zeiger auf Programm)
0334-0344 Filename
C000-CCDD Programm »BKS«
C000-C002 Sprung nach $C687 (Anfang)
C003-C239 verschiedene Texte (gepackt)
C23A-C23B Nummer der gesuchten Basic Zeile für $C37C
C23C      Flag
C23D      Flag: Anführungszeichenmodus
C23E      Flag: REM
C23F-C240 Nummer der aktuellen Zeile
C241      Position in dieser Zeile
C242      Nummer des Fehlers
C243-C246 Integerzahlen für Multiplikation mit 10
C247      aktuelles Token
C248      aktuelle Zeigerposition
C249      Anzahl der Klammerebenen
C24A      Anzahl der Ziffern hinter Sprungbefehl
C24B      Flag: THEN
C24C      Flag: ON
C24D      Geräteadresse für Ausgabe (3, 4, 8)
C24E      Low-Byte der Anzahl der leichten Fehler
C24F      Low-Byte der Anzahl der schweren Fehler
C250      High-Byte der Anzahl der leichten Fehler
C251      High-Byte der Anzahl der schweren Fehler
C252      Flag: DATA
C253      letzter Zustand von $C252
C254      Sekundäradresse für Ausgabe
C255      Hochkommaflag für Listroutine
C256      Flag: Basic Zeilen listen
C257      Pointer für Listroutine
C258      »First«-zeiger
C259-C25A letzte Fehlerzeilennummer
C25B      temporär
C25C      wie $C248
C25D      Flag: ON/Hochkomma
C25E      wie $C248
C25F      letztes Zeichen
C260-C27D Tokentabellen
C27E-C2C1 Texte der Fehler
C2C2-C2F9 Zeiger auf diese Texte
C2FA-C315 Härtecodes der Fehler (AscII)
C316-C37B Vorspann für erzeugtes Basicprogramm
C37C-CCDD 100% Maschinenprogramm. Interessante Routinen:
C37C      Sucht die Zeile (X/Y)
C4DE      Entschlüsselt Text ab (A/Y) und gibt ihn aus
C562      Holt nächstes Zeichen aus Basic Text
C56F      Holt Parameter
C584      Holt Tasten J/N
C687      Anfang des Hauptprogrammes
C6D9      Schleife: Neue Basic Zeile
C710      Hauptschleife: Nächstes Zeichen
C77A      Nächstes Zeichen
CA0D      REM-Routine
CA19      Unterroutinen zu $CACE
CACE      Gibt Fehlermeldung Nr. X aus
CBE0      fertig
CC5D      Holt Zahl hinter Sprungebefehl
CE00-CEFF Puffer für Listroutine
CF00-CFFF "Common-Bereich" (hier werden die Ergebnisse des BKS an BKS.WHAT
          übergeben)
CF00-CF04 Erkennungstext »NSS88«
CF05      Versionsnummer primär   (=5)
CF06      Versionsnummer sekundär (=0)
CF07      Flag: Fehler Nr. 2     ausgekoppelt (0 = ja)
CF08      Flag: Fehler Nr. 8     ausgekoppelt (0 = ja)
CF09      Identifikationsbyte (123 = BKS läuft, 222 = BKS fertig)
CF0A      Flag: Fehler Nr. 7/17  ausgekoppelt (0 = ja)
CF0B      Flag: Fehler Nr. 12-14 ausgekoppelt (0 = ja)
CF0C-CF27 Tabelle aller 28 Fehler (1 = tritt auf)







Anleitung zum Programm »HELP«:

Dieses Programm ist vor allem für Basic-Einsteiger gedacht, die oft vor dem
Bildschirm sitzen und sich wundern, was der Commodore 64 doch alles für
Fehlermeldungen erzeugen kann, die er selbst nicht einmal aus dem Handbuch
kennt. Wie schön wäre es doch, wenn der Computer auf Anforderung die soeben
gezeigte Meldung kurz mal erklären könnte.

Genau dies ist mit dem Programm »HELP« in Zukunft problemlos möglich. Laden
Sie das Programm mit dem Befehl

LOAD "HELP !!",8

und starten durch Eingabe von RUN. Es wird nun noch ein Maschinenprogramm
nachgeladen und gestartet. Ab jetzt haben Sie die Möglichkeit, nach jeder
Fehlermeldung, die der Computer ausgibt (vom einfachen SYNTAX ERROR über den
TYPE MISMATCH ERROR oder ILLEGAL DIRECT ERROR bis hin zum unverständlichen
FORMULA TOO COMPLEX ERROR) einfach den neuen Befehl

HELP

einzugeben (und <RETURN>), und schon erklärt der Computer in ein paar Zeilen
auf Deutsch, was der Grund für diese Fehlermeldung sein könnte. Der
HELP-Befehl soll nur im Direktmodus und direkt nach der Ausgabe der Meldung,
nicht erst nach dem nächsten (möglicherweise ja wieder korrekten) Befehl
verwendet werden.

Nach einem <RESET> oder versehentlichen Abschalten der Erweiterung durch ein
anderes Programm kann HELP, so es sich noch im Speicher befindet, mit

SYS 29952

wieder gestartet werden.

Dieses kleine Hilfsprogramm (der Hauptteil des Nachladeprogrammes wird von
den erklärenden Texten belegt) ist sicher eine nützliche Hilfe beim
Programmieren, die vor allem Einsteiger sehr bald schätzen werden.





HIlfe - die Datas kommen!

Dieses »clevere« Utility ist vor allem dann praktisch, wenn Sie mit DATAs
arbeiten. Es baut einige neue Befehle in den C 64 ein, die beim
Programmieren oder Eintippen von DATAs nützlich sind. Obwohl es vollkommen
in Maschinensprache geschrieben ist, müssen Sie nicht in Maschinensprache
programmieren können, um es anzuwenden.

Zahlen in einer FOR..NEXT-Schleife mit READ aus DATA-Zeilen zu lesen und
diese dann in den Speicher zu POKEn ist die am häufigsten angewandte
Methode, zum Beispiel ein Assemblerprogramm oder Sprite-Daten in den
Speicher zu laden. »DATA-Aid« kann Ihnen in vielfältiger Hinsicht helfen,
wenn Sie es mit DATA-Daten zu tun haben.

Sie laden dieses in Maschinensprache verfaßte Utility wie ein Basicprogramm
mit

LOAD "DATA AID",8

und starten mit

RUN

Jetzt wird automatisch eine Routine in einen vor Basic geschützten Bereich
kopiert und die Erweiterung installiert. Der Bildschirm färbt sich grün und
eine Meldung erscheint. Jetzt wurden fünf neue Befehle ins Basic eingebaut.
Diese können wie normale Basicbefehle verwendet werden, im Programm- oder
Direktmodus. Das Ausrufezeichen dient als Kennzeichen dafür, daß ein neuer
Befehl folgt.

Wenn Sie jetzt gleich mit DATA-AID arbeiten möchten, sollten Sie zunächst
mit

NEW

den Basicspeicher löschen, da hier ja noch die SYS-Zeile zum Start von
DATA-AID steht. Und das sind die neuen Kommandos:

!R - Restore. Dieser Befehl setzt den DATA-Zeiger auf eine bestimmte
Programmzeile. !R wirkt also wie RESTORE, nur daß nicht auf den Anfang des
Programmes gesetzt wird, sondern bei

!R 100

zum Beispiel auf die DATA-Zeile 100 (falls es diese gibt, sonst auf die
nächste DATA-Zeile). Sie können, ähnlich wie beim RENUMBER n Befehl des C
128, nicht nur Zahlen, sondern beliebige numerische Ausdrücke hinter !R
verwenden, also zum Beispiel auch

!R 9*X+40-PEEK(3)

Der nächste Befehl heißt

!S - Speed Poke. Dieser Befehl tranportiert sehr schnell Zahlen aus
DATA-Zeilen in den Speicher. Der Befehl lautet genau:

!S Zeilennummer, Speicherstelle

Also schafft zum Beispiel

!S 100,8192

alle Zahlen, die in den DATA-Zeilen 100ff abgelegt sind, ab 8192 in den
Speicher. Der Vorgang endet, wenn eine negative Zahl gelesen wird. Beispiel:
Dieses Programm schreibt DATA-AID rechts oben auf den Bildschirm:

10 !S20,1024
20 DATA68,65,84,65,45,65,73,68,-1
30 !S40,55296
40 DATA1,1,1,1,1,1,1,1,-1
50 END

Diese Methode arbeitet über viermal so schnell wie die bekannte Befehlsfolge

10 READA:IFA<0THENRETURN
20 POKEM,A:M=M+1:GOTO10

!S kann in Programmen oder im Direktmodus verwendet werden. Verwenden Sie
diesen Befehl nur, wenn die gelesenen DATA-Zeilen nur Werte von 0 bis 255
enthalten, andernfalls erhalten Sie eine Fehlermeldung. Haben Sie die
negative Zahl am Ende vergessen, erscheint der normale ?OUT OF DATA ERROR.
Dieser negative Wert wird natürlich nicht in den Speicher geschrieben, er
markiert nur das Ende der Liste. Übrigens brauchen Sie gar keine echte
negative Zahl zu setzen, es reicht im Prinzip das Minuszeichen.

!C - Check. Dieser Befehl arbeitet grundsätzlich wie !S, allerdings werden
die Werte nicht in den Speicher geschrieben, sondern einfach addiert. Die
»Prüfsumme« wird ausgegeben. So können Sie testen, ob die Werte in Ordnung
sind. Daher entfällt hier auch die Angabe der Speicherzelle, der Befehl
lautet also zum Beispiel !C 100, wenn die DATA-Zeilen ab 100 summiert werden
sollen. Hier können auch positive Zahlen über 255 verwendet werden. Der
Computer gibt die Summe in Form einer Meldung DIE PRUEFSUMME IST XXXXX aus.

!D - DATA-Zeilen erzeugen. Benutzen Sie diesen Befehl, wenn schon Daten im
Speicher stehen, und Sie diese in DATA-Zeilen verwandeln wollen. Dieser
Befehl hat folgende Syntax:

!D ADR1,ADR2+1,ZEIL,ANZ,STEP

Dabei gibt ADR1 und ADR2 den Speicherbereich an (bitte denken Sie daran: Die
Endadresse ADR2 muß um eins erhöht angegeben werden), ZEIL ist die erste
Zeilennummer, die dann im Schritt STEP erhöht wird (z.B. 10). Dabei werden
ANZ DATAs pro Zeile untergebracht. ANZ ist aus dem Bereich von 1 bis 19. So
wandelt zum Beispiel der Befehl

!D 52525,53248,2000,19,1

das Programm DATA-Aid (52525 bis 53247) in DATA-Zeilen ab 2000 in der
Schrittweite 1, es werden 19 DATAs pro Zeile ausgegeben.

Die mit diesem Kommando erzeugten Zeilen könnten dann zum Beispiel mit einem
Speed-Poke (!S) wieder eingelesen werden. Bedenken Sie aber bei Verwendung
von !D, daß die DATA-Zeilen etwa viermal so viel Speicherplatz belegen wie
der ursprüngliche Speicherbereich. Wenn ein ?OUT OF MEMORY ERROR zu sehen
ist, müssen Sie den Rechner aus- und wieder einschalten, damit Sie
weiterarbeiten können. Auch wenn der Befehl !D besonders bei größeren
Speicherbereichen einige Zeit in Anspruch nimmt, während der sich der
Computer nicht zurückmeldet (am Ende erscheint dann READY.), dürfen Sie den
Vorgang auf keinen Fall mit <RUN STOP/RESTORE> abbrechen. Die neuen
DATA-Zeilen werden übrigens einfach an der korrekten Stelle in ein ggf.
schon bestehendes Basicprogramm eingefügt, also als ob Sie sie neu über
Tastatur eingegeben hätten. Bereits bestehende Basiczeilen mit gleichen
Nummern wie die neuen DATA-Zeilen werden überschrieben. !D ist in erster
Linie für die Verwendung im Direktmodus geschaffen, kann aber auch vom
Programm aus verwendet werden. Nach der Ausführung befinden Sie sich
allerdings auf alle Fälle im Direktmodus.

!Z - Exit. Dieser Befehl schaltet die Erweiterung ab. Dies sollten Sie tun,
wenn Sie andere Erweiterungen verwenden wollen, die den selben
Speicherbereich belegen oder ebenfalls neue Befehle definieren. Sofern sich
DATA-Aid noch im Speicher befinden, kann es mit

SYS 52525

(leicht zu merken) jederzeit wieder aktiviert werden.

Eine Bemerkung noch zu den neuen Befehlen: Werden sie direkt hinter THEN
verwendet, müssen Sie sie mit einem Doppelpunkt abtrennen, also zum Beispiel
so:

IF A > 40 THEN : !R A*10

Wenn Sie DATA-AID testen wollen, schreiben Sie einfach große Teile des
Bildschirms mit beliebigem Text voll. Diesen Screen wollen wir in DATAs im
Programm festhalten. Dazu geben Sie jetzt die Befehle

NEW

!D 1024,2024,2000,19,2

ein und gedulden sich einige Sekunden. Nach Erscheinen der READY.-Meldung
geben Sie LIST ein, um das Ergebnis zu begutachten: Scheinbar endlose
Kolonnen von DATA-Zeilen, beginnend bei Zeile 1000. Fügen Sie selbst noch
die Zeile hinzu:

9999 DATA-1

Jetzt löschen Sie den Bildschirm und holen den Inhalt wieder zurück,
natürlich mit Speed-Poke:

!S 2000,1024

erledigt das für uns. Anmerkung: Auf älteren Modellen des C 64 ist der
Bildschirminhalt noch nicht sichtbar, da die Textzeichen die Farbe des
Hintergrundes haben. Um sie sichtbar zu machen, verändern Sie einfach
nachträglich die Farbe des Hintergrundes. Ist der Bildschirm momentan zum
Beispiel nicht weiß, machen Sie ihn mit

POKE 53281,1

weiß.

Nun für den interessierten Leser noch eine kurze Beschreibung der
programminternen Funktionsweise: DATA-Aid liegt im Speicherbereich 52525 bis
53247 ($CD2D-$CFFF). In der Zeropage werden die sonst unbenutzten Zellen 2
bis 5, 166/7, 181/2, 251-3 und 704-8 verwendet. Die neuen Befehle werden
definiert, indem der IGONE-Vektor (776/7) auf eine neue Routine verbogen
wird, die das Ausrufezeichen sucht.

Der !R Befehl berechnet die Adresse der angegebenen Zeilennummer (Routine ab
$A613) und verbiegt den DATA-Vektor (65/66) auf die Adresse. Die Befehle !S
und !C rufen vor ihrer eigentlichen Arbeit !R auf, um die richtige
DATA-Zeile »anzufahren«. Der Basic-Pointer 122/3 wird auf den Stack gerettet
und auf die Adresse der ersten DATA-Zeile verbogen. Der C 64 sucht das
Befehlstoken 131 (DATA) und setzt den Zeiger dahinter, auf den ersten
DATA-Wert. Nun können mit den normalen FRMNUM-Routinen ($AD8A, $B79E) die
Werte gelesen und in den Speicher geschrieben bzw. addiert werden. Die
Addition bei !C geschieht mit Hilfe der Floatingpoint-Arithmetik, dabei wird
der FAC immer wieder bei 704-708 zwischengespeichert.

Der Befehl !D verbiegt den Vektor zur Eingabe einer Basiczeile (770/1) auf
eine eigene Routine. Ab $A480 springt der Computer über diesen Vektor. Er
arbeitet nun nicht die Routine ab $A560 ab, die von Tastatur eine Zeile in
den Basic-Eingabepuffer ab 512 holt, sondern eine DATA-AID-Routine, die auch
im Basic-Eingabepuffer eine Zeile der Form Zeilennummer, DATA, Werte durch
Kommata getrennt aufbaut. Diese Zeile wird dann der normalen Routine ab
$A486 übergeben, diese wertet die Zeile aus und baut sie in das
Basicprogramm ein.

Wir wünschen Ihnen viel Spaß und Erfolg mit DATA-AID. Genießen Sie die
Vorzüge und den Komfort, den Ihnen dieses kurze und neuartige durchdachte
Tool bietet!





TI und TI$ greifen auf die CIA-Uhr zu

Sinn und Zweck der Routine »TI$« ist, die Arbeitsweise der reservierten
Basic-Variablen TI und TI$ zu ändern. Bisher wird der
System-Interrupt-Zähler abgefragt bzw. gesetzt, wenn man mit TI oder TI$
arbeitet. Da dieser sehr ungenau ist (Abweichungen bis zu einer halben
Stunde per Tag sind keine Seltenheit) und bei Ein/Ausgabe sogar angehalten
wird, bietet es sich an, stattdessen die Echtzeituhr einer CIA zu verwenden.
Genau das erfolgt mit der nur wenige Bytes kurzen Routine TI$. Wurde sie
erst einmal mit

LOAD "TI$",8
RUN

aktiviert, baut das Programm intern die TI$ und TI um. Die Funktionen sind
voll kompatibel zur Originalversion (eine Ausnahme gibt's, siehe unten).
Bevor Sie TI$ oder TI abfragen können, muß allerdings erst eine Uhrzeit
gesetzt werden, da die Uhr sonst noch steht. Dazu verwenden Sie den normalen
Befehl

TI$ = "HHMMSS"

Drei Zugriffsarten sind erlaubt. TI$ kann sowohl gelesen wie auch
geschrieben werden, und TI kann nur gelesen werden. Dies entspricht dem
Original-System. Eine Zuweisung wie

TI = 12345

führt zur Fehlermeldung

?CAN'T DEFINE ERROR

die neu eingeführt wurde. Wichtiger Hinweis: Soll eine Zuweisung der Form
TI$=... direkt nach THEN erfolgen, muß nach THEN ein Doppelpunkt stehen.
Also nicht

IF A = 10 THEN TI$ = "230000"

sondern

IF A = 10 THEN : TI$ = "230000"

Dies ist die einzige Änderung zum Originalsystem. Vergessen Sie den
Doppelpunkt, wandert die Neueinstellung ins Nirwana (sog. »Ablage P«).
Ansonsten können Sie mit TI$ und TI operieren, wie Sie es gewohnt sind. Im
Direkt- oder Programm-Modus. Also auch als Bestandteile eines Terms
(MID$(TI$,3,2) ermittelt die Minuten). Nur daß eben nicht die Systemuhr,
sondern die Uhr der CIA 1 ($DC00) Verwendung findet. Obwohl die Uhr der CIA
eine Genauigkeit von einer Zehntelsekunde hat, erscheint bei TI$ nach wie
vor nur ein String mit sechs Zeichen, um die Kompatibilität zu wahren. Die
1/10 Sekunden kann der interessierte Anwender über TI ermitteln. TI hat
jetzt natürlich nur noch eine Auflösung von 1/10 Sekunde, gibt aber -
Kompatibilität - dennoch nach wie vorher die Zeit in 1/60 Sekunden an (der
Wert von TI ist demnach immer ein Vielfaches von 6). Änderungen an TI$
bewirken automatisch Änderungen an TI. Die Zuweisung TI$ = ... kann auch
nach LET stehen. Die Variable TI% kann weiterhin als »stinknormale«
Integer-Basicvariable Verwendung finden, die nichts mit der Uhrzeit zu tun
hat. Nach TI können aber auch beliebig weitere Buchstaben oder Ziffern
folgen, wie es sich für einen Variablennamen gehört (also TIME$="123456"
oder PRINT TIIII/60 "SEKUNDEN"). Außerdem arbeitet natürlich auch unsere
neue TI$-Version mit einer 24-Stunden Uhr, obwohl die CIA-Uhr eigentlich nur
12 Stunden (AM/PM-Flag) läuft. Umrechnungsroutinen sind enthalten. Wie Sie
sehen, steckt viel Liebe im Detail dieser Erweiterung. Das alles, um die
Routine voll kompatibel zu machen. Selbstverständlich wird die CIA-Uhr vor
dem Betrieb auf 50 Hertz geschaltet, sonst würde unsere Uhr, die ihren Takt
aus der Netzfrequenz bezieht, grob falsch gehen.

Eine zweite neue Fehlermeldung gibt es noch:

?TIME FORMAT ERROR

erscheint immer dann, wenn der String, der an TI$ übergeben wird, keine
vernünftige Uhrzeit enthält. Mögliche U(h)rsachen: Länge ungleich 6 Bytes,
enthält nicht nur Ziffern, Minuten oder Sekunden größer 59, Stunden größer
23.

Die Routine kann auch wieder abgeschaltet werden, dazu geben Sie einfach

SYS 58451

ein. Wiedereinschalten ist, ggf. auch nach einem Reset, mit

SYS 49152

wieder möglich.

Die Funktionsweise ist einfach zu verstehen. Für diejenigen, die das
interessiert, wurde das Assemblerlisting (Profi-Ass Format) sehr gut
kommentiert. Daher sollen hier nur allgemeine Hinweise stehen. Der Computer
verbiegt die Vektoren zur Ausführung eines Basic-Befehles und zur Auswertung
eines Basic-Arguments auf neue Routinen. Die neue Befehlsroutine (Label
NEUBEF) prüft, ob eine Zuweisung an die Variable TI$ erfolgt (bei TI=...
wird die Fehlermeldung ausgegeben). Wenn ja, wertet der C 64 den String aus,
berechnet die Uhrzeit und schreibt sie in die Register der CIA. Die
Zehntelsekunden werden auf Null gesetzt. Als »Bonbon« erkennt die Routine
auch eine Zuweisung der Form

LET TI$ = "123456"

und bearbeitet sie korrekt. Andere Variablen als TI und TI$ werden normal in
der alten Routine bearbeitet.

Die neue Routine zur Auswertung eines Terms prüft auf Vorliegen von TI oder
TI$. TI% wird von der alten Routine bearbeitet. In beiden Fällen wird jetzt
erst einmal die Uhr der CIA 1 ausgelesen und in einen sechs Bytes langen
String HHMMSS ab Adresse 255 codiert. Die Zehntelsekunden werden für TI
separat erfaßt. Bei TI$ ist die Arbeit schon getan, der String wird
zurückgegeben. Dazu dient eine Unterroutine von STR$. Bei TI wird's jetzt
sehr kompliziert. Die einzelnen Stellen von TI$ werden von links kaskadisch
mit Vielfachen von 60 multipliziert und addiert. Dadurch kommt die Uhrzeit
in Sekunden zustande, allerdings ohne Zehntelsekunden. Das Ergebnis
multiplizieren wir noch einmal mit 60 und addieren die Zehntelsekunden mal 6
dazu. Das Ergebnis ist TI, die Zeit in 1/60 Sekunden mit einer Genauigkeit
von 1/10 Sekunde.

Die neue Routine benutzt fünf normalerweise unbenutzte Speicherzellen zur
Datenspeicherung: 155 und 247 bis 250. Das Programm liegt im Bereich von
49152 bis 49799 jeweils einschließlich. Weiterer Speicher wird nicht belegt.
Im Maschinenprogramm muß an zwei Stellen im Dezimalmodus gerechnet werden
(SED). Davor wird jeweils der Interrupt ausgeblendet, damit der Rechner
nicht abstürzt, wenn der Controller bei gesetztem D-Flag den IRQ auslöst
(wird von vielen Programmierern, auch denen des 1541-Systems, falsch
gemacht).

Sollte es die spezielle Anwendung erfordern, kann das Programm leicht auf
die Uhr der CIA 2 umgestellt werden. Dazu ändern Sie im Quelltext in Zeile
130 das Label CIA von $DC00 in $DD00.

Nun bleibt noch eine Frage. Sie haben ja gar keinen Beweis, daß der Computer
mit der neuen Routine tatsächlich nicht mehr auf die Systemzeit zugreift,
sondern auf die Uhr der CIA. Die Wirkung ist ja haargenau die selbe. Dazu
können Sie mit einem Programm, das die CIA-Zeit am Bildschirm einblendet,
Kontrollen vornehmen (Beispiel: »Superinfoirq«).





Anleitung zum »REM-KILLER ++«

Dieser besondere REM-Killer unterscheidet sich wesentlich von herkömmlichen
Programmen dieser Art. Während solche Tools (z.B. Trick des Monats in 64'er
01/90) gewöhnlich nur die REM-Zeilen aus einem Basicprogramm entfernen,
denkt dieses Tool mit und verändert auch zum Beispiel die GOTO-Befehle im
übrigen Programm so, daß es hinterher immer noch läuft. Obwohl dieses
Hilfsprogramm aus Geschwindigkeits- und Komfortgründen vollkommen in
Maschinensprache geschrieben ist, kann es wie ein Basicprogramm geladen und
gestartet werden. Es installiert sich dann im Speicher und wartet darauf,
mit einer besonderen Tastenkombination aktiviert zu werden.

Zum Beispiel vorher:
10 PROGRAMMTEIL 1
20 IF A = 5 GOTO 40
30 END
40 REM ALTERNATIVE
50 PRINT "..."
60 STOP:REM DAS ENDE

Nach der Behandlung mit dem neuartigen REM-Killer sind nicht nur die
REM-Zeile 40, die ja nur unnötig Speicherplatz kostet, und der REM-Befehl in
Zeile 60 verschwunden, sondern es wurde auch gleich der »verkappte«
GOTO-Befehl in Zeile 20 so verändert, daß die Wirkung nachher die gleiche
ist:

10 PROGRAMMTEIL 1
20 IF A = 5 GOTO 50
30 END
50 PRINT "..."
60 STOP

Ohne die Änderung der Zeile 20 hätte sonst ein ?UNDEF'D STATEMENT ERROR IN
20 auftreten können, da der GOTO-Befehl auf eine nicht mehr existierende
Zeile gewiesen hätte.

Die Anwendung ist ganz einfach: Laden Sie zunächst das Tool mit dem Befehl

LOAD "REM-KILLER++",8
RUN

Es erscheint eine Einschaltmeldung. Dann laden Sie das Basicprogramm ganz
normal, das gekürzt werden soll. Der Basicspeicher sollte - wie üblich - bei
$801 liegen. Dies ist im normalen Betrieb des C 64 der Fall. Zum Kürzen
starten Sie nun den Rem-Killer, indem Sie die beiden SHIFT-Tasten
gleichzeitig drücken. Wieder erscheint eine Bestätigung.

Es wird nun die Programmlänge in Byte ausgegeben, die Kürzung erfolgt, die
Befehle GOTO, GOSUB, THEN sowie ON werden automatisch angepaßt, und das Tool
gibt die neue Länge aus. Das gekürzte Programm kann jetzt ganz normal
weiterbearbeitet oder gespeichert werden. Das Tool erkennt automatisch, wenn
sich kein Programm im Speicher befindet, oder das im Speicher befindliche
Programm nur aus REM-Zeilen besteht.

Kurz zur Funktionsweise: Dieses Tool geht das Basicprogramm in drei »Passes«
durch. Im ersten Durchgang (Pass 1) werden alle REM-Befehle erkannt und in
Pass 2 aus dem Programm entfernt. Dabei legt das Utility eine Tabelle mit
allen im Programm vorkommenden Basic-Zeilennummern an. Hier wird jeder
Zeilennummer des Ursprungsprogrammes eine Nummer im neuen Programm
zugewiesen, im obigen Beispiel etwa:

10 -> 10
20 -> 20
30 -> 30
40 -> 50 (da Zeile 40 nicht mehr existiert)
50 -> 50
60 -> 60

Im dritten Durchgang sucht der REM-Killer im Programm nach den Befehlen
GOTO, GOSUB und THEN mit einer oder mehreren durch Komma getrennten
Zeilennummern (für den ON-Befehl) und korrigiert die Nummern nach der
Tabelle. Sollte beispielsweise aus einem GOTO 90 ein GOTO 100 werden, da
Zeile 90 eine REM-Zeile war, wird das Basicprogramm automatisch an dieser
Stelle um ein Byte verlängert, damit die Zahl 100 hinter den GOTO-Befehl
paßt.

Bei Laden und Starten des Utilities mit RUN wird der IRQ-Vektor auf eine
neue Routine verbogen, die die beiden SHIFT-Tasten prüft. Dazu wird 60 mal
in der Sekunde direkt mit Hilfe der CIA-Register $DC00 und $DC01 die
Tastatur-Matrix abgefragt. Wurde <SHIFT/SHIFT> gedrückt (wahlweise auch die
SHIFT-LOCK Taste zusammen mit der rechten SHIFT-Taste), schreibt das
Programm einen Befehl in den Tastaturpuffer:

SYS 49155

Mit diesem Befehl wird der eigentliche REM-Killer gestartet. Sie können
diesen Befehl natürlich auch ganz normal im Direktmodus eingeben, wenn Ihnen
das komfortabler erscheint. Nach einem Ausstieg mit Reset kann des Tool,
sofern es sich noch im Speicher befindet, mit SYS 49152 wieder gestartet
werden. Dann ist wieder die Tastenkombination aktiv.





64 Keys: Befehle auf Tastendruck

Wer sagt denn, daß man jedesmal bei der Basicprogrammierung mühsam die
Schlüsselwörter von Hand eingeben muß? Sie brauchen nur die CTRL-Taste mit
einer anderen Taste zu drücken, und schon erscheint ein vollständiger
Basicbefehl am Bildschirm. Geben Sie öfters Listings aus Zeitschriften ein?
Dann haben Sie auf 64 Keys gewartet!

Laden Sie das Programm mit LOAD "64 KEYS (LADER)",8 und starten es mit RUN.
Obwohl die Erweiterung in reiner Maschinensprache programmiert wurde, kann
das Programmfile wie ein Basicprogramm geladen, gestartet, gespeichert und
kopiert werden. Die Routine wird nun in einen Speicherbereich ab 49152
verschoben und dort gestartet. Ein Titelbild erscheint. Der Rechner arbeitet
scheinbar ganz normal weiter. Drücken Sie jetzt aber einmal <CTRL> und
gleichzeitig eine Buchstabentaste: Voila - ein Befehl erscheint, als ob Sie
ihn ganz normal über Tastatur eingegeben hätten.

Sie können die Schlüsselwörter nach wie vor voll ausschreiben, müssen das
aber nicht unbedingt. Es ist nur dann notwendig, wenn der gewünschte Befehl
nicht in der untenstehenden Tabelle vorkommt. Innerhalb des Quote- oder
Insert-Modus (erster wird eingeschaltet, wenn Sie ein Anführungszeichen
eingeben, letzter, wenn Sie <SHIFT-INST/DEL> drücken) reagiert die
Erweiterung nicht.

Nach Reset oder <RUN/STOP-RESTORE> schalten Sie 64 Keys, so es sich noch im
Speicher befindet, mit

SYS 49152
wieder ein.

Im einzelnen werden folgende Schlüsselwörter wiedergegeben, wenn Sie die
angegebene Taste mit <CTRL> drücken:

A   ASC           | B   STEP          | C   CHR$
D   DIM           | E   END           | F   FOR
G   GET           | H   STOP          | I   INPUT
J   GOTO          | K   GOSUB         | L   LEFT$
M   MID$          | N   NEXT          | O   OPEN
P   POKE          | Q   PEEK          | R   RIGHT$
S   STR$          | T   TAB(          | U   USR
V   VAL           | X   READ          | W   WAIT
Y   RESTORE       | Z   SYS           | =   LIST
.   STEP          | ,   THEN          | ?   PRINT
<-  DATA          | *   REM           | -   NEW
+   RUN           | ^   CONT          | £   VERIFY
:   RND           | ;   FRE           | f1  INT
f3  ABS           | f5  SGN           | f7  LEN
RETURN  RETURN    | CLR CLR           | CRSR left   SAVE
CRSR down   LOAD  | INST  IF          | Klammeraffe   CLOSE

Es sind also alle Tasten des C 64 belegt, natürlich mit Ausnahme der
RESTORE-Taste, der Steuertasten <SHIFT>, <RUN/STOP> und <CBM> und der
Zifferntasten, da diese mit <CTRL> die Farbumschaltung erledigen.

Kurz noch zur Funktionsweise: Da 64 Keys nicht den IRQ-Vektor verbiegt, ist
die Erweiterung sehr kompatibel zu sonstigen Zusatzprogrammen, die nicht den
Bereich von 49152 bis 49448 belegen. Hier wird vielmehr der Key-Vektor
(655/656) auf eine eigene Routine verbogen.

Viel Spaß mit 64 Keys. Genießen Sie den Komfort, den dieses sehr kurze
Utility Ihnen bietet!





Anleitung zu »Array of Byte«

Vor allem Pascal-gewohnte Programmierer kennen die Array-of-Byte-Funktion,
mit der sich der gesamte Speicher des Computers wie eine indizierte Variable
ansprechen läßt. Unsere kleine Erweiterung bringt auch dem C 64 diese
nützlichen Befehle bei. Endlich wird PEEK und POKE überflüssig!

Die Erweiterung »Array of Byte« ist vor allem für Programmierer nützlich,
die ihre Programme übersichtlicher und leichter verständlich schreiben
möchten. Fand sich bisher in fast jedem längeren Basicprogramm ein Wust aus
PEEK- und POKE-Befehlen, um bestimmte Spezialeffekte durch direkte
Speichermanipulation zu erreichen, kann man mit der hier vorgestellten
Erweiterung alle 65536 Speicherzellen, die der 64'er bietet, wie eine
riesige indizierte Variable ansprechen (indizierte Variablen sind Variablen
mit einem Parameter in Klammern hinter dem Variablennamen). Dieser Vorzug
war bisher verschiedenen Pascal-Systemen vorbehalten.

Obwohl die Erweiterung aus Komfort- und Geschwindigkeitsgründen vollständig
in Maschinensprache geschrieben werden, kann sie dank des Ladeprogramms wie
ganz normales Basic geladen und gestartet werden:

LOAD "ARRAY OF BYTE",8
RUN

Nach kurzer Zeit erscheint eine knappe Anleitung auf dem Bildschirm. Jetzt
stehen ein neues Schlüsselwort zur Verfügung: MEM (xxx). Dabei gibt xxx
(ganzzahlig mit 0 <= xxx < 65536) die Nummer der anzusprechenden
Speicherzelle an. Dieser Ausdruck kann wie normale Arrays in Befehlen
verwendet werden und als Parameter in Termen stehen, beispielsweise so:

MEM (53280) = 0 wirkt wie POKE 53280,0
PRINT MEM (144) wirkt wie PRINT PEEK (144)
MEM (53269) = MEM (53269) OR 16 (schaltet Sprite 4 an)
IF MEM (808) <> 237 THEN GOTO 900

und so weiter. Es gibt nur zwei Einschränkungen. Hinter LET darf MEM nicht
für die Zuweisung verwendet werden.

LET MEM (53280) = 1 ist verboten,
LET A = MEM (700) ist jedoch erlaubt.

Außerdem sollte nach THEN ein Doppelpunkt folgen, falls der neue MEM-Befehl
zuweisend direkt dahinter steht. Also nicht

IF A = 400 THEN MEM (400) = 60

sondern

IF A = 400 THEN : MEM (400) = 60

Diese beiden Einschränkungen haben programmtechnische Gründe und wiegen in
der Praxis nicht schwer. Außerdem darf einer Speicherzelle MEM natürlich nur
ein ganzzahliger Wert von 0 bis 255 zugewiesen werden. Die Verwendung der
Variablen MEM oder ME (...) in Basicprogramme als normales Array ist
verständlicherweise bei aktiviertem Array of Byte nicht möglich. Es sollte
noch angemerkt werden, daß Sie vor dem Start eines (fertigen) Basicprogramms
mit den neuen Befehlen erst die Erweiterung »Array of Byte« wie beschrieben
laden und starten müssen.






Anleitung zur INFORM-Routine: Komfortable Eingabe

Der INPUT-Befehl des C 64 hat einige entscheidende Nachteile: Mit den
Cursortasten etwa kann ohne weiteres die Bildschirmmaske zerstört werden.
Leider ist es auch nicht möglich, eine maximale Eingabelänge vorzugeben oder
Sonderzeichen wie Kommas, Doppelpunkte oder dergleichen mehr einzugeben.
Manchmal benötigt man INPUT im Direktmodus, aber es geht nicht! INFORM ist
eine 143 Bytes kurze Ersatzroutine, die alle Nachteile beseitigt. Im
Gegensatz zu anderen einschlägigen Lösungen dieser Art wird die Eingabe
nicht einfach im Speicher abgelegt, sondern wie bei INPUT einer
Basic-Variablen zugewiesen.

Das Programm wird mit

LOAD "INFORM 49152",8,8

geladen. Danach soll NEW eingegeben werden (entfällt, falls INFORM in einem
eigenen Programm nachgeladen wird). Jetzt können Sie, sogar im Direktmodus,
die Routine mit

SYS 49152, LEN, VAR$

aufrufen. LEN gibt an, wie viele Zeichen die Eingabe maximal umfassen darf.
Setzen Sie LEN auf Null, können nur Leerstrings eingegeben werden. LEN muß
kleiner als 256 (ein Byte) sein. Für LEN können Sie Ziffern einsetzen, aber
auch numerische Terme aus Variablen und Rechenzeichen.

VAR$ ist die Stringvariable, der die Eingabe zugeteilt werden soll. Einige
Beispiele für erlaubte Befehle:

SYS 49152, 2, A$
SYS 49152, 56-15, TZ$
SYS 49152, LEN(A$), A$
SYS 49152, PEEK(90)-DD/2, DM$

und so weiter.

Bei INFORM können Korrekturen am eingegebenen Text nur mit der DEL-Taste
vorgenommen werden, die das zuletzt eingegebene Zeichen löscht. Alle
Cursortasten sind gesperrt. Mit <RETURN> schließen Sie die Eingabe ab.

Eine kleine Schwäche: Mit INFORM kann pro Wurf immer nur eine Variable
definiert werden (die übrigens, wie sich das für eine ordentliche
INPUT-Alternative gehört, angelegt wird, falls sie vorher noch nicht
definiert war). Mehrfacheingaben wie bei

INPUT "NAME, ALTER"; NA$,AL

sind nicht möglich. Dieser Nachteil ist die »Schattenseite« des Vorteils,
daß jetzt auch Doppelpunkte, Kommas und Anführungszeichen in der Eingabe
enthalten sein dürfen.

Interessant an dieser Routine ist vor allem der Teil ab $c02d, der die
Eingabe aus dem Kassettenpuffer liest und in der Stringvariable speichert.
Es handelt sich um eine kürzere, einfachere und sicherere Alternative zu der
von der 64'er Redaktion in 64'er 9/90 Seite 56 im Leserforum vorgestellten
Möglichkeit. Falls Sie das Programm verändern oder in eigene Projekte
einbauen wollen, müssen Sie nur beachten, daß die Adresse, an der der JSR
SUCHVAR-Befehl (momentan an $c008) beginnt, nicht das Lowbyte $28 (dez. 40)
hat (siehe C 64-Betriebssystem ab $b11d und $af28). Dieses Problem tritt in
der Praxis jedoch kaum auf und hat keine Bedeutung für reine Anwender von
INFORM, es soll hier nur der Vollständigkeit halber erwähnt werden.

Dem fortgeschrittenen Leser wird es sicher nicht schwerfallen, INFORM in
eigene Programme oder Erweiterungen einzubinden. Eine Hilfe mag der
ausführlich kommentierte Quelltext sein.







Die Telefonbuchsuche: »GENIE-SUCH«

Eine spezielle Maschinensprache-Routine, die in einem String-Array
blitzschnell beliebige Texte findet. Das Besondere: Es erfolgt kein
einfacher 1:1 Vergleich, sondern die Routine drückt auf Wunsch ein »Auge
zu«, wenn der Suchstring nur fast, nicht aber exakt gefunden wird. Nebenbei
erhalten Sie auch eine blitzschnelle Suchroutine, die stundenlange
Basic-Schleifen endgültig überflüssig macht.

Nehmen wir einmal an, Sie wollen ein Telefonbuch-Programm schreiben. Dazu
würden Sie in je einem Variablen-Array (indizierte Variable) die Namen der
Personen und die Telefonnummern speichern. Jetzt wird der Name vom Anwender
eingegeben, und eine Suchroutine tritt in Aktion, die jedes Element des
Namensfeldes mit der Eingabe vergleicht. Bei Übereinstimmung wird die
entsprechende Telefonnummer ausgegeben, sonst eine Fehlermeldung.

Wenn Sie jedoch zum Beispiel statt des gespeicherten »MEIER« auf der
Tastatur »MAIER« eingeben, muß das Programm passen. Um es etwas
bedienerfreundlicher zu gestalten, wäre eine Suchroutine praktisch, die
kleine Tippfehler oder Ungenauigkeiten im Suchstring automatisch korrigiert.
Eine solche Routine ist die hier vorgestellte Routine »GENIE-SUCH«. Sie
heißt so, weil sie bei der Suche nach einem genialen System vorgeht, um auch
Tippfehler wie »Dreher« (»HBUER« statt »HUBER«), falsche Buchstaben (»HUPER«
statt »HUBER«), Vertauschungen in der Groß/Kleinschrift oder zu lange und zu
kurze Suchbegriffe (etwa »HUBR« oder »HUBAER« statt »HUBER«) erkennt. Da sie
vollkommen in Maschinensprache geschrieben wurde, arbeitet sie recht
schnell. Zudem ist sie nur wenige Bytes (drei Blocks) lang.

Laden Sie die Routine mit dem Befehl LOAD "GENIE-SUCH",8,8 von Diskette in
den Speicher. Geschieht dies im Direktmodus, sollte danach NEW eingegeben
werden, um alle Zeiger wieder richtigzustellen. Die Routine kann und soll
aber auch von Basicprogrammen aus nachgeladen werden, etwa so:

1 IFA=0THENA=1:LOAD"GENIE-SUCH",8,8

Jetzt kann das Utility mit dem Befehl

SYS 49152,SU$,MODE,FE$(ANF),FE$(END),FI%

gestartet werden. Dabei haben die Parameter folgende Bedeutung: SU$ ist der
nicht leere String, der den Suchtext enthält. Es kann sich um eine Variable,
einen Text in Anführungszeichen oder einen Stringausdruck handeln. MODE gibt
die Betriebsart an, eine Zahl oder Variable oder ein Term mit einem Wert
zwischen 0 und 255 nach untenstehender Tabelle. FE$(...) ist die
Arrayvariable, in der gesucht werden soll. Es soll sich um ein
eindimensionales Stringfeld handeln. ANF ist die erste Indexnummer, END die
letzte Indexnummer. Diese beiden Parameter können auch größer als 255 sein,
sie geben den Bereich im Array an, der durchsucht werden soll. ANF sollte
nicht Null sein, da die Routine die Nummer des Feldes zurückmeldet, in der
der Begriff gefunden wurde. Wird eine Null zurückgegeben, bedeutet dies, daß
nichts gefunden wurde. Das Unterprogramm gibt aber auch dann eine Null
zurück, wenn der Begriff im Feld Nummer Null gefunden wurde. Da in diesem
Fall das steuernde Basicprogramm beide Fälle nicht unterscheiden kann,
sollte die Null als Parameter hier vermieden werden. END darf nicht kleiner
als ANF und nicht größer als die Anzahl der Elemente in FE$(...) sein. FI%
schließlich muß eine Integer-Variable sein, in der die Nummer des Feldes
zurückgemeldet wird, in dem der Suchbegriff gefunden wurde. Wird FI% Null,
wurde nichts gefunden.

Für MODE gibt es 256 Möglichkeiten, die durch Addition der folgenden
Optionen entstehen:

1 = Suche falsche Zeichen (»HABER« statt »HUBER«)
2 = Keine Berücksichtigung Groß/Kleinbuchstaben
4 = »Dreher« finden (»HUBRE« statt »HUBER«)
8 = Das Fragezeichen ist als Joker zugelassen
16 = Das erste Zeichen MUSS übereinstimmen
32 = Leerzeichen ignorieren
64 = überflüssige Zeichen ignorieren (»HUBBER« statt »HUBER«)
128 = fehlende Zeichen ignorieren (»HUER« statt »HUBER«)

Diese Werte können direkt für MODE eingesetzt werden. Ist MODE=0, wird nur
dann ein Fund gemeldet, wenn der Suchbegriff wirklich 1:1 mit dem Feld
übereinstimmt (alle Optionen abgeschaltet). Soll zum Beispiel die Suche nach
falschen Zeichen (Option 1) und die Suche nach Drehern (Option 4) erlaubt
sein, so addieren Sie 1 und 4 und setzen somit die 5 als MODE ein. Sind alle
Optionen eingeschaltet, wird MODE=255. Beachten Sie jedoch, daß die Routine
intern immer nur maximal eine Option pro Feld zuläßt. Ist der Suchbegriff
etwa »PEULAENR«, und enthält ein Feld den Inhalt »PAULANER« (Fehler: ein
falsches Zeichen und ein Dreher), so wird dieses Feld nicht gefunden, auch
wenn Sie die beiden Optionen gleichzeitig erlaubt haben. Diese Einschränkung
ist programmbedingt und mußte getroffen werden, um die Routine nicht unnötig
komplex, umständlich und damit langsam werden zu lassen. Ausnahme: Die
Optionen Leerzeichen ignorieren, Groß/Kleinschrift ignorieren, Fragezeichen
als Joker können zusammen mit anderen Optionen verwendet werden.

Erklärung der Option 8: Das Fragezeichen kann als »Joker« verwendet werden,
wenn Sie einzelne Zeichen des Suchbegriffes nicht wissen. Die Anwendung
entspricht der des Fragezeichens beim Befehlskanal der Floppy: Geben Sie als
Suchbegriff »PE?ER« vor, findet der Computer ein Feld mit dem Inhalt
»PETER«, allerdings nur, wenn Sie die Option 8 zulassen.

Ein Anwendungsbeispiel: Das Feld A$(1) bis A$(15) enthält einige Vornamen.
Sie wollen prüfen, in welchem Feld der »PETER« enthalten ist. Als Optionen
lassen Sie zu: falsche Zeichen, Dreher, Vertauschung Groß/Kleinschrift,
Leerzeichen ignorieren, Fragezeichen als Joker. Die Addition der Optionen
ergibt MODE=47. Das Ergebnis soll in F% vermerkt werden. Der Befehl lautet:

SYS 49152,"PETER",47,A$(1),A$(15),F%

Wird nach diesem Befehl F%=5, so ist »PETER« in A$(5) enthalten. Ist F%=0,
so ist »PETER« in A$(1) bis A$(15) nicht enthalten (aber vielleicht zum
Beispiel in A$(16)).

Zur praktischen Anwendung: Eine sinnvolle Vorgehensweise wird sein, die
Suchroutine erst einmal ohne alle Optionen durchlaufen zu lassen, um bei
korrekter Eingabe auch wirklich nur das gewünschte Element zu finden. Blieb
die Suche erfolglos, können Sie nun nacheinander einige SYS 49152-Aufrufe
verwenden und dabei nacheinander die zur Verfügung stehenden Optionen
einschalten.

Wir wünschen Ihnen viel Spaß mit dieser Routine, die Ihnen sicher helfen
wird, Ihre Datenverwaltungsprogramme und andere Projekte komfortabler zu
gestalten. Das Demoprogramm gibt noch ein weiteres Anwendungsbeispiel.




KAPITEL 2: ASSEMBLERPROGRAMMIERUNG






Dateibearbeitung in Maschinensprache

Man braucht keinen Generalschlüssel, um in Assembler Files zu öffnen, zu
schließen, zu lesen und zu beschreiben. Es sind nur ein paar kleine
Programmiertricks, die im Prinzip ganz ähnlich wie in Basic funktionieren.
Unser kleiner Kurs für fortgeschrittene Assemblerprogrammierer führt Sie in
die Dateibearbeitung direkt vom Prozessor aus.

Sie haben gerade Ihre ersten Schritte in der Welt der Maschinensprache
hinter sich, wissen, wie man in Assembler Programme eingibt und startet, und
sind nun daran interessiert, in größeren Programmen auch Arbeiten wie das
Laden und Speichern von Dateien, Anzeigen des Directories, Fehlerkanal
auslesen und so weiter direkt in Assembler zu programmieren. Dann sind Sie
hier genau richtig. Ausgehend davon, wie man solche Dinge in Basic
programmiert, werden wir uns mit Hilfe der Betriebssystem-Routinen langsam
an Files in Maschinensprache herantasten. In bewährter Manier stellen wir
dabei erst die Programmlistings vor, und kommentieren sie dann ausführlich.
Den Abschluß bietet ein Programm, das den Inhalt einer beliebigen Datei auf
dem Drucker wiedergibt. Übrigens funktionieren die hier vorgestellten
Verfahren keineswegs nur auf dem C 64. Sie sind, soweit nur Kernal-Routinen
mit der Startadresse $FFxx verwendet werden, ohne Änderung auf allen
Commodore-Homecomputern lauffähig, insbesondere C 128, VC 20, C 16 und
möglicherweise sogar auf dem Amiga. Allerdings kann es notwendig sein, die
Startadresse der Beispielprogramm anzupassen. In diesem Artikel wurde
einheitlich 49152 gewählt, da sich dieser Speicherbereich beim C 64
anbietet. Ohne Änderungen sind alle hier vorgestellten Programmlösungen auf
dem C 64 lauffähig.

Öffnen und Schließen von Files

Wie Sie das von Basic gewohnt sind, müssen wir auch in Maschinensprache dem
Computer genau mitteilen, auf welche Datei zugegriffen werden soll. Als
Beispiel wählen wir eine auf Diskette gespeicherte sequentielle Datei mit
dem Namen »TEST«. In Basic können wir so ein File ganz einfach zum Lesen
öffnen:

OPEN 1,8,2,"TEST,S,R"

Die erste Zahl, 1, gibt die logische Filenummer an. Wir brauchen sie, damit
wir uns später auf diesen OPEN-Befehl beziehen können. Die 8 gibt die
Gerätenummer an, sie steht für das Diskettenlaufwerk. 2 ist eine
Sekundäradresse, die der Floppy die Betriebsdaten mitteilt. Dahinter steht
in Stringform erst der Dateiname, dann durch Kommas getrennt ein S für
SEQ-Datei und ein R für READ (Lesen aus dem File).

Ganz so einfach geht's in Maschinensprache nicht. Den OPEN-Befehl müssen wir
in drei Prozeduren zerlegen. Dabei begegnen uns allerdings exakt die selben
Angaben wie bei Basic. Zunächst brauchen wir drei wichtige
Betriebssystem-Routinen:

SETPAR  $FFBA
SETNAM  $FFBD
OPEN    $FFC0

Die SETPAR-Routine, die im System bereits fest ab Adresse $FFBA gespeichert
ist, definiert die File- und die Gerätenummer sowie die Sekundäradresse.
Diese Angaben sind im Akku, X- und Y-Register zu übergeben. Der Filename muß
im Ascii-Code irgendwo im Speicher abgelegt werden. Dazu übergeben wir der
SETNAM-Routine im Akku die Länge des Namens und in den Registern X und Y
einen Zeiger (Low/Highbyte) auf die Adresse. Soll kein Dateiname gesetzt
werden (ist ja auch in Basic bei OPEN nicht notwendig), übergeben wir als
»Länge« im Akku die Null. Erst nach diesen Vorbereitungen darf die
OPEN-Routine aufgerufen werden, die das File tatsächlich öffnet. Formulieren
wir einmal den obigen OPEN-Befehl in Assembler. Die Funktionsweise der
kurzen Routine ist dabei eher unwichtig, begreifen Sie den Ausschnitt
einfach als »Kochrezept«:

  * = 49152 ; Startadresse
  LDA #1    ; Filenummer
  LDX #8    ; Gerätenummer
  LDY #2    ; Sekundäradresse
  JSR $FFBA ; SETPAR
  LDA #8    ; Länge des Filenamens
  LDX #<NAME; Adresse
  LDY #>NAME; des Filenamens
  JSR $FFBD ; SETNAM
  JSR $FFC0 ; OPEN Datei öffnen

Es ist also ganz einfach. Diese wenigen Zeilen haben exakt die gleiche
Wirkung wie der oben vorgestellte OPEN-Befehl. Nur eines fehlt noch: Der
Dateiname, den wir an einer freien Stelle im Speicher im Ascii-Code ablegen
müssen:

NAME   .ASC "TEST,S,R"

Das zweite, was jeder Basicprogrammierer im Zusammenhang mit Files lernt,
ist, daß man jede geöffnete Datei wieder schließen muß, wenn man sie nicht
mehr braucht. Das ist so, als ob Sie Ihren Computer einschalten (OPEN), dann
damit arbeiten und ihn nach Beendigung der Session wieder abschalten
(CLOSE). Nur, daß Sie mit mehreren Computern gleichzeitig arbeiten können:
Es können viele Dateien gleichzeitig geöffnet sein. Auf welche Sie sich
momentan beziehen, wird durch die Filenummer (in unserem Beispiel 1)
eindeutig bestimmt. In Basic schließen wir die oben geöffnete Datei einfach
mit

CLOSE 1

Das geht in Maschinensprache fast genauso einfach: Die entsprechende
CLOSE-Routine erwartet im Akku die Filenummer und hat die Adresse $FFC3.
Unser CLOSE 1 sieht also in Assembler so aus:

  LDA #1    ; Dateinummer
  JSR $FFC3 ; CLOSE Datei schließen

Das ist wirklich alles! Bemerkenswert ist, daß wir hier ebenso wie in Basic
keine weiteren Angaben brauchen - die hat ja bereits alle der OPEN-Befehl
bekommen.

Lesen aus der Datei

Nachdem wir das File geöffnet haben, wollen wir nun daraus lesen. In
Assembler muß dazu zunächst ein Eingabekanal geöffnet werden, das heißt, wir
müssen dem Computer sagen, daß wir die Datei, die vorher geöffnet wurde, nun
lesen wollen. Dazu gibt es die CHKIN-Routine mit der Adresse $FFC6. Diesem
Unterprogramm wird im X-Register (!) die Filenummer der vorher geöffneten
Datei übergeben, aus der gelesen werden soll. In unserem Beispiel sieht das
so aus:

  LDX #1    ; Dateinummer 1
  JSR $FFC6 ; CHKIN Eingabekanal öffnen

Ab jetzt kann man aus dieser Datei lesen. Dazu stehen im Prinzip vor allem
zwei Routinen zur Verfügung:

GETIN   $FFE4
CHRIN   $FFCF

Die CHRIN-Routine entspricht in etwa dem INPUT# in Basic. Sie merken schon:
In Basic muß hinter INPUT# noch die Filenummer angegeben werden. Das kann
hier entfallen, da wir ja schon mit CHKIN festgelegt haben, auf welches File
Bezug genommen wird. Die GETIN-Routine entspricht dem GET#-Befehl von Basic
und ist CHRIN grundsätzlich vorzuziehen. Bitte begnügen Sie sich mit der
Ausrede, GET in Basic ist ja auch sicherer als INPUT. Eine etwas
detailliertere Erklärung folgt am Ende des Artikels. Die Anwendung von GETIN
ist denkbar einfach: Einfach mit JSR $FFE4 aufrufen. Im Akku wird dann der
Ascii-Code des gelesenen Zeichens übergeben. Auf ein Beispiel verzichten
wir, da in Kürze das erste »richtige« Programm folgt.

Ebenso wie geöffnete Dateien wieder geschlossen werden, müssen auch die
Eingabekanäle (später werden wir noch Ausgabekanäle kennenlernen)
geschlossen werden, da sonst beispielsweise keine Eingabe von Tastatur mehr
möglich ist. Unser C 64 kennt dazu die Routine CLRCHN mit der Adresse $FFCC.
Rufen Sie diese Adresse auf, wird die Eingabe wieder auf die Tastatur und
(falls verändert) die Ausgabe wieder auf den Bildschirm »umgelenkt« (man
sollte besser sagen: »zurückgelenkt«).

Zur Sicherheit sollte man außerdem zu Beginn jedes Maschinenprogramms den
CLALL-Befehl (Adresse $FFE7) anwenden. Er bewirkt, daß alle offnene Dateien
und Kanäle geschlossen werden. CLALL beinhaltet also CLRCHN.

Der Vollständigkeit halber sei noch die wohl wichtigste
Betriebssystem-Routine erwähnt, die es gibt: CHROUT (oft auch PRINT oder
BSOUT genannt) mit der Adresse $FFD2. Diese gibt einfach das Zeichen, dessen
Codenummer im Akku steht, auf dem Bildschirm oder dem Gerät aus, das
momentan Ausgabegerät ist. Wie man ein anderes Ausgabegerät als den Schirm
definiert (funktioniert ähnlich wie oben bei CHKIN gesehen), lernen Sie
später.

Fehlerkanal auslesen

Mit dem bisher errungenen Wissen können wir schon unser erstes Programm
schreiben. Es soll den Fehlerkanal der Diskettenstation auslesen und am
Bildschirm anzeigen. Dazu erst das entsprechende Analogon in Basic:

10 OPEN 15,8,15:REM KEIN DATEINAME
20 GET# 15,A$
30 PRINT A$;
40 IF A$ <> CHR$(13) THEN 20
50 CLOSE 15
60 END

In Zeile 40 erfolgt eine Prüfung, ob das gelesene Zeichen ein CR (Code 13)
war. In diesem Fall ist die Statusmeldung vollständig gelesen. Dieses
Programm setzen wir 1:1 in Maschinensprache um.

       ; Beispiel 1: Fehlerkanal
49152  JSR $FFE7; CLALL zur Sicherheit
49155  LDA #15  ; Filenummer
49157  LDX #8   ; Floppy
49159  TAY      ; Sekundäradresse
49160  JSR $FFBA; SETPAR
49163  LDA #0   ; kein Dateiname
49165  JSR $FFBD; SETNAM
49168  JSR $FFC0; OPEN 15,8,15,""
49171  LDX #15  ; File 15
49173  JSR $FFC6; CHKIN zur Eingabe öffnen
49176  JSR $FFE4; GETIN ein Zeichen lesen
49179  JSR $FFD2; auf Bildschirm ausgeben
49182  CMP #13  ; Code 13?
49184  BNE 49176; nein, dann weiter
49186  JSR $FFCC; sonst Kanal schließen
49189  LDA #15  ; Dateinummer
49191  JMP $FFC3; CLOSE 15

Das war auch schon alles. Wenn Sie dieses Programm mit dem Monitor oder
Assembler eingegeben und ggf. assembliert haben, starten Sie es mit

SYS 49152

Sofort erscheint der Fehlerkanal, im Normalfall 00,OK,00,00. Senden Sie
einfach einmal einen fehlerhaften Befehl, etwa

OPEN 1,8,15,"X":CLOSE 1

Nach SYS 49152 beschwert sich das Laufwerk mit einem 31,SYNTAX ERROR,00,00.
Was bleibt ihm auch anderes übrig: Den X-Befehl gibt es nicht. Übrigens
sollten Sie zur Probe im Maschinenprogramm einmal an Adresse 49189 ein RTS
einbauen (POKE 49189,96) und damit den CLOSE-Befehl unwirksam machen. Der
Aufruf mit SYS 49152 klappt einwandfrei, allerdings ist die Datei 15 noch
offen. Das können Sie leicht nachprüfen, indem Sie jetzt von Basic aus
eingeben

OPEN 15,8,15

Der Computer reagiert artig mit seinem ?FILE OPEN ERROR. In Maschinensprache
haben wir es also offenbar mit exakt den gleichen Files zu tun wie in Basic.
Das erleichtert die Sache erheblich.

Directory ohne Datenverlust

Kaum ein größeres Programm kommt ohne eine Routine aus, die das
Inhaltsverzeichnis der Diskette lädt und listet. In Basic bietet sich dazu
folgende Befehlsfolge an:

LOAD "$",8
LIST

die jedoch einen fatalen Nebeneffekt hat: Da das Directory wie ein
Basicprogramm geladen wird, geht das momentan im Speicher stehende Programm
rettungslos verloren. Versuchen wir daher, eine kurze Maschinenroutine zu
programmierern, die das gleiche ohne Datenverlust erledigt. Wir lesen
Zeichen für Zeichen der Directory und zeigen alles gleich an. Die hier
vorgestellte Routine ist nicht optimiert in Bezug auf Kürze und
Geschwindigkeit, aber es wird Ihnen mit etwas Einfühlungsvermögen
leichtfallen, die Funktionsweise zu verstehen und das Programm vielleicht
noch zu erweitern oder zu kürzen.

Zunächst öffnen wir in gewohnter Manier das »File«, in dem sich die
Directory verbirgt. Aus technischen Gründen braucht man dazu die
Sekundäradresse 0.

       ; Beispiel 2: Directory
49152  JSR $FFE7; CLALL zur Sicherheit
49155  LDA #1   ; Filenummer
49157  LDX #8   ; Geräteadresse
49159  LDY #0   ; Sekundäradresse
49161  JSR $FFBA; SETPAR
49164  LDX #$24 ; Code für Dollarzeichen
49166  STX 2    ; in freier Speicherzelle speichern
49168  LDX #2   ; Adresse low
49170  LDY #0   ; und high
49172  JSR $FFBD; SETNAM
49175  JSR $FFC0; OPEN 1,8,0,"$"
49178  LDX #1   ; Filenummer
49180  JSR $FFC6; CHKIN Eingabekanal öffnen

Da ja der Filename irgendwo im Speicher abgelegt werden muß, entscheiden wir
uns für die sonst unbenutzte Speicherzelle 2. Ab 49168 richten wir den
Zeiger X/Y auf diese Adresse. Sie wundern sich vielleicht, warum wir vor
SETPAR nicht die Länge des Namens (1) im Akku gespeichert haben. Das ist
hier nicht mehr nötig, da die 1 im Akkumulator von 49155 noch enthalten ist.
Ein kleiner Trick also, den sich der Autor einfach nicht verkneifen konnte.
Jetzt können wir mit GETIN Zeichen für Zeichen lesen und ausgeben. Beim
Directory gibt es allerdings einige Besonderheiten zu beachten. Die ersten
beiden Bytes einer jeden Zeile können ignoriert werden, die nächsten beiden
Bytes geben im Format Low/Highbyte die Größe in Blocks an. Danach folgt bis
zum Nullbyte die Zeileninformation. Außerdem muß getestet werden, ob das
Dateiende erreicht wurde. Wie in Basic lesen wir dazu den Wert der Variablen
ST aus, auf den der Maschinenprogrammierer durch Auslesen der Speicherzelle
144 (C 64, C 128 und andere) Zugriff hat. Hat diese Speicherzelle einen
Inhalt ungleich Null, so ist ein Fehler aufgetreten oder das File ist
beendet. Zuletzt brauchen wir eine Routine, die eine 16-Bit Integerzahl
(Low/Highbyte) numerisch auf dem Bildschirm ausgibt. So etwas enthält der C
64 an Adresse $BDCD, diese Routine AXOUT wird sonst vom System zur Ausgabe
von Basic-Programmzeilennummern verwendet. Sie gibt eine Zahl aus, die sich
nach der Formel

WERT = X + A * 256

errechnet. High- und Lowbyte wird also im Akku und im X-Register übergeben.

49183  LDY #3   ; drei Bytes überlesen
49185  STY 3    ; als Zähler merken
49187  JSR $FFE4; GETIN Zeichen lesen
49190  STA 4    ; und merken
49192  LDY 144  ; ST Status lesen
49194  BNE 49239; ungleich Null, fertig
49196  JSR $FFE4; GETIN
49199  LDY 144  ; ST lesen
49201  BNE 49239; bei Dateiende
49203  LDY 3    ; Zähler zurückholen
49205  DEY      ; und erniedrigen
49206  BNE 49185; nicht null, weitermachen
49208  LDX 4    ; Zeichen restaurieren
49210  JSR $BDCD; AXOUT Zahl ausgeben
49213  JSR $AB3F; SPACE Leerzeichen ausgeben
49216  JSR $FFE4; GETIN
49219  LDX 144  ; Status testen
49221  BNE 49239; bei ungleich Null beenden
49223  TAX      ; Zeichencode
49224  BEQ 49232; bei Zeilenende
49226  JSR $FFD2; BSOUT Zeichen ausgeben
49229  JMP 49216; und weiter listen
49232  JSR $AAD7; CRLF Zeilenende ausgeben
49235  LDY #2   ; zwei Bytes für Linkpointer
49237  BNE 49185; und nächste Zeile
49239  JSR $FFCC; CLRCHN Kanal schließen
49242  LDA #1   ; Datei 1
49244  JMP $FFC3; schließen, fertig

Besitzer anderer Computer als der C 64 müssen die Befehle JSR $AAD7 (beginnt
neue Zeile) und JSR $AB3F (gibt ein Leerzeichen aus) evtl. durch
Ersatzkonstruktionen ersetzen. JSR $AB3F hat die gleiche Wirkung wie LDA #32
und JSR $FFD2. Außerdem müssen Sie mit Hilfe eines ROM-Listings die
AXOUT-Routine, die beim C 64 an $BDCD beginnt suchen, oder auf die Ausgabe
der Blocklänge verzichten.

Probieren Sie dieses Programm gleich einmal aus! Wenn alles geklappt hat,
sollten Sie zur Übung einmal versuchen, beispielsweise eine Funktion
einzubauen, die das Directory auf Tastendruck anhält und/oder abbricht.

Druckerausgabe

Nachdem wir gelernt haben, wie man in Maschinensprache Eingaben von Files
vornimmt, beschäftigen wir uns jetzt mit der Ausgabe in eine Datei. Als
erstes Beispiel mag eine Druckerausgabe dienen. Wenn Sie das bisher
beschriebene verstanden haben, wird es Ihnen nicht schwerfallen, auch mit
dem folgenden zurechtzukommen. Im Prinzip geht es wieder wie gehabt, nur daß
wir diesmal nach dem Öffnen des eigentlichen Files keinen Eingabekanal,
sondern einen Ausgabekanal öffnen werden. Dazu dient die Routine CHKOUT
(Adresse $FFC9), die analog zu CHKIN funktioniert. Auch hier muß im
X-Register die Filenummer übergeben werden. CHKOUT leitet dann bis zum
abschließenden CLRCHN alle Ausgaben auf das betreffende Gerät um. Das
funktioniert genauso wie der CMD-Befehl, den Sie vielleicht vom Basic her
kennen. Und in der Tat ruft auch Basics CMD intern einfach nur die
CHKOUT-Routine auf!

Es soll der Text »ICH GRUESSE DIE WELT!« auf dem Drucker ausgegeben werden.
Sehen wir uns wieder zunächst die Basic-Lösung an:

10 OPEN 4,4
30 PRINT#4,"ICH GRUESSE DIE WELT!"
50 CLOSE 4

Die Zeilen 20 und 40 wurden bewußt weggelassen. Damit die Umsetzung in
Assembler leichter zu verstehen ist, bauen wir das Basicprogramm etwas um
und verwenden den CMD-Befehl. Dieser ergibt die noch fehlende Zeile 20.
Bekanntlich muß ein CMD-Befehl mit einem PRINT#-Befehl aufgehoben werden,
den wir in Zeile 40 unterbringen.

10 OPEN 4,4
20 CMD 4
30 PRINT"ICH GRUESSE DIE WELT!"
40 PRINT#4
50 CLOSE 4

Das Bemerkenswerte dabei ist, daß wir zur Druckerausgabe den normalen
PRINT-Befehl (ohne Doppelkreuz) verwenden dürfen, da ja zuvor mit CMD schon
der entsprechende Kanal freigegeben wurde. In Maschinensprache können wir
uns die Zeile 40 sparen, wir haben zum Schließen des Kanals ja die
CLRCHN-Routine zur Verfügung, die übrigens auch dem Basic-Programmierer mit
SYS 65484 (hier etwa in Zeile 40) zur Verfügung steht.

Jetzt stellt die Umsetzung kein Problem mehr dar. Merken Sie sich bitte, daß
beim Öffnen eines Druckerfiles grundsätzlich kein Filename angegeben wird.
Eventuell kann es notwendig sein, eine andere Sekundäradresse als die Null
anzugeben, das hängt von Ihrem Interface ab. Ändern Sie bei Bedarf einfach
den Befehl ab Adresse 49158.

       ; Beispiel 3: Druckerausgabe
49152  JSR $FFE7; CLALL zur Sicherheit
49155  LDA #4   ; Filenummer
49157  TAX      ; istgleich Gerätenummer
49158  LDY #0   ; Sekundäradresse
49160  JSR $FFBA; SETPAR
49163  LDA #0   ; Länge des Filenamens = 0
49165  JSR $FFBD; SETNAM
49168  JSR $FFC0; OPEN 4,4,0,""
49171  LDX #4   ; Filenummer
49173  JSR $FFC9; CHKOUT Drucker als Ausgabegerät

Jetzt ist die eigentliche Ausgabe des Textes dran. Wir verwenden dazu, damit
es leichter verständlich wird, eine Schleife, in der wir Zeichen für Zeichen
des im Ascii-Code abgelegten Textes über CHROUT ($FFD2) ausgeben. Im
Gegensatz zu Basic wird hier bei der Ausgabe nicht automatisch das
Zeilenendezeichen CR (CHR$(13)) angefügt, das müssen wir von Hand erledigen.
Wird das vergessen, druckt das Gerät nichts. Der Text hat insgesamt also 22
Zeichen.

49176  LDX #0      ; Zähler initialisieren
49178  LDA 49197,X ; Text lesen
49181  JSR $FFD2   ; und Zeichen ausgeben
49184  INX         ; nächstes Zeichen
49185  CPX #22     ; schon 22 Zeichen?
49187  BNE 49178   ; nein, weiter lesen
49189  JSR $FFCC   ; CLRCHN Ausgabe beenden
49192  LDA #4      ; File 4
49194  JMP $FFC3   ; CLOSE 4
49197  .ASC "ICH GRUESSE DIE WELT!"
49218  .BYT 13     ; CR

Je nachdem, welchen Assembler oder Monitor Sie verwenden, kann es notwendig
sein, die Pseudo-Befehle in 49197 und 49218 zu ändern. Es soll einfach der
Text ab 49197 im Ascii-Code abgelegt und eine 13 in Speicherzelle 49218
gelegt werden: POKE 49218,13.

Jetzt sollten Sie den Drucker einschalten und bereitmachen. Mit

SYS 49152

kann dann der Ausdruck gestartet werden. Wenn alles richtig gelaufen ist,
wird das Gerät schön brav den Text zu Papier bringen.

Beschreiben eines Disketten-Files

Jetzt wollen wir aber auch versuchen, in ein File zu schreiben. Dazu werden
wir eine neue Routine des C 64 kennenlernen, die uns die Arbeit des Aufrufs
von SETPAR und SETNAM abnimmt. Man kann vielmehr direkt hinter dem
SYS-Befehl Filenamen und Gerätenummer angeben. Diese Routine GETPAR (Adresse
beim C 64: $E1D4) wird normalerweise von den LOAD- und SAVE-Befehlen
verwendet, um die Parameter zu ermitteln. Wir wollen ein kurzes Programm
schreiben, mit dem eine sequentielle Datei angelegt werden kann.

Kurz zu den »Spielregeln«: Das Programm wird mit

SYS 49152,"DATEINAME,S,W",8

gestartet. Daraufhin erscheint ein Cursor, und die einzelnen Datensätze
werden durch Komma getrennt eingegeben. Das Ende markiert ein Stern, der
sonst nicht eingegeben werden darf - der Einfachheit halber. Doch wie
programmiert man so etwas?

Zunächst holen wir das Komma hinter SYS 49152 und die Parameter. Dabei
müssen die Sekundäradresse und die Filenummer immer auf 2 gesetzt werden,
auch wenn der Anwender nichts oder etwas anderes vorgibt.

       ; Beispiel 4: File-Editor
49152  JSR $AEFD; CHKKOM Komma holen
49155  JSR $E1D4; GETPAR Parameter holen
49158  LDX $BA  ; Gerätenummer G aus Vorgabe
49160  LDA #2   ; Filenummer
49162  TAY      ; istgleich Sekundäradresse
49163  JSR $FFBA; SETPAR
49166  JSR $FFC0; OPEN 2,G,2,"NAME"

Zur Eingabe von Tastatur verwenden wir diesmal die oben geschmähte
CHRIN-Routine. Wendet man diese auf die Tastatur an, wird beim ersten Aufruf
ein Cursor ausgegeben, und der Anwender kann etwas eingeben und mit <RETURN>
bestätigen. Im Akku steht dann das erste Textzeichen. Bei weiteren Aufrufen
werden dann nacheinander die einzelnen Zeichen gelesen. Das Ganze ist von
der Wirkung her mit dem INPUT-Befehl vergleichbar.

49169  LDX #2   ; Filenummer
49171  JSR $FFC9; CHKOUT Ausgabekanal in File 2 öffnen
49174  JSR $FFCF; CHRIN Eingabe holen
49177  CMP #42  ; Stern?
49179  BEQ 49187; ja, dann fertig
49181  JSR $FFD2; sonst in File ausgeben
49184  JMP 49174; und weitermachen
49187  JSR $FFCC; CLRCHN Kanal schließen
49190  LDA #2   ; Filenummer
49192  JMP $FFC3; CLOSE 2

Beim Schreiben in eine Datei auf Diskette ist es ganz wichtig, daß nach dem
Beschreiben ordentlich der Kanal mit CLRCHN und das File mit CLOSE
geschlossen werden, da sonst die Datei nicht ordnungsgemäß angelegt wird.
Wenden wir das Programm einmal an. Legen Sie eine nicht schreibgeschützte
Diskette ein, auf der sich noch Platz befindet, und starten das Programm mit

SYS 49152,"TEST,S,W",8

Wählen Sie einen Namen, den es noch nicht auf dieser Diskette gibt! Das
Laufwerk beginnt kurz zu arbeiten, und ein Cursor erscheint. Geben Sie nun
einige Zeilen Text ein, bestätigen Sie wie in Basic jede Zeile mit <RETURN>.
Wenn Sie genug haben, geben Sie nur einen Stern gefolgt von <RETURN> ein.
Die Datei wird nun geschlossen, der Computer kehrt ins Basic zurück. Wenn
Sie nun das Directory einsehen, stellen Sie fest, daß eine sequentielle
Datei »TEST« erzeugt wurde. Wir haben also einen richtigen kleinen Editor
für sequentielle Files geschrieben! Versuchen Sie doch einmal, das Programm
so auszubauen, daß auch Änderungen an bereits bestehenden Files vorgenommen
werden können. Auch erkennt unsere Routine keine Diskettenfehler, man müßte
dazu noch den Fehlerkanal auslesen, beispielsweise nach dem Schließen der
Datei, und prüfen, ob eine andere Angabe als 00,OK,00,00 ausgegeben wurde.
Es reicht in diesem Fall, nur das erste Zeichen des Fehlerkanals zu lesen
und mit der Null zu vergleichen.

File-Lister

Den krönenden Abschluß stellt ein kleines Hilfsprogramm dar, mit dessen
Hilfe eine Datei von Diskette gelesen werden und direkt auf den Drucker
ausgegeben werden kann. Die Bedienung soll dabei wieder über Angaben nach
dem SYS-Befehl erfolgen, also listet beispielsweise

SYS 49152,"TEST,S,R"

die eben erzeugte sequentielle Datei auf dem Drucker. Im Prinzip ist das gar
nicht schwer. Wir beginnen damit, ein Diskettefile zu öffnen und dann einen
Ausgabekanal zum Drucker anzulegen.

       ; Beispiel 5: File-Lister
49152  JSR $AEFD; CHKKOM Komma holen
49155  JSR $E1D4; GETPAR Parameter holen
49158  LDX $BA  ; Gerätenummer G aus Vorgabe
49160  LDA #2   ; Filenummer
49162  TAY      ; istgleich Sekundäradresse
49163  JSR $FFBA; SETPAR
49166  JSR $FFC0; OPEN 2,G,2,"NAME"
49169  LDA #0   ; kein Filename
49171  JSR $FFBD; SETNAM
49174  LDA #4   ; Filenummer
49176  TAX      ; istgleich Gerätenummer Drucker
49177  LDY #0   ; Sekundäradresse
49179  JSR $FFBA; SETPAR
49182  JSR $FFC0; OPEN 4,4,0

Zwei Dinge haben wir dabei gelernt. Erstens spielt die Reihenfolge des
Aufrufs von SETNAM und SETPAR keine Rolle. Beim Drucker haben wir erst die
Angaben zum Filenamen und dann die Angaben zu den Fileparametern gemacht,
anders als gewohnt. Wichtig ist nur, daß beide Routinen vor dem OPEN bereits
aufgerufen wurden. Zweitens ist es wie auch in Basic problemlos möglich,
mehrere Files auf einmal zu öffnen. Diese müssen sich lediglich in der
Filenummer unterscheiden, damit wir uns später auf sie beziehen können.

Jetzt schalten wir File 2 (SEQ-Datei) auf einen Eingabekanal und holen uns
ein Zeichen.

49185  LDX #2   ; Filenummer
49187  JSR $FFC6; CHKIN
49190  JSR $FFE4; GETIN

Planen wir im Voraus. Später wird unser Programm prüfen müssen, ob das
Dateiende erreicht ist. Wie checken den Inhalt des Status. Wie das geht,
wissen Sie ja schon: Speicherzelle 144 auslesen. Das Programm kann damit
allerdings nicht zu lang warten, da sich der Status während späterer
Operationen, beispielsweise bei der Zeichenausgabe zum Drucker noch ändern
kann. Also lesen und speichern wir ST jetzt:

49193  LDX 144  ; Statusbyte
49195  PHP      ; auf den Stack

Wir verwenden das X-Register, da sich im Akku ja noch das auszugebende
Zeichen von GETIN befindet. Der LDX-Befehl setzt das Zero-Flag des
Prozessors, wenn eine Null gelesen wurde (Dateiende nicht erreicht). PHP
sichert die Prozessorflags zur späteren Untersuchung auf den Stack (PHush
Processorstatus), bis wir sie brauchen.

Bevor wir jetzt allerdings das Zeichen drucken können, müssen wir den
Eingabekanal mit CLRCHN wieder schließen. Fragen Sie nicht, es scheint bei
Commodore-Computern einfach notwendig zu sein. Dabei müssen wir allerdings
vorsichtig sein: Der CLRCHN-Aufruf ändert den Inhalt des Akkumulators, das
Zeichen geht verloren. Deshalb pushen wir es auf den Stack.

49196  PHA      ; Zeichen retten
49197  JSR $FFCC; CLRCHN

Der Stack enthält nun zwei Dinge: Erstens das gerade gelesene Zeichen und
zweitens den Prozessor-Status (nicht mit dem Statusbyte ST verwechseln! Der
PHP-Befehl legt nicht den Inhalt des X-Registers auf den Stack, sondern
unter anderem eine Information darüber, ob der letzte Lesebefehl in 49193
Null ergab!). Wenn wir damit anfangen, Werte vom Stack zu holen, bekommen
wir zuerst die Werte, die zuletzt dorthin geschrieben wurden - in unserem
Fall das Zeichen.

Die Druckerausgabe enthält keine Geheimnisse, hier ist der Ausschnitt:

49200  LDX #4   ; Druckerfile
49202  JSR $FFC9; CHKOUT Ausgabekanal öffnen
49205  PLA      ; Zeichen vom Stack retten
49206  JSR $FFD2; und zum Drucker schicken
49209  JSR $FFCC; CLRCHN Ausgabekanal schließen

Gibt es noch gültige Daten, die wir aus dem Eingabekanal lesen müssen? Der
folgende Code prüft das:

49212  PLP      ; Prozessorstatus zurückholen
49213  BEQ 49185; weitere Daten, dann oben weiter

Sind keine Zeichen mehr in der Datei, können wir beide Files schließen: Zum
Beispiel erst das Druckerfile, dann die SEQ-Datei:

49215  LDA #4   ; Drucker
49217  JSR $FFC3; CLOSE 4
49220  LDA #2   ; Diskette
49222  JMP $FFC3; CLOSE 2 und fertig

Das war alles, was wir brauchen. Dieses kurze Utility können Sie nun
allgemein verwenden. Um beispielsweise die oben angelegte Datei zu drucken,
geben Sie den Befehl

SYS 49152,"TEST,S,R",8

Solche File-Lister haben in der Praxis eine große Bedeutung, wenn ohne
Datenverlust Dateien ausgelesen werden sollen. Sie sind übrigens bei der
Ausgabe nicht nur auf SEQ-Files beschränkt. Auch PRG- und vor allem
USR-Files lassen sich listen, indem Sie die Kennung ,S im Filenamen
entsprechend in ,P oder ,U ändern. Vielleicht bauen Sie ja auch noch eine
Art »Schalter« ein, mit dem man die Ausgabe wahlweise auf Bildschirm
und/oder Drucker legen kann.

Laden einer Datei

Bisher haben wir noch nicht versucht, ein File an einen bestimmten
Speicherplatz zu laden. Natürlich gibt es das Gegenstück zum LOAD-Befehl
auch in Maschinensprache, und zwar in Form der LOAD-Routine mit der Adresse
$FFD5. Auch hier müssen Sie erst mit SETPAR und SETNAM oder aber GETPAR
Filenamen, Gerätenummer und Sekundäradresse festlegen, die logische
Filenummer spielt keine Rolle. Der Inhalt des Akkumulators beim Aufruf der
Routine entscheidet darüber, ob geladen wird (A=0) oder ein VERIFY
ausgeführt (A ungleich 0). Ist die Sekundäradresse nicht Null, so wird das
File »absolut« geladen, also an die Stelle, die auf Diskette gespeichert
ist. Sie kennen diese Betriebsart, wenn Sie in Basic mit

LOAD "NAME",8,1

etwa Tools an eine vorgegebene Stelle im Speicher laden. Man kann aber auch
»relativ« laden, dem Computer also sagen: »Ignoriere die auf Diskette
gespeicherte Ladeadresse und lade das File auf jeden Fall an Adresse xxx«.
Diese Betriebsart findet beim Laden von Basicprogrammen Verwendung, da
lassen Sie hinter LOAD die ,1 einfach weg. Für die Sekundäradresse wird Null
gesetzt. In Basic wird dann immer an die Adresse geladen, die in den
Speicherzellen 43/44 steht, normalerweise der Basic-Anfang 2049. In
Assembler können wir der LOAD-Routine die Adresse mitgeben. Schreiben wir
doch einmal ein Utility, mit dem man Hires-Grafiken unabhängig, ab wo sie
gespeichert wurden immer nach 8192 laden kann. Dazu holen wir uns erst mit
CHKKOM und GETPAR die Fileparameter. Dann setzen wir die Sekundäradresse
(gespeichert in $B9) auf Null, um relativ zu laden. Die Ladeadresse 8192
(Highbyte: 32, Lowbyte: 0) übergeben wir im X- und Y-Register, im Akku eine
Null, um zu laden, nicht zu vergleichen. Fertig sieht das so aus:

       ; Beispiel 6: Grafiklader
49152  JSR $AEFD; CHKKOM Komma holen
49155  JSR $E1D4; GETPAR Parameter holen
49158  LDA #0   ; LOAD-Flag
49160  TAX      ; Lowbyte von 8192
49161  LDY #32  ; Highbyte von 8192 ($2000)
49163  STA $B9  ; Sekundäradresse Null
49165  JMP $FFD5; LOAD, Grafik in den Speicher laden

Mehr ist es nicht! Jetzt könnten Sie beispielsweise mit

SYS 49152,"DATEINAME",8

ein Bild (PRG-File) nach 8192 laden. Soll die auf Diskette gespeicherte
Adresse berücksichtigt werden, setzen Sie einfach die Speicherzelle $B9
(Sekundäradresse, dezimal 185) auf einen Wert ungleich Null. Die Übergabe
einer Adresse in X und Y kann dann entfallen.

Speichern

Was nun noch fehlt, ist die Möglichkeit, einen beliebigen Speicherbereich
auf Diskette zu speichern. In Basic speichert der SAVE-Befehl das
Basicprogramm. Dessen Grenzen sind in den Speicherzellen-Paaren 43/44
(Anfang) und 45/46 (Ende) erfaßt. Wir wollen ein Grafikbild, das im Speicher
von 8192 ($2000) bis 16383 ($3FFF) einschließlich steht, speichern. Vor dem
Aufruf der SAVE-Routine ($FFD8) müssen Sie erst wieder mit SETPAR und SETNAM
oder aber in unserem Fall GETPAR die Datei-Parameter festlegen. Dann wird im
X- und Y-Register das High- und Lowbyte der um eins erhöhten Endadresse
übergeben. Die Startadresse des zu speichernden Bereiches übergeben wir in
einem beliebigen Speicherzellen-Paar der Zeropage (in unserem Fall etwa
Adressen 2 und 3), dessen Adresse wiederum im Akku übergeben wird. Die
Sekundäradresse ist beim Speichern ebenso wie die Filenummer ohne Bedeutung.
Das alles klingt sehr umständlich, ist es aber gar nicht, wie das folgende
Beispiel beweist:

       ; Beispiel 7: Grafik speichern
49152  JSR $AEFD; CHKKOM Komma holen
49155  JSR $E1D4; GETPAR
49158  LDX #0   ; bis $4000 ausschließlich speichern (Lowbyte 0)
49160  LDY #64  ; Highbyte von $4000
49162  STX 2    ; ab $2000 speichern (Lowbyte 0)
49164  LDA #32  ; Highbyte von $2000
49166  STA 3    ; merken
49168  LDA #2   ; Startadresse in Speicherzellen 2 und 3
49170  JMP $FFD8; SAVE-Routine: Bild speichern

Na sehen Sie, gar keine Schwierigkeit. Die SAVE-Routine erzeugt auf Diskette
ein PRG-File mit in diesem Fall 33 Blocks Länge, das im normalen Format
(erst zwei Bytes Ladeadresse, hier etwa 8192, dann die Datenbytes aus dem
Speicher) das Grafikbild enthält.

Das war's!

Zum Abschluß noch ein Hinweis zu den Routinen SETPAR (in der Fachliteratur
auch oft SETLFS genannt) und SETNAM. Wie Sie wissen, dienen die beiden
Routinen dazu, vor Dateibefehlen die File-, Gerätenummer, Sekundäradresse
sowie den Dateinamen zu definieren. Werfen wir einen Blick hinter die
Kulissen: Hier je ein komplettes Assemblerlisting, wie SETPAR und SETNAM
intern funktionieren:

**************************  SETPAR Fileparameter setzen
FFBA  4C 00 FE  JMP $FE00   SETPAR-Sprung
FE00  85 B8     STA $B8     logische Filenummer
FE02  86 BA     STX $BA     Geräteadresse
FE04  84 B9     STY $B9     Sekundäradresse
FE06  60        RTS         und fertig

**************************  SETNAM Filenamen setzen
FFBD  4C F9 FD  JMP $FDF9   SETNAM-Sprung
FDF9  85 B7     STA $B7     Länge
FDFB  86 BB     STX $BB     Adresse low
FDFD  84 BC     STY $BC     Adresse high
FDFF  60        RTS         und fertig

Die Routinen SETPAR und SETNAM schreiben also nur die Inhalte der Register
A, X und Y in je drei Speicherzellen, es werden also im Prinzip nur je drei
POKEs ausgeführt. Was lernen wir daraus? Richtig, es ist nicht immer
optimal, JSR $FFBA oder $FFBD aufzurufen. Betrachten Sie das Beispiel 5
(File-Lister). Hier sollte ab Adresse 49158 eigentlich nur die File- und
Gerätenummer auf 2 gesetzt werden, auch wenn der Anwender etwas anderes oder
gar nichts angegeben hat. Da sich beim Aufruf von SETPAR in 49163 jedoch ein
definierter Wert auch im X-Register (Gerätenummer) befinden muß, mußten wir
umständlich in 49158 die alte Gerätenummer in das Register laden, nur damit
sie dann von SETPAR in $FE02 wieder gepoket werden kann. Einfacher wäre es
also hier (und übrigens auch in Beispiel 4) gewesen, wenn wir den Teil von
49158 bis 49163 ersetzt hätten durch

  LDA #2
  STA $B8  ; logische Filenummer
  STA $B9  ; Sekundäradresse

Dadurch hätten wir zwei Bytes gespart. Ebenso könnte man die Befehlsfolge

  LDA #0   ; kein Filename
  JSR $FFBD; SETNAM

die beim Eröffnen eines Druckerfiles die Länge des Filenamens auf Null setzt
(vergleiche z.B. Beispiel 3 ab 49163) durch die beiden Befehle

  LDA #0   ; kein Filename
  STA $B7  ; Länge des Filenamens

ersetzen. Ersparnis: Ein Byte. Außerdem läuft die Alternative erheblich
schneller als die »Kochrezept-Version«.

Damit wären wir am Ende unseres kleinen Streifzugs durch die gar nicht so
weite Welt der Ein/Ausgabe in Assembler angelangt. Experimentieren Sie doch
noch ein wenig mit dem Gelernten, das kann sicher nicht schaden! Zum
Abschluß noch eine tabellarische Übersicht über die behandelten
Betriebssystem-Routinen. Der Stern bei der Adreß-Angabe weist darauf hin,
daß es sich nicht um eine sogenannte »Kernal-Routine« handelt, daß also die
Adresse ausschließlich für den C 64 gilt.

Name       Adresse      Funktion
AXOUT   $BDCD = 48589*  16-Bitzahl ausgeben
CHKIN   $FFC6 = 65478   Kanal für Eingabe öffnen
CHKKOM  $AEFD = 44797*  Komma holen
CHKOUT  $FFC9 = 65481   Kanal für Ausgabe öffnen
CHRIN   $FFCF = 65487   Zeicheneingabe (siehe unten)
CHROUT  $FFD2 = 65490   Zeichenausgabe
CLALL   $FFE7 = 65511   Alle Dateien und Kanäle schließen
CLOSE   $FFC3 = 65475   Datei schließen
CLRCHN  $FFCC = 65484   Kanäle schließen
CRLF    $AAD7 = 43735*  Return ausgeben
GETIN   $FFE4 = 65508   Zeicheneingabe (siehe unten)
GETPAR  $E1D4 = 57812*  LOAD/SAVE-Parameter holen
LOAD    $FFD5 = 65493   Datei laden
OPEN    $FFC0 = 65472   Datei öffnen
SAVE    $FFD8 = 65496   Speicherbereich speichern
SETNAM  $FFBD = 65469   Filenamen setzen
SETPAR  $FFBA = 65466   File-, Gerätenummer und Sekundäradresse setzen
SPACE   $AB3F = 43839*  Leerzeichen ausgeben

Merke: Bei Eingabe von einem File sind GETIN und CHRIN gleichwertig, in
diesem Fall ist aus technischen Gründen GETIN vorzuziehen. Bei Eingabe von
Tastatur liest GETIN ein Zeichen aus dem Tastaturpuffer und liefert eine
Null, wenn keine Taste gedrückt wurde, während bei CHRIN ein Eingabecursor
erscheint und auch längere Texte erfaßt werden können.

Wichtige Speicherzellen (C 64):

$90 = 144  Statusvariable ST
$B7 = 183  Länge des Filenamens
$B8 = 184  logische Filenummer
$B9 = 185  Sekundäradresse
$BA = 186  Gerätenummer
$BB = 187  Adresse des Filenamens LOW
$BC = 188  Adresse des Filenamens HIGH








Multitask - Mehrere Maschinenprogramme gleichzeitig ablaufen lassen

Welcher C64-Programmierer würde es sich nicht wünschen, mehrere
Maschinenprogramme gleichzeitig ablaufen lassen zu können? Mit dem hier
vorgestellten Tool »Multitask« wird das zum Kinderspiel. Bis zu 31
Assemblerroutinen laufen mit nur leicht verringerter Geschwindigkeit quasi
gleichzeitig ab, auf Wunsch kann dabei sogar noch in Basic
weiterprogrammiert werden.

von Nikolaus M. Heusler

Die Routine wird mit

LOAD "MT 49152",8,8

geladen. Danach sollten Sie NEW eingeben, um alle Zeiger richtigzustellen.
Andernfalls könnte die Fehlermeldung ?OUT OF MEMORY ERROR erscheinen. Als
nächstes lädt man die Routinen, die gleichzeitig ablaufen sollen, in den
Speicher. Mit dem Befehl

SYS 49152, ad1, ad2, ad3, ad4, ...

werden nun beliebig viele solcher Maschinenprogramme (Minimum 1, Maximum 31)
fast gleichzeitig gestartet. Sofern sie sich nicht gegenseitig stören (siehe
unten), laufen sie quasi parallel ab.

Die Startadressen der Routinen werden nach dem Komma übergeben: ad1, ad2,
ad3 und so weiter. Geben Sie dabei einfach die Adressen an, die sonst auch
hinter SYS stehen würden, um die Routinen einzeln zu aktivieren. So würde
etwa der Befehl

SYS 49152, 20000, 32000

zwei Maschinenprogramme ab 20000 und 32000 gleichzeitig starten. Wenn in
dieser Parameterliste noch das Kaufmannsund (&) steht, kehrt der SYS 49152
nach dem Start der Maschinenprogramme nach Basic zurück. Jetzt kann
programmiert werden, während die Assemblerroutinen im Hintergrund laufen
(besonders praktisch für Tools und Programmierhilfen oder ähnliches)! Im
obigen Fall also etwa:

SYS 49152, 20000, 30000, &

Die Anwendung des & kann beliebig erfolgen, also auch zum Beispiel

SYS 49152, &, 20000, 30000

oder

SYS 49152, 20000, &, 30000

Anstelle der Zahlen können natürlich auch Variablen oder Rechenausdrücke für
die Startadressen verwendet werden. Allerdings darf keine der
Maschinenroutinen, die gestartet werden sollen, an Adresse 0 beginnen. SYS
49152,...,0,... ist also verboten. Die Routine fängt Fehleingaben ab, es
erscheint ein ?ILLEGAL QUANTITY ERROR.

Hier ein praktisches Beispiel für die Anwendung:

30000 INC 53280
30003 JMP 30000

Startet man dieses Programm mit SYS 30000, flimmert der Bildschirmrahmen in
einer Endlosschleife. Soll dieser Effekt auftreten, während Basic läuft,
wenden Sie einfach Multitask an:

SYS 49152,30000,&

Nun könnte gleichzeitig dazu noch ein Sprite horizontal bewegt werden,
solange der Feuerknopf eines Joysticks in Port 2 gedrückt wird:

35000 LDA #101
35002 STA 53269
35005 STA 53248
35008 STA 53249
35011 LDA #1
35013 STA 2040
35016 LDA 56320
35019 AND #16
35021 BNE 35016
35023 INC 53248
35026 JMP 35016

Im Bereich von 35000 bis 35015 wird das Sprite sichtbar auf den Monitor
gebracht. Ab 35016 beginnt die Endlosschleife, die für die Bewegung bei
<Feuer> zuständig ist.

SYS 49152,35000,30000,&

läßt diese Routine ablaufen - gleichzeitig mit Basic und dem oben gezeigten
Flimmern!

Bei den Maschinenprogrammen, die von Multitask ausgeführt werden, handelt es
sich also meistens um Endlosschleifen. Dennoch ist eine Funktion eingebaut,
die auch Ausstiege mit RTS verkraftet. Näheres dazu weiter unten.

Einige Anregungen für Routinen, die Sie miteinander und zusammen mit Basic
aktivieren könnten: Tastenklick, eingeblendete Echtzeituhr, Escape-Funktion
(Löschen des Quote-Modus bei besonderer Tastenkombination), verbesserter
Editor, Reset auf Tastendruck, ein Sprite, das »von alleine« bewegt wird,
während ein Basic-Spiel läuft, und vieles mehr.

Als Beispiel für die Anwendung mag auch das Demo dienen. Es wird mit

LOAD "MT.DEMO",8

geladen und mit RUN gestartet. Das Basicprogramm lädt nun noch das steuernde
Maschinenprogramm, die Unterroutinen und einige Spritedaten nach. Sodann
erscheint die Frage, ob Basic weiter ablaufen soll. Drücken Sie die Taste
<1> oder <2>. Es kann nun einige Sekunden dauern, bis wirklich alle
Maschinenroutinen ablaufen, dann erscheint ein galoppierendes animiertes
buntes Pferd auf dem Schirm. Es wird von einigen Maschinenroutinen ab 10000
gesteuert:

10000 horizontale Bewegung
10050 vertikale Bewegung
10100 Animation
10150 Pferd sichtbar machen
10200 (interne Warteschleife)
10250 Farbänderung

Bei allen Routinen (bis aus 10150 und 10200) handelt es sich um
Endlosschleifen wie oben erklärt. Jede dieser Routinen kann also mit SYS
gestartet werden. Geben Sie SYS 10150 ein, wird nur das Pferd eingeschaltet.
Starten Sie jetzt die vertikale Bewegung mit SYS 10050, fährt das Pferd
einfach nur nach oben und unten, ohne sonstige Effekte. Das im Demoprogramm
erzeugte Sammelsurium wird demnach zum Beispiel mit

SYS 49152, 10150,10000,10050,10100,10250,&

gestartet. Das Zeichen & am Ende bewirkt den Basic-Rücksprung.

Im Prinzip können mit dieser Routine somit beliebige Assemblerroutinen, die
an sich Endlosschleifen darstellen, miteinander ablaufen. Sie müssen
allerdings aus technischen Gründen einigen Bedingungen entsprechen: Zum
einen dürfen keine IRQ-Manipulationen wie SEI oder Verbiegen des IRQ-Vektors
vorgenommen werden. Andernfalls kann es passieren, daß etwa der Task, der
den Interrupt sperrt, nicht mehr verlassen und als einziger ausgeführt wird.
CLI dagegen ist erlaubt. Ebenso ist die Veränderung des Prozessorports
(Adresse 1) zu vermeiden. Auch sind natürlich Komplikationen zu erwarten,
wenn mehrere Maschinenprogramme die gleichen Speicheradressen verwenden oder
gar im selben Bereich arbeiten. Das Utility selbst belegt auch bestimmte
Speicherstellen, und zwar den Bereich 49152-49546, $E000-$FFFF unter dem RAM
und die Zeropageadressen 2 und 3. Außerdem sollten Operationen mit
Peripheriegeräten (Floppy, Drucker, Band) vermieden werden, während das
Multitasking aktiv ist.

Mit

SYS 49155

wird der Multitask-Betrieb wieder abgeschaltet. Unter Umständen ist es
günstig, die IRQ-Geschwindigkeit und damit die Tast-Wechselgeschwindigkeit
zu verändern. Dazu dient der Befehl

SYS 49158,X

X ist ein Wert zwischen 1 und 255, der Wert 0 wirkt wie 256. Je größer X
gewählt wird, desto langsamer wechselt der C 64 die Tasks. Lassen Sie den
Parameter X weg, wird der Standardwert 60 eingesetzt:

SYS 49158

Bei diesem Utility ist es interessant, zu erfahren, wie ungefähr es intern
funktioniert. Genauere Information kann der interessierte Leser dem
kommentierten Quelltext entnehmen.

Grundlage für das Multitasking ist der Systeminterrupt (IRQ). Bei jedem IRQ
unterbricht der C 64 das momentan laufende Maschinenprogramm, um eine
Interruptroutine abzuarbeiten. In diesem Fall handelt es sich um eine neue
Routine. Diese holt sich zunächst die Adresse vom Stack, an der das
aufrufende Programm unterbrochen wurde, und speichert diese. Einer Tabelle
wird die Startadresse des ersten zu startenden Programmes entnommen und auf
den Stack geschrieben. Wenn der Computer jetzt die IRQ-Routine verläßt,
findet er die neue Adresse auf dem Stack und macht mit dem nächsten Programm
weiter - bis zum nächsten IRQ. Auf diese Weise kommen alle gewählten
Routinen nacheinander je einmal dran. Danach wird von vorn begonnen. Da die
IRQs sehr häufig (normal 60 mal in der Sekunde) auftreten, wird der Eindruck
erweckt, die Programme laufen gleichzeitig ab.

Neben der Rettung der Startadressen ist es erforderlich, die drei
Prozessorvariablen A, X und Y sowie den Stackpointer, den Stack (Adresse 256
bis 511) und das Statusregister zu speichern. Dazu dient ein reservierter
Speicherbereich ab $E000 unter dem Kernal-ROM gemäß untenstehender
Speicherbelegung. Dadurch bleibt in den Tasks neben der Möglichkeit, ganz
normal alle Prozessor-Register zu benutzen, sogar der Stack voll und ganz
erhalten. Befehle wie PLA und PHA dürfen wie gewohnt ausgeführt werden
(siehe dazu die untenstehende Bemerkung zum Stack).

Am Ende der IRQ-Routine wird allerdings noch die normale System-IRQ-Routine
ausgeführt, damit Effekte wie das Cursorblinken und der Editor weiterhin
erhalten bleiben.

Ein Problem stellt sich noch, wenn eines der Maschinenprogramme keine
Endlosschleife ist, sondern mit RTS endet. Da es dann keine sinnvolle
Rücksprungadresse auf dem Stack finden würde, wäre ein Absturz unvermeidbar.
Daher erzeugt das Utility beim ersten Aufruf jeder Routine eine künstliche
Rücksprungadresse, die auf eine Endlosschleife zeigt, und schreibt sie auf
den Stack. Endet ein Task mit RTS, wird als nächstes diese Endlosschleife
ausgeführt. Der Task ist also abgeschlossen, stört aber nicht die Ausführung
der übrigen Programme.

Ähnlich funktioniert die Auswahlmöglichkeit, ob das Basic weiter ablaufen
soll. Wählen Sie diese Option, kehrt der Befehl SYS 49152 nach der
Ausführung einfach mit RTS in den Basic-Editor zurück. Dieser ist jetzt
einer der auszuführenden Tasks. Soll kein Basic ablaufen, endet SYS 49152 in
einer Endlosschleife.

Vor dem ersten Aufruf jedes Tasks wird außerdem der Stackpointer auf 247
gesetzt, damit das Maschinenprogramm den vollen Stack zur Verfügung hat. Für
den Programmierer ist dies jedoch nicht von Bedeutung.

Wir wünschen Ihnen viel Spaß mit diesem neuartigen Multitask-Gefühl. Was Sie
alles damit machen können, liegt voll und ganz bei Ihnen und Ihrer
Phantasie. Genießen Sie die umfangreichen Möglichkeiten dieser neuen
Technik!

Speicherbelegung (hexadezimal):
0002-0003  temporär: Zeiger auf Startadressen-Tabelle
c000-c18a  Maschinenprogramm
c000-c008  Sprungtabelle
c009       Init
c01b       Parameterschleife
c086       Endlosschleife, falls Basic ausgeschaltet
c08f       Ende Multitasking
c095       IRQ-Speed setzen
c0a4       Endlosschleife für Task-Ende mit RTS
c0a7       neue IRQ-Routine
c0b0       nächsten Task suchen
c0c2       neue Adresse merken
c0cd       alte Adresse speichern
c0df       neue Register merken
c0fd       alte Register speichern
c119       Stacks vertauschen
c131       ab hier einige Selbstmodifikationen
c139       Zeiger auf nächsten Task
c147       Stackpointer vorbereiten
c14f       Endlosschleife bei RTS vorbereiten
c15c       neue Adresse setzen
c166       neue Register setzen
c181       neue Hardware-NMI-Routine
c188       Flag: Basic eingeschaltet
c189       Anzahl Tasks
c18a       Flag: Task bereits einmal aufgerufen
e000-e03f  Startadressen-Tabelle
e040-e05f  Tabelle: A-Register der Tasks
e060-e07f  Tabelle: X-Register der Tasks
e080-e09f  Tabelle: Y-Register der Tasks
e0a0-e0bf  Tabelle: Status-Register der Tasks
e0c0-e0df  Tabelle: Stackpointer der Tasks
e100-feff  Stackinhalte der Tasks








Das NSS-Kernal: Runderneuert!

An diesen Beitrag werden Sie vielleicht in naher Zukunft jeden Tag erinnert
werden, wenn Sie Ihren Computer einschalten: Aus dem C 64 wird nun doch ein
richtiger Profi-Computer! Ein neues Betriebssystem putzt den alten Kasten
mächtig heraus. Was halten Sie davon: Directory und andere Floppy- und
Druckerfunktionen auf Tastendruck, Renew-Routine, Schnell-Lader mit 16
facher Geschwindigkeit, Funktionstastenbelegung, Renew-Routine und viele
Sonderfunktionen für den Programmierer und Anwender.

Das neue Kernal ist eine Hardware-Erweiterung. Dazu muß im C 64 ein IC
ausgewechselt werden. Das neue Kernal, das Sie von uns als Datei erhalten,
muß wie unten beschrieben in ein Eprom gebrannt werden, welches dann gegen
ein ROM im C 64 ausgetauscht wird. Ab jetzt sind die neuen Funktionen sofort
nach dem Einschalten des C 64 verfügbar. Sollte es wider Erwarten dennoch
einmal Probleme mit anderen Programmen geben, läßt sich diese Low-Cost
Erweiterung mit einem Schalter einfach abschalten.

Betriebssystem - Beschreibung

Tastenfunktionen
<CTRL A>   Fastload on/off (wird angezeigt)
<CTRL O>   RENEW + CLR (Anzeige: »RENEW OK«)
<CTRL F>   FloppyIRQ hochsetzen => schnellere Kopfbewegung (Anzeige:
           »IMPROVED...«), funktioniert unter Umständen nicht gleich beim
           ersten Mal
<CTRL U>   Die SAVE-Routine speichert nun auch das RAM unter dem Basic-ROM
           (Anzeige: »SAVE RAM«)
<CTRL K>   Alle neuen Tasten aus; Rückgängigmachen mit <RUN STOP/RESTORE>
<CTRL Z>   Führt ein unterbrochenes LIST fort
<SHIFT/RUN STOP>  «LOAD ":*" ,8,1 {RETURN} SYS {RETURN}»
<f1>       Directory ohne Programmverlust
<f3>       Fehlerkanal anzeigen
<f5>       Floppybefehl eingeben (Abschluß mit <RETURN>)
<f7>       «LOAD............,8,1» - Laden aus dem Directory
<f2>       Wie F7, zusätzich <RETURN> und SYS <RETURN>
<f4>       LIST <RETURN>
<f6>       SAVE "
<f8>       RUN <RETURN>
<CBM  f5>  sendet Text zum Drucker 4, Sek. Adr. 0
<CTRL f5>  sendet Text zum Drucker 4, Sek. Adr. 7
Prompts: <f5> alleine: »>«,   mit <CBM>: »]«,   mit <CTRL>: »)«
<CR> am Zeilenende erfolgt automatisch (ohne <LF>)

Wann reagieren diese Tasten nicht? Wenn mindestens eine dieser Bedingungen
zutrifft:

· Abgeschaltet (POKE (0),175 oder wegen <CTRL K>)
· Programm-Modus aktiv (PEEK (157)=0)
· INSERT-Modus aktiv (PEEK (216) > 0)
· Hochkommamodus aktiv (PEEK (212) > 0)
· Computer wartet gerade nicht auf Eingabe (Routine ab $E5CA, Veränderung:
$E5E7)

Sonstiges

1. Peripheriegeräte:
· Fastload (EXOS-Version) lädt 12-14 mal so schnell von Diskette 1541
· Angabe »,8,1« kann bei LOAD und VERIFY entfallen
· LOAD "NAME",8,0,ADR lädt Programmfile ab ADR
· LOAD "NAME",8 ohne Sekundäradresse lädt absolut (,8,1)
· LOAD zeigt (außer im Programmodus oder bei PEEK (1) ungleich 55) an, wohin
geladen wird (dezimal)
· SAVE "Klammeraffe:" funktioniert! (Anzeige: SCRATCHING...) Das Programm
wird erst gelöscht (S:) und dann normal gespeichert
· Bei LOAD ,8,1 kann NEW in den meisten Fällen entfallen
· Bei VERIFY wird sofort nach dem ersten Fehler abgebrochen
2. Bedienung des C 64:
· Bildschirmfarben: Rahmen und Hintergrund dunkelgrau, Schrift weiß
· Cursorgeschwindigkeit erhöht
· Tastenrepeat beim Einschalten für alle Tasten (PEEK (650)=235)
3. Basic-Programmierung:
· Kein Listschutz mehr wirksam (Ausnahme: Nullbyte nach Zeilennummer)
· <SHIFT> hält Scrollen an, <CTRL> verlangsamt nicht mehr so stark
· SYS ohne Zahl startet das letztgeladene Programm an der Adresse, an die es
geladen wurde (oder mit RUN, wenn Adresse = DEEK (43)). Die Ladeadresse
merkt sich das System in DEEK (671) (ehemals IRQ-Vektor bei
Cassettenbetrieb)
· Durch Druck auf <CTRL> und <RESET> können Sie ein Maschinenprogramm über
den Vektor 671/2 starten (z.B. Spritekiller möglich!)
4. Hardware:
· <RESET>: Gleichzeitig mit <SPACE>: <RESET>-Schutz überlistet
                            <C=>:    Klingeln ertönt (SID-Test)
                            <CTRL>:  Autostart (siehe oben)
           RAM-Test entfällt (Reset wesentlich schneller)
           CIAs programmiert auf 50 Hz (Routine ab $FDA3)
· <RESTORE> + <SPACE> überlistet <RESTORE>-Schutz
· Grafik ab $E000 wird bei <RESET> oder <RESTORE> nicht zerstört
· Versionsnummer (PEEK(65408)) = 66
5. Korrektur von Systemfehlern:
· Bildschirmlöschroutine problemlos
· Das Bildschirmlöschen geht etwas schneller
6. Einschränkungen:
· Tape kann nicht mehr benutzt werden
· WICHTIG: Kein VERIFY bei aktiviertem Fastload möglich
· Die RS 232-Schnittstelle kann nicht mehr benutzt werden
· Das Directory kann nicht mit dem Schnell-Lader geladen werden. Es sollte
nur mit <F1> geladen werden.

Interna
POKE 0, PEEK (0) OR 128    Tasten aus
POKE 0, PEEK (0) OR 64     Fastload aus
POKE 0, PEEK (0) AND 127   Tasten an
POKE 0, PEEK (0) AND 191   Fastload an
<RUNSTOP RESTORE> schaltet beide Funktionen an
Also: PEEK (0): Bit 7: Tasten   (1 = aus, 0 = an)
                Bit 6: Fastload (1 = aus, 0 = an)

Einbau

Das entsprechende File ist auf ein Eprom vom Typ 27128 zu brennen
(Eprom-Brenner). Dieses Eprom ist in einen handelsüblichen Adaptersockel zu
stecken (zum Beispiel von REX Datentechnik, Hagen, Bestellnummer 9598), der
dann anstelle des Kernal-ROMs (Bezeichnung U4) in den C 64 (alte Version)
eingebaut wird. U4 findet sich, wenn Sie den C 64 aufklappen, als der
mittlere der drei kleineren 24-poligen Chips in der oberen Reihe links unter
dem Cassettenport und rechts vom Userport. Falls das System in ein 27128
gebrannt wird, soll das neue System in der unteren Bank 0 ($0000-$1FFF) und
das Original-Kernal in Bank 1 (oben, $2000-$3FFF) stehen. Der Einbau sollte
nur vom Fachmann vorgenommen werden! Das NSS-Kernal eignet sich nicht zum
Betrieb in einer ROM-Steckkarte für den Expansion-Port, da hier die
Einblendung in den Bereich ab $8000 erfolgt. Für den Einbau in einen neuen C
64 muß zusätzlich noch der Basic-Interpreter in das Eprom 27128 gebrannt
werden, ein Umschalten ist dann nicht ohne weiteres möglich.

Brennen des Eproms

Um das Kernal in ein handelsübliches Eprom zu brennen, benötigen Sie neben
dem Eprom 2764 einen geeigneten Eprom-Brenner. Jetzt wird das File »NSS
KERNAL 2764« unter Beachtung der Hinweise in der Anleitung zum Brenner in
das Eprom gebrannt. Soll bei Bedarf auf das alte Betriebssystem umgeschaltet
werden können, verwenden Sie ein Eprom vom Typ 27128 und brennen in dieses
das File »NSS KERNAL 27128«. Zur Umschaltung beachten Sie die Hinweise in
der Anleitung zum Adaptersockel.

Sicherheitsvorschriften für CMOS-ICs

CMOS-ICs sind sehr empfindliche elektronische Bausteine. Daher sollten sie
mit besonderer Vorsicht behandelt werden. Diese Chips sind unter anderem
sehr empfindlich gegen statische Aufladung, daher sollten Sie Berührungen
vor allem der elektrischen Anschlüsse (»Beinchen«) vermeiden. Der schwarze
Stoff (Leitgummi) schützt gegen Aufladungen, er muß jedoch vor dem Betrieb
entfernt werden. Auch sollten diese Bausteine keinen extremen Temperaturen
oder Schwankungen ausgesetzt werden. Ebenfalls sind größere mechanische
Belastungen (z.B. Stöße, Reibung) zu vermeiden. Das IC darf nur bei
ausgeschaltetem Rechner eingesetzt werden.

Eproms werden durch UV-Licht gelöscht. Daher sollten Sie nicht den
Schutzaufkleber abziehen, und intensive Sonnenstrahlung oder die Bestrahlung
durch UV-Lampen, etwa Höhensonnen, vermeiden.

Bestell-Service

Sollte es Ihnen zu mühsam oder nicht möglich sein, die Datei in ein Eprom zu
brennen, können Sie beim Verlag ein einbaufertiges gebranntes Eprom komplett
mit Adapterplatine erhalten. Das Bauteil muß dann nur noch an Stelle des
alten ROMs in den C 64 eingesetzt werden. Der Preis für den Zusatz beträgt
DM 79,- (zahlbar im Voraus in bar oder per Scheck oder bequem per
Nachnahme). Geben Sie bei der Bestellung bitte an, ob Sie einen neuen oder
alten C 64 besitzen.

Die Adresse:

IPV Ippen & Pretzsch Verlags GmbH
Pressehaus Bayerstraße 57-59
8000 München 2
Tel. 089/8542412
Fax. 089/8545837

Dieses Angebot ist leider nicht mehr gueltig. Der IPV Verlag ist nicht mehr
unter dieser Anschrift erreichbar.

Hinweis: Der Einbau des Bauteils in Ihren C 64 ist nur möglich, falls das
Kernal-ROM (Position U4 beim alten und neuen C 64) gesockelt ist, da man
sonst das alte IC nicht ohne weiteres entfernen kann! Falls nicht, müssen
Sie das alte Original-IC auslöten und durch einen Sockel ersetzen. Bitte
beachten Sie, daß durch diesen Eingriff jegliche Garantieansprüche am
Computer verlorengehen.








Jetzt wird's kalt: Eisberg

Ganze 32 Fehler- und Störungsmeldungen hält der C 64 für den Programmierer
bereit. Aus eigener Erfahrung wissen Sie, wie ärgerlich es ist, wenn einen
der Computer so besserwisserisch und kalt abserviert. Aber Sie sitzen am
»längeren Hebel«! Schalten Sie die Fehlermeldungen doch einfach ab - mit
»Eisberg«. Man kann eingeben, was man will, es erscheinen einfach keine
Fehlermeldungen mehr. Dieses nur drei Blocks kurze Gag-Programm hat jedoch
durchaus auch praktischen Nutzen. Machen auch Sie Ihre Programme
professioneller!

Laden Sie das Programm »Eisberg« (oft ist es gar nicht so einfach, einen
guten Namen für ein neues Programm zu finden) mit dem Befehl

LOAD "EISBERG",8

Der Start erfolgt mit RUN, Assembler-Kenntnisse sind also zur Anwendung
dieses Maschinenprogramms nicht notwendig. Eine Einschaltmeldung erscheint.
Ab jetzt sind alle Basic-Fehlermeldungen sowie die Störungs-Hinweise ?REDO
FROM START und ?EXTRA IGNORED bei INPUT-Befehlen abgeschaltet. Sie können
eingeben, was Sie wollen, es erscheint einfach keine Fehlermeldung mehr:

PRINT 1/0
HALLO
A = SIN
TI$ = "ANDREAS"
RETURN:RETURN
NEXT
1 GOSUB 1
PRINT FNX(0)
POKE -1,4834
PRINT 1E99
LOAD "$",30
PRINT VAL(18)
A$ = 8
CONT
DIM O(10),O(11)
PRINT O(1000)
INPUT
PRINT ASC("")
GOTO 65000

Bei allen diesen Befehlen wirft der Computer sonst gnadenlos irgend eine
Fehlermeldung aus. Mit aktiviertem Eisberg wird der »defekte« Befehl
entweder einfach gar nicht ausgeführt, sondern übersprungen, oder der C 64
gibt ein unsinniges Ergebnis aus.

In einigen Fällen - und darin liegt der praktische Wert von diesem
Hilfsprogramm - wird der Befehl sogar »kulant« ausgeführt, der Computer
nimmt einen anderen Befehl an, dessen Wirkung der vom Programmierer
gewollten nahekommt. Beispiel GOTO-Befehl: Beziehen Sie sich mit GOTO 90 auf
eine nicht existierende Programmzeile, sucht sich das Programm die Zeile mit
der nächst höheren Nummer und springt diese an. Ist im Beispiel die Zeile 90
nicht existent, aber dafür Zeile 100, so geht es in Zeile 100 weiter (oder
in der nächsten Zeile, die im Programm auf 90 folgt).

Ein weiterer ärgerlicher Fehler, der in Basic manchmal auftritt, ist der
?ILLEGAL QUANTITY ERROR, den die ASC-Funktion auf einen Leerstring angewandt
ausgibt. Beim Lesen aus Dateien werden aber für Nullbytes leere Strings
erzeugt. Die ASC-Funktion wurde daher so umgebaut, daß ein leerer String den
ASCII-Code Null hat. Komplizierte Konstruktionen wie

10 GET#2,A$
20 A=ASC(A$+CHR$(0))

um eine Datei zu analysieren können Sie sich in Zukunft sparen.

Oder es soll mit GET A eine Menüabfrage realisiert werden. Gewöhnlich wird
die Betätigung einer alphanumerischen Taste durch einen ?SYNTAX ERROR
quittiert, nicht aber mit Eisberg.

Interessante mathematische Effekte lassen sich beobachten. Die Teilung durch
Null, mathematisch als Unendlich definiert, ergibt beim C 64 eine sehr große
Zahl, also sogar fast das korrekte (?) Ergebnis. Die Logarithmus-Funktion
ist nur für positive Zahlen definiert. Gibt man einmal PRINT LOG(0) ein,
erscheint kein ?ILLEGAL QUANTITY ERROR mehr, sondern eine negative Zahl.
Wird diese als Argument der Umkehrfunktion EXP gesetzt, ist das Ergebnis
fast Null. Im Grunde genommen liegt also nur ein Rundungsfehler vor.
Ähnliche Effekte treten bei Anwendung der transzendenten Funktionen auf.

In anderen Fällen arbeitet das Programm zwar fehlerhaft, aber es steigt
nicht aus. Beispielsweise erscheint die ?STRING TOO LONG-Meldung bei zu
langen Texten nicht mehr, es werden einfach alle Zeichen ab Nr. 256
abgeschnitten. Bei zu hohen Werten etwa hinter POKE verwendet der Computer
nur die Bits, die ihn interessieren. POKE 4,900 wirkt also wie POKE 4,132,
da das Lowbyte von 900 gerade 132 ist. Gleiches gilt für die Adreßangabe bei
SYS, POKE, WAIT und PEEK.

Die Liste läßt sich beliebig fortsetzen. RETURN ohne GOSUB, zu komplizierte
Verschachtelungen, falsche oder fehlende Parameter, Dateifehler, fehlende
Doppelpunkte oder Kommas, nichts bringt den Computer mehr aus der Ruhe.
Fertige und ausgetestete (!) Programm werden so noch professioneller, da im
Falle eines Bedienungs- oder übersehenen Programmierfehlers kein Ausstieg
mit einer Fehlermeldung mehr erfolgt.

Es soll betont werden, daß alle Funktionen des C 64 absolut unverändert
normal arbeiten, wenn keine Fehler auftreten. Am Lauf eines fehlerfreien
Programms oder Algorithmus wird sich also rein gar nichts ändern, wenn
Eisberg aktiviert ist.

Eisberg bleibt auch nach einem Warmstart mit <RUN STOP/RESTORE> aktiv. Es
läßt sich nur mit einem Reset oder dem Befehl

POKE 1,55

ausschalten. Danach erfolgt der Neustart, falls sich das Steuerprogramm noch
im Speicher befindet, mit

SYS 51200

Zur Erklärung der internen Vorgänge: Nach dem Laden und Starten kopiert sich
Eisberg in einen Bereich von 51200 bis 51711 ($C800 bis $C9FF) und startet
sich dort. Jetzt werden das Basic- und das Betriebssystem-ROM in die
darunterliegenden RAMs kopiert. Dort nimmt das Programm umfangreiche
Änderungen vor. An vielen Stellen werden Branch-Befehle, die bei Störungen
eine Fehlermeldung auslösen, unwirksam gemacht. Manche Routinen, die auf
Fehlbedienung prügen, werden einfach mit einem RTS unwirksam gemacht. An
einigen Stellen baut Eisberg Sprungbefehle ein, die in eine Routine münden,
die das Ende des aktuellen Basicbefehle suchen (DATA-Befehl) und dann die
Interpreterschleife aufrufen. Diese Routine ab $A19E (dort standen vorher
die Original-Fehlermeldungstexte) bewirkt, daß ein fehlerhafter Befehl
einfach nur übersprungen wird, es erfolgt kein Programmabbruch. Diese
Technik hat gegenüber der Methode, einfach die Zentralroutine zur Ausgabe
einer Fehlermeldung auf den Basicstart zu verbiegen, den Vorteil, daß ein
fehlerhaftes Programm weder mit noch ohne Meldung beendet, sondern einfach
beim nächsten Befehl fortgesetzt wird.

Nach den Änderungen schaltet Eisberg mit POKE 1,53 die ROMs aus und die RAMs
ein. Dort befinden sich jetzt modifizierte Versionen von Kernal und Basic,
die ab sofort ablaufen.

Der Bereich ab 51200 wird jetzt nicht mehr benötigt und steht ebenso wie der
Basicspeicher anderen Anwendungen offen.









Absturz? Nein Danke! »Uncrash« hilft

Computer abgestürzt, Programm futsch? Selbst schuld! Hätten Sie vorher
»Uncrash« aktiviert, hätten Sie das Schlimmste vielleicht verhindern können.
Sowohl Basic- wie auch Maschinenprogrammierer werden dieses kleine Utility
besonders schätzen, das den C 64 praktisch absturz-steril macht. Mit diesem
Programm werden Sie, wenn überhaupt, nur noch selten wegen eines Absturzes
Daten verlieren. Enthalten ist eine Renew-Routine, die auch die
Variablenwerte wiederherstellt.

Einer der großen Vorzüge des C 64 gegenüber anderen Homecomputern ist die
Möglichkeit, ihn völlig an die eigenen Bedürfnisse anzupassen. Mit seinen
Vektoren und dem Prozessorport haben Sie als Programmierer weitgehenden
Einfluß auf die internen Vorgänge. Diese offene Architektur macht den
Computer allerdings auch sehr verwundbar gegen falsche Programmierung. Ein
einziges falsches Kommando und Totenstille kehrt ein. Manchmal arbeitet das
Gerät nach <RUN STOP/RESTORE> weiter - aber nicht immer. Sie können den
Rechner aus- und wieder einschalten, das hilft garantiert, löscht aber
ebenso sicher die gespeicherten Daten, inklusive Ihr Programm samt seiner
Variablen und Tools, mit denen Sie vielleicht arbeiten. Das kann schon sehr
frustrierend sein.

Manche C 64-Besitzer haben mittlerweile einen Reset-Taster installiert, mit
dem ein echter Kaltstart durchgeführt werden kann. C 128-Anwender haben
einen solchen Knopf »ab Werk« am Computer. Ob Sie diesen Zusatz Ihr eigen
nennen oder nicht, Sie profitieren in jedem Fall von »Uncrash«.

Es handelt sich dabei um ein kurzes Maschinenprogramm. Sie brauchen jedoch
keinerlei Assemblerkenntnisse, um damit arbeiten zu können. Das Programm ist
in der Lage, bestimmte Abstutzsituationen selbstständig zu erkennen und zu
verhindern. Es erscheint unglaublich, aber Uncrash erkennt sogar bestimmte
Basicbefehle, die einen Absturz bewirken würden und führt sie gar nicht aus.
Sollte sich der Computer wirklich einmal aufgehängt haben, gibt es auf
Tastendruck zwei Stufen, wieder herauszukommen.

Einzige Bedingung ist, daß Sie Uncrash vor Beginn der Session installiert
haben. Dazu laden Sie das Programm mit

LOAD "UNCRASH",8

Obwohl das Programm aus Gründen des Koforts und der Geschwindigkeit
vollständig in Maschinensprache verfaßt ist, brauchen Sie keine
Assemblerkenntnisse, um damit arbeiten zu können. Die Bedienung erfolgt wie
gewohnt in Basic. Starten Sie nach dem Laden das Utility mit RUN. Es ist
jetzt aktiviert, eine Meldung erscheint. Soll das Tool geladen und aktiviert
werden, während bereits ein Basicprogramm im Speicher steht, das bei obigem
Manöver natürlich verloren gehen würde, besteht auch die Möglichkeit,
Uncrash mit

LOAD "UNCRASH 52809",8,1

absolut von Diskette zu laden. Nachdem Sie dann mit NEW alle Zeiger wieder
richtiggestellt haben, aktivieren Sie das Tool mit

SYS 52809

Die Meldung »UNCRASH« erscheint auch diesmal, und der Bildschirm ändert
seine Farben. Als kleiner Bonus werden diese Farben auch später nach jedem
<RUN STOP/RESTORE> erscheinen, Sie können also mit

POKE 53106, Cursorfarbe
POKE 53111, Rahmenfarbe
POKE 53116, Hintergrundfarbe

Ihre persönlichen Lieblingsfarben einstellen.

Nach der Aktivierung schlummert das Hilfsprogramm vor sich hin, bis Sie ihm
mitteilen, daß der Computer abgestürzt ist. Tun Sie das, indem Sie die
RESTORE-Taste drücken. Oft reicht das aus, um den Computer wieder zum Leben
zu erwecken. Manche Probleme sind indes so gravierend, daß »härtere«
Maßnahmen vonnöten sind: Der Kaltstart. Bei Uncrash gibt es eine spezielle
Tastenkombination, die den Kaltstart auslöst. Halten Sie die Tasten <1>, <2>
und <Pfeil nach links> gleichzeitig gedrückt und betätigen dann <RESTORE>.
Diese vier Tasten zusammen gedrückt bewirken erstens, daß Uncrash sich
selbst abschaltet. Zum zweiten wird das Basicprogramm im Speicher gelöscht.
Der Computer löst einen Reset aus. Um nun sowohl Uncrash wie auch Ihr
Programm wiederherzustellen, geben Sie einfach nochmals

SYS 52809

ein. Sie werden feststellen, daß das Basicprogramm mitsamt all seinen
Variablen und Feldern wieder da ist. Jetzt könnte man zum Beispiel die
Variablenwerte auf dem Bildschirm ausgeben und versuchen, damit
festzustellen, wodurch der Absturz zustandekam. Möchten Sie das Programm
nicht wiederherstellen, definieren Sie nach dem Kaltstart vor dem SYS-Befehl
einfach eine beliebige Basic-Variable, etwa

X = 1

Dies kann dann erforderlich sein, wenn vermutlich verstellte Basiczeiger den
Hänger bewirkt haben.

Die Renew-Funktion ist auch allein verfügbar. Dazu geben Sie einfach

SYS 52812

ein.

Wir wollen nun einmal das Tool einem harten Test unterziehen. Die folgenden
POKE-Befehle bewirken bei einem ungesicherten C 64 garantiert einen Absturz,
aus dem man so einfach nicht mehr herauskommt. Ist jedoch Uncrash aktiviert,
werden einige der fatalen POKEs gar nicht ausgeführt. Ist der Computer
dennoch abgestürzt, kommen Sie wie beschrieben ganz einfach aus der Mißlage
heraus:

POKE 1,51     I/O abschalten
POKE 1,48     BASIC abschalten (wird nicht ausgeführt)
POKE 115,0    Alle Befehle abschalten
POKE 648,0    Tastatur abschalten
POKE 770,128  Direktmodus abschalten
POKE 772,121  BASIC aufhängen
POKE 56322,0  Tastatur abschalten

Wichtig ist, daß Sie niemals die RESTORE-Taste während eines Kaltstarts
drücken. Das könnte sonst die Ursache für einen Absturz sein, den nicht
einmal mehr Uncrash beheben kann. Es gibt noch eine Einschränkung. Uncrash
ist leider nicht in der Lage, Abstürze zu beheben, die auftreten, wenn der
Prozessor auf illegale OP-Codes trifft. Es gibt keine Möglichkeit, einen
solchen Absturz zu verhindern oder rückgängig zu machen. Wenn Sie natürlich
einen Reset-Taster Ihr eigen nennen, können Sie diesen betätigen und danach
mit

SYS 52809

das verlorene Programm zurückholen.

Noch ein technischer Hinweis: Das Programm belegt keinerlei Basic-Speicher,
sondern arbeitet im Bereich von $CE49 bis $CFFF (52809 bis 53247). Hier
befindet sich das Programm mit seinen Variablen ab $CFE2. Es werden
keinerlei andere Speicherzellen belegt.

Insgesamt bietet Uncrash einen gehörigen Schutz vor Störungen, ohne den Sie
nicht mehr das Haus verlassen sollten!








Anleitung zum »Quickie-Generator«

Dieses (völlig jugendfreie) Programm dient dazu, Daten im Speicher (z.B.
Grafikdaten oder Maschinenprogramme) in einen Basic-Data-Lader zu
konvertieren. Die fertigen Programme können ganz normal unter Basic mit LOAD
geladen und mit RUN gestartet werden, das Merken umständlicher SYS-Befehle
entfällt. Dabei werden die Daten nicht numerisch gespeichert, sondern es
wurde ein guter Kompromiß getroffen, damit das erzeugte Programm kurz ist,
schnell arbeitet und leicht abzutippen ist. Der Generator eignet sich daher
dazu, fertige kurze Maschinenprogramme in 20-Zeiler für den gleichnamigen
Wettbewerb des 64'er-Magazins zu konvertieren. Aber auch viele andere
Anwendungen lassen sich finden.

Der »Quickie-Generator« wurde mit sich selbst behandelt. Daher kann er
einfach mit

LOAD "QUICKIE-GENERATO",8
RUN

aktiviert werden. Damit haben Sie die 15-Zeiler-Version dieses Programmes
geladen und gestartet. Für die Anwendung in der Praxis eignet sich
allerdings besser die Version, die absolut auf Diskette gespeichert ist, sie
wird mit

LOAD "QUICK-GEN $7000",8,8
NEW

geladen. In jedem Fall sollten Sie jetzt die zu konvertierenden Daten in den
Speicher laden. Zur Sicherheit geben Sie vorher ein:

POKE 56,112:CLR

damit der Generator nicht von Daten überschrieben wird. Er belegt den
Speicher von 28672 bis 29101 einschließlich. In der Zeropage werden die
Zellen 2 bis 4, 181, 182 sowie 247 bis 253 belegt.

Der Generator kann jetzt, nachdem Sie sicherheitshalber mit NEW den
Basicspeicher leergefegt haben, mit

SYS 28672,A,E,S,Z,V

aktiviert werden. Dabei gibt A die Anfangsadresse des zu konvertierenden
Bereiches an, E die Endadresse (einschließl.), S die Startadresse, mit der
das konvertierte Maschinenprogramm gestartet werden kann, Z die erste
Zeilennummer und V die Schrittweite der erzeugten Basic-Zeilennummern.
Sollen die konvertierten Daten nicht mit SYS gestartet werden, setzen Sie
für S irgend einen Wert ein und löschen dann in der zweiten erzeugten Zeile
des SYS-Befehl, bevor Sie den »Quickie« speichern. A und müssen folgender
Bedingung entsprechen:

0 <= A <= E <= 65535

Während der Konvertierung sehen Sie, wie das Programm am Bildschirm Zeile
für Zeile aufgebaut wird. Bitte drücken Sie während dieser Phase auf keinen
Fall eine Taste, sondern warten, bis die Konvertierung abgeschlossen ist.
Danach erscheint ein Hinweis, wie viele Zeilen erzeugt wurden (wichtig für
den 20-Zeiler Wettbewerb: Es dürfen nicht mehr als 20 Zeilen sein) und der
Vermerk »OK«. Jetzt steht das erzeugte Programm im Speicher, es kann bei
Bedarf weiter bearbeitet oder auf Diskette gespeichert werden.

Zum Schluß noch einige kurze Anmerkungen zur internen Funktionsweise. Die
Daten werden in High- und Lowbyte zerlegt und in Buchstaben von A
(Nibblewert 0) bis P (15 = $F) gewandelt. Die Buchstaben für High- und
Lowbyte werden direkt hintereinander in die Data-Zeile geschrieben, von wo
sie dann später von der READ-Schleife, die der Generator ebenfalls erzeugt,
gelesen werden. Die einzelnen Zeilen werden erst auf dem Bildschirm
aufgebaut und dann über die Tastaturpuffer-Methode in den Basicspeicher
übernommen. Dadurch können mit dem »Quickie-Generator« auch bereits
bestehende Basicprogramme um die Data-Zeilen ergänzt werden, sie müssen nur
vor der Konvertierung ganz normal geladen werden. Damit der Tastaturpuffer
abgefragt wird, muß der Generator kurzzeitig in den Direktmodus
zurückkehren. Danach wird mit Hilfe der USR-Funktion wieder zurück in
Assembler gesprungen. Der einfachere Weg (SYS-Befehl) wurde nicht gewählt,
damit der Generator in seinem Quelltext einfach an neue Startadressen
verschoben werden kann (bei SYS wäre das numerische Argument im Klartext
notwendig gewesen, was Probleme bei der Assemblierung bereitet hätte,
während bei USR die Adresse als Low/Highbyte übergeben wird). Sie können
übrigens nach Abschluß der Konvertierung mit dem Befehl

J=USR(0)

die Anzahl der erzeugten Zeilen noch einmal abrufen.

Der »Quickie-Generator« eignet sich dazu, Maschinenprogramme mit einer Länge
bis 648 Bytes in Programme zu konvertieren, die den Bedingungen des 64'er
Wettbewerbs »20-Zeiler« entsprechen: Maximal 20 Basic-Zeilen, die von einem
ausgdruckten Listing ohne Tricks abgetippt werden können (falls
Zeilennummern über 999 Verwendung finden, muß der Data-Befehl mit D <SHIFT
A> abgekürzt werden).





Floppy - Tip: Neues DOS

Beim Einschalten führt die 1541 jedesmal eine unnötige Kunstpause aus,
während der Sie dem Computer nicht zur Verfügung steht. Das muß nicht sein:
Nur einige kleine Änderungen im Betriebssystem der Station sorgen für
Abhilfe.

Das Laufwerk 1541 muß bei jedem Reset (also auch beim Einschalten) erst etwa
zwei Sekunden arbeiten, bis es ansprechbar ist (man erkennt dies daran, daß
es so lange dauert, bis der Motor und die rote LED abgeschaltet werden). Der
Grund für diese »Kunstpause« ist, daß hier wie auch beim C 64 ein
umfangreicher Test durchgeführt wird, bei dem jede einzelne
RAM-Speicherzelle sowie die beiden ROMs auf Funktionsfähigkeit überprüft
werden. Dazu wird eine Prüfsumme über alle ROM-Adressen gebildet und mit
einem Sollwert verglichen. Das Ärgerliche dabei ist, daß der C 64 abstürzt,
wenn Sie versuchen, während dieser Testphase unmittelbar nach dem
Einschalten auf das Laufwerk zuzugreifen.

Alle diejenigen, die ROM- oder RAM-Defekte des Laufwerkes nur aus der
Literatur kennen -- das werden die meisten sein -- können mit geringen
Hardware-Kenntnissen diesen Umstand verbessern, indem sie das DOS so ändern,
daß die Reset-Testroutine entfällt. Als Bonbon findet sich im so
freigewordenen Bereich jetzt eine Routine, die auch einen Selbsttest
durchführt, allerdings -- viel wichtiger, weil störungsanfälliger -- für die
rote LED und die beiden Motoren. Dieser Test kann, wenn gewünscht, auch ohne
den C 64 beim Einschalten der Station durch Öffnen eines Kontaktes auf der
Floppyplatine oder aber nach dem Einschalten des Laufwerkes durch Senden
eines Befehles vom C 64 aus geschehen.

Um in den Genuß der Erweiterung zu kommen, müssen Sie zunächst das originale
Floppy-DOS von $e000 bis $ffff auslesen. Sehr bequem geht dies mit dem
Programm »ROM-Klau« (64'er Sonderheft 57). Die so erzeugte Kopie muß im C 64
von 8192 ($2000) bis 16383 ($3fff) liegen. Laden Sie nun einen
Maschinensprachemonitor, der diesen Bereich nicht belegt (z.B. den SMON).
Mit diesem werden jetzt im RAM die notwendigen Änderungen vorgenommen. Das
folgende Assemblerlisting gibt die Befehle an, die Sie jetzt mit dem
Assembler eingeben. Beachten Sie die Adressen. Dieses Listing können Sie
sich übrigens auch dann durchlesen, wenn Sie die Änderungen nicht
durchführen wollen. Wenn Sie sich für die Floppyprogrammierung
interessieren, könnte es einen gewissen »Lehreffekt« haben. Gerade die
Programmierung des Steppermotors ist ein leidiges Kapitel.

Folgende Änderungen sind durchzuführen:

          ; NEUES FLOPPYSYSTEM
          ; $2/3xxx (im C 64) wird zu $e/fxxx (in der Floppy)

.$2aa7 inx         ; gibt Null
.$2aa8 txa         ; für A auch
.$2aa9 sta   00,x
.$2aab sta 0100,x  ; Zeropage löschen
.$2aae sta 0200,x
.$2ab1 inx
.$2ab2 bne 2aa9
.$2ab4 lda 1800    ; Geräteadresse (Taster) prüfen
.$2ab7 and  #40    ; Bit gesetzt ? Wenn ja, Taster gedrückt
.$2ab9 beq 2b22    ; nein, weiter mit alter Routine
          ; Selbsttest-Routine
.$2abb sei         ; IRQ sperren
.$2abc lda  #6f    ; DDR: ACT, SYNC = Eingang
.$2abe sta 1c02    ; in DDR setzen
.$2ac1 jsr ead4    ; siehe unten $2ad4
.$2ac4 lda  #0c    ; Hauptmotor und LED anwerfen
.$2ac6 sta 1c00    ; (wichtig für Steppermotor)
.$2ac9 jsr ff2f    ; Steppermotor testen
.$2acc lda 1800    ; Taster wieder testen
.$2acf eor  #40    ; Bit umdrehen:
.$2ad1 jmp eab7    ; wenn nicht wieder gedrückt, weitermachen

         ; Subroutine: Schreibschutz testen
.$2ad4 ldx  #ff    ; Pausenwerte
.$2ad6 ldy  #ff
.$2ad8 lda  #05    ; gibt ca. fünf Sekunden
.$2ada sta 0500    ; unbenutzte Speicherzelle, dient als Zähler
.$2add lda 1c00    ; Port lesen
.$2ae0 and  #10    ; ACT-Bit isolieren, alle anderen Null
.$2ae2 lsr         ; und zum LED-Bit machen
.$2ae3 sta 1c00    ; zurück in Port
.$2ae6 dex         ; weiter
.$2ae7 bne 2add
.$2ae9 dey
.$2aea bne 2add
.$2aec dec 0500    ; nächste Sekunde
.$2aef bne 2add    ; schon fünf Sekunden ? nein, weiter

          ; LED und Hauptmotor blinken
.$2af1 ldx  #10    ; 16 ($10) mal blinken
.$2af3 lda  #00    ; Motor und LED aus
.$2af5 sta 1c00    ; beide blinken zunächst gleichphasig
.$2af8 lda 1c00    ; Port lesen
.$2afb eor  #0c    ; LED und Motorbit umdrehen
.$2afd sta 1c00
.$2b00 ldy  #00    ; kurze Pause (ca. 0,5 Sek.)
.$2b02 lda  #00
.$2b04 asl  500    ; Zeit schinden
.$2b07 iny
.$2b08 bne 2b04    ; Warteschleife
.$2b0a clc
.$2b0b adc  #01
.$2b0d bne 2b04
.$2b0f dex         ; nochmal blinken ?
.$2b10 beq 2b20    ; nein, RTS
.$2b12 cpx  #08    ; schon achtmal geblinkt ?
.$2b14 bne 2af8    ; nein, weiter
.$2b16 lda 1c00
.$2b19 eor  #04    ; Motor-Bit umdrehen
.$2b1b sta 1c00    ; Motor und LED blinken jetzt wechselseitig
.$2b1e bne 2af8    ; unbedingter Sprung
.$2b20 rts         ; genug geblinkt
.$2b21 nop         ; unbenutzt
.$2b22 ldx  #45    ; ab hier weiter wie im Original

          ; Subroutine: Steppermotor testen
.$3f2f lda  #04    ; viermal testen
.$3f31 sta 0500    ; dient als Zähler
.$3f34 lda  #b0    ; 40 Tracks nach außen
.$3f36 sta   4a    ; Befehl an Kopfsteuerung
.$3f38 jsr ff50    ; Steppermotor bewegen, kurze Pause
.$3f3b lda   4a    ; Stepper schon plaziert ?
.$3f3d bne 3f38    ; nein, weiterbewegen
.$3f3f lda  #50    ; sonst 40 Tracks nach innen
.$3f41 sta   4a    ; Befehl an Kopf
.$3f43 jsr ff50    ; Steppermotor bewegen, warten
.$3f46 lda   4a    ; schon fertig ?
.$3f48 bne 3f43    ; nein, gleich nochmal
.$3f4a dec 0500    ; nochmal testen ?
.$3f4d bpl 3f34    ; ja, noch nicht viermal
.$3f4f rts         ; zurück in Reset-Routine

          ; Subroutine: Steppermotor bedienen, kurze Pause
.$3f50 jsr fa2e    ; Steppermotor bewegen
.$3f53 ldy  #f8    ; Steppergeschwindigkeit
.$3f55 ldx  #ff
.$3f57 dex
.$3f58 bne 3f57    ; Warteschleife
.$3f5a iny
.$3f5b bne 3f57
.$3f5d rts

.$3279 lda  #10    ; Timer 1 High, war ursprünglich $3a
                   ; ergibt Erhöhung der IRQ-Geschwindigkeit

Im Listing sind alle Adressen, Parameter und Daten hexadezimal angegeben.
Die letzte Änderung an $3279 bewirkt, daß im Laufwerk die IRQ-Frequenz stark
erhöht wird, was zum Beispiel beschleunigte Lese- und Schreibvorgänge zur
Folge hat. Vor allem aber wird jetzt der Steppermotor sehr viel schneller
bewegt, was Zeitgewinn unter anderem bei Befehlen wie Scratch oder Validate
zur Folge hat.

Wollen Sie nur den Reset schneller machen, sich aber den Selbsttest sparen
(weniger abzutippen), sollten Sie an Adresse $2ab4 einen jmp $eb22 einbauen
und den Teil von $2ab7 bis $2b21 einschließlich nicht eingeben. Sie können
ihn mit NOPs füllen, oder die alte ROM/RAM-Testroutine dort stehen lassen.

Damit die ganze bisherige Arbeit nicht umsonst war, wäre es nicht falsch,
die Änderungen jetzt auf ein Eprom zu brennen. Nachdem alle Manipulationen
beendet sind, speichern Sie, auch mit dem Monitor, den Bereich von 8192
($2000) bis 16383 ($3fff) auf Diskette. Dieses 33 Blocks lange File wird mit
einem Eprommer (z.B. Tiny-Eprommer, 64'er 8/88) auf ein Eprom vom Typ 2764
gebrannt. Dieses stecken Sie in einen der üblichen Adaptersockel (z.B.
Rex-Datentechnik 9598 oder Conrad Electronic, Best. Nr. 983179), der
anstelle des dort befindlichen ROM Bausteins in den Sockel UB4 rechts hinten
in der Diskettenstation eingebaut wird.

Wenn Sie jetzt das Laufwerk einschalten, läuft der Motor nur ganz kurz an
und geht zusammen mit der roten LED sofort wieder aus, die 1541 ist
betriebsbereit.

Um jetzt »manuell« den Selbsttest auszulösen, starten Sie die Routine ab
$eabb:

OPEN 1,8,15,"M-E"+CHR$(187)+CHR$(234)

Danach kann das Laufwerk vorerst vom C 64 nicht mehr benutzt werden. Der
Selbsttest läuft wie folgt ab: Zunächst haben Sie etwa fünf Sekunden Zeit,
um die Schreibschutzlichtschranke zu testen. Die rote LED am Laufwerk gibt
darüber Auskunft, ob der Schacht lichtdurchlässig ist (Schreibschutz nicht
aktiviert, rote LED ist an) oder ob ein Schreibschutzetikett auf der
Diskette klebt (dann geht die rote LED aus). Nach fünf Sekunden läuft der
Test automatisch weiter: Zunächst blinkt die rote LED viermal
(Periodendauer: etwa eine Sekunde) zusammen mit dem Motor, der periodisch
an- und ausgeht. Danach wiederholt sich dies wieder viermal, diesmal
allerdings wechselseitig. Daraufhin werden der Hauptmotor und die
Leuchtdiode eingeschaltet, und der Steppermotor getestet: Der
Schreib/Lesekopf fährt zunächst 40 Tracks nach außen (auf Track 1), was beim
ersten Mal ein Rattern zur Folge haben kann. Danach wird der Kopf 40 Tracks
nach innen bewegt. Dieser Vorgang wiederholt sich dreimal. Danach beginnt
der Selbsttest von vorn mit dem Test der Lichtschranke.

Dieser Test kann aber auch beim Einschalten des Laufwerks automatisch
durchgeführt werden. Er startet unabhängig vom C 64, wenn beim Einschalten
das Laufwerk auf Geräteadresse 10 oder 11 eingestellt ist, wenn also der
Jumper 2 auf der Floppyplatine geöffnet ist. Hier könnten Sie ggf. einen
Taster (Öffner) anschließen, den Sie vor und während des Einschaltens der
1541 drücken. So kann der sonst endlos dauernde Test auch unterbrochen
werden: Wenn am Ende des Steppermotor-Tests dieser Taster gedrückt, also der
Jumper 2 geöffnet ist, endet der Test und die Floppy führt die normale
(schnelle) Reset-Routine durch. Nachteil: Sie ist danach auf die Adresse 10
eingestellt. Daher sollte das Drive gewöhnlich abgeschaltet werden, um den
Test abzubrechen.

Neben dem praktischen Vorteil der schnelleren Resetroutine sowie der
erhöhten IRQ-Frequenz erleichtert dieser problemlose Eingriff auch
eventuelle Reparaturarbeiten am Laufwerk. Dieses kann, unabhängig vom C 64,
geöffnet und untersucht werden. Zum Testen der fehleranfälligsten
Komponenten verwenden Sie den Selbsttest. Die Fehler, die der von Commodore
vorgesehene RAM/ROM-Test abfing, traten dagegen in der Praxis kaum auf.







Die Maschinensprache-Bibliothek

Warum das Rad neu erfinden? Wer in Maschinensprache programmiert, kann auf
eine Vielzahl von Unterprogrammen zurückgreifen, die bereits fest im C 64
gespeichert sind. Wir verraten Ihnen, wie man bestimmte immer wiederkehrende
Probleme in Assembler bewältigt. Diese Auflistung wird für Sie ein
wertvolles Nachschlagewerk, wenn Sie in Maschinensprache programmieren. Wenn
Sie schon über Grundkenntnisse in Assembler verfügen und Ihnen die
notwendige Praxis vielleicht noch fehlt, so sind Sie hier genau richtig.
Natürlich erheben wir hier keinen Anspruch auf Vollständigkeit. Allein mit
der Auflistung aller wichtigen Routinen hätte man leicht ein ganzes Buch
füllen können.

Aus Platzgründen können wir leider nicht auf alle Eigenarten genau eingehen.
Sollte Ihnen etwas unklar sein, ist es ein guter Tip, ein wenig zu
experimentieren. Eine Erklärung wichtiger Begriffe finden Sie in dem
ausführlichen Computer-Lexikon am Ende des Buches.

1. Mathematische Operationen

1.1. Addition von 16-Bit Zahlen

In den Speicherzellen 2 (Lowbyte) und 3 (Highbyte) befindet sich ein Wort,
also eine 16-Bit Zahl. Zu dieser soll ein weiteres Wort addiert werden, das
im gleichen Format in den Zellen 4 und 5 gespeichert ist. Das Ergebnis soll
wieder in die Speicherzellen 2 und 3 geschrieben werden. Dazu verwenden wir
den ADC-Befehl, der zum Inhalt des Akkumulators ein Byte und den Wert des
Carry-Flags addiert. Bei einem Übertrag wird das Carry-Flag addiert.

LDA 2   ; Lowbyte 1 laden
CLC     ; Carry-Flag löschen
ADC 4   ; Lowbyte 2 addieren
STA 2   ; Ergebnis (Low) speichern
LDA 3   ; Highbyte 1 laden
ADC 5   ; dazu Highbyte 2 sowie evtl. Überlauf addieren
STA 3   ; Ergebnis speichern
RTS     ; fertig

1.2. Multiplikation

Der Befehl ASL (Arithmetical Shift left) rotiert die Bits des Wertes im
Akkumulator um ein Bit nach links, wobei das Bit 0 auf Null gesetzt wird.
Sie wissen vielleicht schon, daß das einer Multiplikation mit 2 gleichkommt.
Um also den Wert im Akkumulator zu verdoppeln, geben Sie einfach den
ASL-Befehl. Tritt dabei ein Überlauf auf, wird wiederum das Carry-Flag
gesetzt. Um auch mit anderen Werten multiplizieren zu können, müssen wir den
Vorgang in Multiplikationen mit Zweierpotenzen und Additionen zerlegen.
Beispiel: Soll eine Zahl mit 10 multipliziert werden, müssen wir die Zahl
erst mit vier multiplizieren, dann dazu den alten Wert der Zahl addieren und
das Ergebnis wiederum verdoppeln. Probieren Sie's aus: Das entspricht genau
der Multiplikation mit 10. In Assembler sieht eine Routine, die den Inhalt
des Akkumulators mit 10 multipliziert, so aus (als Zwischenspeicher benutzen
wir die sonst unbenutzte Speicherzelle 2):

STA 2   ; Wert speichern
ASL     ; Wert mal 2
ASL     ; Wert mal 2, zusammen also mal 4
ADC 2   ; dazu Original-Wert addieren
ASL     ; Ergebnis verdoppeln
RTS     ; fertig

Sollen dabei Überläufe berücksichtigt werden, die auftreten, wenn die zu
multiplizierende Zahl größer als 25 ist, müssen wir nur nach jeder Operation
das Carry-Flag testen. Ist es gesetzt, ist ein Überlauf eingetreten. In
unserem Beispiel soll bei einem Überlauf die System-Routine zur Ausgabe
eines ?OVERFLOW ERRORs (Adresse: hex. $B97E, dezimal 47486) aufgerufen
werden.

    STA 2     ; Wert speichern
    ASL       ; Wert mal 2
    BCS ERR   ; bei Fehler
    ASL       ; Wert mal 2, zusammen also mal 4
    BCS ERR   ; bei Fehler
    ADC 2     ; dazu Original-Wert addieren
    BCS ERR   ; bei Fehler
    ASL       ; Ergebnis verdoppeln
    BCS ERR   ; bei Fehler
    RTS       ; fertig
ERR JMP 47486 ; Overflow Error

2. Ein-, Ausgabe

2.1. Zeichen am Bildschirm ausgeben

Die Routine BSOUT des Kernals wird in praktisch jedem Maschinenprogramm
verwendet. Sie druckt wie der PRINT-Befehl einfach das Zeichen, dessen
Ascii-Code im Akkumulator steht. BSOUT hat die Adresse 65490 (hex. $FFD2).
Ein Beispiel: Folgendes Programm gibt das Wort »HALLO« aus, und beginnt
danach eine neue Bildschirmzeile:

LDA #72   ; Code für »H«
JSR $FFD2 ; BSOUT, Zeichen ausgeben
LDA #65   ; Code für »A«
JSR $FFD2 ; BSOUT, Zeichen ausgeben
LDA #76   ; Code für »L«
JSR $FFD2 ; BSOUT, Zeichen ausgeben
JSR $FFD2 ; nochmals ausgeben
LDA #79   ; Code für »O«
JSR $FFD2 ; BSOUT, Zeichen ausgeben
LDA #13   ; Code für »CR«
JSR $FFD2 ; BSOUT, Zeichen ausgeben
RTS       ; fertig

Eine Tabelle mit den Ascii-Codes finden Sie im Anhang des Handbuchs. Die
letzten Befehle kann man sogar noch weiter vereinfachen. Was viele
Programmierer nicht wissen: Es gibt im System eine Routine, die ein CR
(Carriage Return, beginne neue Bildschirmzeile, wirkt etwa wie die
RETURN-Taste) ausgibt. Diese Routine hat die Adresse $AAD7 (43735). Statt
der Befehle

LDA #13   ; Code für »CR«
JSR $FFD2 ; BSOUT, Zeichen ausgeben

könnte man also auch nur schreiben:

JSR $AAD7 ; CR ausgeben

Damit haben wir zwei Bytes gespart, die für den Befehl LDA #13 notwendig
gewesen wären. Sie sehen schon, wie nützlich es ist, die Funktionsweise der
wichtigsten Systemroutinen zu kennen.

2.2. Zahl ausgeben

Wir wollen die 16 Bit-Zahl, die im Beispiel 1.1. in den Speicherzellen 2 und
3 gespeichert wurde, numerisch am Bildschirm ausgeben. Dazu machen wir von
der Betriebssystem-Routine AXOUT Gebrauch, die ein Wort ausgibt, dessen
Lowbyte im X-Register und Highbyte im Akkumulator steht, ausgibt. Die
Routine hat die Startadresse $BDCD (48589).

LDX 2     ; Lowbyte laden
LDA 3     ; Highbyte laden
JMP $BDCD ; AXOUT, Zahl ausgeben

Beispiel: Stand in Zelle 2 der Wert 123 und in Zelle 3 eine 8, so gibt das
Programm die Zahl 2171 aus. Wie Sie mit oben angegebener Formel leicht
nachrechnen können, steht LOW=123 und HIGH=8 für das Wort 2171. Beachten
Sie, daß sich AXOUT nur zur Ausgabe von positiven ganzen Zahlen von 0 bis
65535 (Wertebereich eines Wortes) eignet.

2.3. Hexadezimalausgabe

Während die eben besprochene Routine AXOUT Zahlen immer dezimal ausgibt, ist
manchmal auch die hexadezimale Ausgabe erwünscht. Die einfachste und
kürzeste Lösung zeigen wir hier:

HEX      PHA        ; Zahl merken
         LSR        ; geteilt durch 2
         LSR        ; geteilt durch 4
         LSR        ; geteilt durch 8
         LSR        ; geteilt durch 16
         JSR HEX1   ; High-Nibble ausgeben
         PLA        ; Zahl zurückholen
HEX1     AND #15    ; Low-Nibble isolieren
         TAX        ; als Zeiger merken
         LDA HEX2,X ; Ziffer laden
         JMP $FFD2  ; und drucken (BSOUT)
HEX2     .ASC "0123456789ABCDEF"

Der Befehl LSR ist das Gegenstück zum oben schon erklärten ASL: Es teilt den
Inhalt des Akkumulators durch zwei. Hier wenden wir diesen Befehl viermal
an, um das High-Nibble (praktisch die Sechzehner-Stelle der Hexzahl) an die
Bitpositionen 0 bis 3 zu schieben. Genau diese vier Bits werden von der
Unterroutine HEX1 gedruckt. Die Bezeichnungen sind ab Position HEX2 im
Ascii-Code gespeichert. Vielleicht sind Ihnen auch die Befehle PHA und PLA
noch unbekannt. Sie bedienen den Prozessor-Stack: PHA speichert den Inhalt
des Akkumulators auf dem Stack. Der Stack ist vergleichbar mit einem
Papierstapel. PHA schreibt den Inhalt des Akkumulators auf ein Stück Papier
und legt dieses oben auf den Stapel. PLA holt sich das oberste Blatt, liest
den Inhalt und weist dem Akkumulator diesen Inhalt zu.

Die Routine HEX eignet sich für ein Byte (0 bis 255). Wird HEX mit einer 123
im Akkumulator aufgerufen, erscheint der hexadezimale Wert von 123 am
Bildschirm: Ein 7B. Leicht läßt sich das Programm aber auch für größere
Zahlen in mehreren Bytes anwenden: Wir wollen beispielsweise wieder das in
den Adressen 2 (Low) und 3 (High) gespeicherte Wort hexadezimal ausgeben.
Dabei ist zu beachten, daß zuerst das Highbyte angezeigt wird.
Hexadezimalzahlen werden üblicherweise mit einem Dollarzeichen markiert,
also geben wir auch dieses noch aus.

LDA #36    ; Dollarzeichen
JSR $FFD2  ; BSOUT, Dollar drucken
LDA 3      ; Highbyte laden
JSR HEX    ; und drucken
LDA 2      ; Lowbyte laden
JMP HEX    ; drucken und fertig

Befand sich etwa das Wort 32343 in den Speicherzellen 2 und 3 (Low: 87,
High: 126), so druckt diese Routine völlig korrekt den Wert $7E57.

2.4. Text ausgeben

Einen längeren Text kann man im Prinzip mit einer Schleife Zeichen für
Zeichen auslesen und mit BSOUT ausgeben. Aber es geht einfacher: Im System
ist bereits eine Textausgabe-Routine vorhanden. Sie heißt STROUT und hat die
Startadresse $AB1E (43806). Übergeben Sie dieser Routine im Akkumulator das
Lowbyte, im Y-Register das Highbyte eines Textes, der irgendwo im Speicher
im Ascii-Code steht. Das Ende des Textes muß durch ein Nullbyte markiert
sein. Da STROUT im Gegensatz zum normalen Basic-Printbefehl am Ende des
Textes nicht automatisch eine neue Zeile beginnt, dürfen Sie, falls das
erwünscht ist, nicht vergessen, auch ein CR in den Text aufzunehmen. So
sieht die Anwendung aus:

     LDA #<TEXT   ; Lowbyte laden
     LDY #>TEXT   ; Highbyte laden
     JMP $AB1E    ; STROUT Text drucken
TEXT .ASC "ICH GRUESSE DICH!"
                  ; Text im Ascii-Code
     .BYT 13,0    ; CR, Nullbyte als Endezeichen

Dieses Beispiel wirkt wie der Basicbefehl

PRINT "ICH GRUESSE DICH!"+CHR$(13);

2.5. Peripheriegeräte

Zum Thema Ein-/Ausgabe auf Peripheriegeräten, etwa Drucker oder Floppy, sei
auf den Assemblerdateikurs verwiesen, den Sie ebenfalls in diesem Buch
finden.





3. KAPITEL: GRAFIKPROGRAMMIERUNG






Sprites im Griff mit »Spritelist V2«

Sprites sind so praktisch! Wenn man doch nur Werkzeug hätte, mit dem man sie
auch vernünftig verwalten könnte. »Spritelist« hilft Ihnen nicht nur beim
»Klauen« von Sprites aus fremden Programmen, beispielsweise Spielen, sondern
bietet darüberhinaus auch noch wertvolle und starke Funktionen zum
Nachbearbeiten der Kobolde. Na, ist das nicht Banane?

Dieses Grafik-Utility dient in erster Linie dazu, Sprites aus eigenen oder
fremden Programmen herauszuoperieren, um sie dann in eigenen Produktionen
weiterverwenden zu können. Es hat also eigentlich nichts mit einem
Spriteeditor zu tun, Funktionen zum Malen von Sprites sind nicht enthalten.
Neben Möglichkeiten, ein noch im Speicher stehendes Programm nach Sprites
abzusuchen, sind jedoch einige äußerst nützliche Funktionen eingebaut, die
die Nachbearbeitung von gefundenen Sprites ermöglichen. Insoforn stellt
»Spritelist« eine ideale Ergänzung zu einem Sprite-Editor dar. Es ist
vollkommen in stark optimierter Maschinensprache verfaßt und arbeitet
dementsprechend schnell, sicher und flexibel. Dennoch brauchen Sie zur
Anwendung keine Assemblerkenntnisse.

Um Sprites aus einem fremden Programm herauszuholen, sollten Sie dieses
zunächst ganz normal laden und starten. Wenn die interessanten Sprites im
Speicher sind, oder auf dem Bildschirm sichtbar werden, steigen Sie aus dem
fremden Programm aus. Sollte dies nicht mit <RUN STOP/RESTORE> möglich sein,
müssen Sie einen Reset-Taster verwenden. Ist das Programm Reset-geschützt,
hilft nur noch ein erweitertes Betriebssystem, mit dem Sie diesen Schutz
umgehen können (zum Beispiel das NSS-Kernal), oder der spezielle
Reset-Taster aus diesem Buch.

Laden Sie dann unser Programm wie ein Basicprogramm mit dem Befehl

LOAD "SPRITELIST V2",8,0

und starten es mit RUN, da LIST keinen Programmtext zum Vorschein bringt.
Das Hauptmenü erscheint auf dem Bildschirm. Unten finden Sie ein Feld, in
dem das aktuelle Sprites zu sehen ist, und zwar links und der
HiRes-Darstellung und rechts als Multicolor-Sprite. Darüber steht die
Spritenummer (von 0 bis 1023 in Schritten von 64 Bytes), die Adresse, an der
das Sprite im Speicher steht und die VIC-Bank, der das Sprite entstammt. Der
im C64 eingebaute Videochip kann vier Banks ansprechen, das sind die
Speicherbereiche, die er momentan adressieren kann. Bank 0 (Standard) geht
von Adresse 0 bis 16383 (Sprites 0 bis 255), Bank 1 von Adresse 16384 bis
32767 (Sprite 256 bis 511), Bank 2 von 32768 bis 49151 (Sprites 512 bis 767)
und Bank 3 umfaßt den Bereich zwischen 49152 und 65535 (Sprites 768 bis
1023).

Wählen Sie durch Druck auf die invers dargestellten Tasten die
entsprechenden Funktionen, die im Folgenden in der Reihenfolge vorgestellt
werden, in der sie auch auf dem Schirm zu sehen sind.

<I> - Invert: Das in der Anzeige sichtbare Sprite wird invertiert. Dieser
Befehl wird durch nochmaliges Invertieren rückgängig gemacht.

<CLR> - Clear: Das in der Anzeige sichtbare Sprite wird gelöscht.

<E> - Expand: Der Vergrößerungsmodus der Anzeige wird ein- oder
ausgeschaltet. Ist dieser Modus eingeschaltet, werden die beiden Sprites am
Bildschirm waagerecht und senkrecht doppelt so groß gezeigt, neben dem
Menüpunkt »Expand« blinkt ein Viereck.

<L> - Load: Ein Sprite kann von Diskette geladen werden. Dazu geben Sie den
kompletten Filenamen ein und drücken <RETURN>. Drücken Sie diese Taste nur,
ohne etwas einzugeben, wird die Funktion abgebrochen. Der Computer versucht
nun, ein Sprite unter diesem Namen in den Speicher zu laden. Das Sprite wird
immer in den Bereich ab 704 (Arbeitsbereich) geladen, das Programm schaltet
nach dem Laden auf diesen Bereich um. Das Sprite sollte auf Diskette als
PRG-File vorhanden sein, die ersten beiden Bytes des Files geben die
Startadresse (beliebig) an, die folgenden 63 Bytes die Spritedaten im
üblichen Format.

<S> - Save: Ein Sprite kann natürlich auch auf Diskette gespeichert werden.
Dazu geben Sie den kompletten Filenamen ein und drücken <RETURN>. Drücken
Sie diese Taste nur, ohne etwas einzugeben, wird die Funktion abgebrochen.
Der Computer versucht nun, das in der Anzeige sichtbare Sprite unter diesem
Namen auf die Floppy zu speichern. Dabei wird ein PRG-File (Länge: 1 Block)
erzeugt, die ersten beiden Bytes des Files geben die Startadresse (704=$2C0)
an, die folgenden 63 Bytes die Spritedaten im üblichen Format.

<1 bis 4> - Farbe 1 bis 4: Durch Druck auf eine dieser Tasten wird die
entsprechende Farbe um eins erhöht. Farbe 1 ist die Farbe des HiRes-Sprites,
die Multicolor-Darstellung besteht aus den Farben 2 mit 4.

<Q> - Ende: Durch Druck auf diese Taste beenden Sie das Programm. Es kann,
so es sich noch im Speicher befindet, mit SYS 32768 wieder gestartet werden.

<R> - Repeat: Mit dieser Taste wird die Wiederholfunktion der Tastatur ein-
oder ausgeschaltet. Ist der Repeat eingeschaltet (zu erkennen an dem kleinen
blinkenden Viereck im Hauptmenü), wirkt das dauerhafte Drücken einer Taste
so, als ob Sie die Taste schnell hintereinander drücken und wieder
loslassen.

<F1> - Plus 1: Die Adresse des Sprites, das in der Anzeige erscheint, wird
um 64 Bytes erhöht, es wird also um ein Sprite weitergeblättert.

<F2> - Plus 10: Die Adresse des Sprites, das in der Anzeige erscheint, wird
um 640 Bytes erhöht, es wird also um zehn Sprites weitergeblättert.

<F7> - Plus 100: Die Adresse des Sprites, das in der Anzeige erscheint, wird
um 6400 Bytes erhöht, es wird also um 100 Sprites weitergeblättert.

<F3> - Minus 1: Die Adresse des Sprites, das in der Anzeige erscheint, wird
um 64 Bytes erniedrigt, es wird also um ein Sprite zurückgeblättert.

<F4> - Minus 10: Die Adresse des Sprites, das in der Anzeige erscheint, wird
um 640 Bytes erniedrigt, es wird also um zehn Sprites zurückgeblättert.

<F8> - Minus 100: Die Adresse des Sprites, das in der Anzeige erscheint,
wird um 6400 Bytes erniedrigt, es wird also um 100 Sprites zurückgeblättert.

<F5> - Adr+1: Die Adresse des Sprites, das in der Anzeige erscheint, wird um
eins erhöht. So lassen sich auch Sprites finden, die im Speicher nicht an
einer durch 64 teilbaren Adresse beginnen.

<F6> - Adr-1: Die Adresse des Sprites, das in der Anzeige erscheint, wird um
eins erniedrigt.

<*> - Restart: Das Programm »Spritelist V2« wird neu gestartet. Dabei
schaltet der Computer alle Optionen ab und stellt Sprite Nr. 0 dar. Das
Programm wird initialisiert.

<D> - Daten drucken: Es erscheint die Meldung, den Drucker vorzubereiten.
Drücken Sie die Taste mit dem Pfeil nach links, wird diese Funktion
abgebrochen. Nach Betätigung einer anderen Taste druckt ein abgeschlossener
und eingeschalteter Drucker die 63 Sprite-Daten aus. Sie werden in vier
Zeilen als rechtsbündige Dezimalzahlen ausgegeben. Diese Angaben könnte man
direkt als Data-Zeilen in ein Basicprogramm übernehmen. Die Druckroutine ist
für Drucker aller Art geeignet.

<P> - Sprite drucken: Es besteht die Möglichkeit, das Sprite selbst
auszudrucken. Dazu wählen Sie zunächst, ob das Sprite in Originalgröße oder
horizontal und vertikal in achtfacher Vergrößerung gedruckt werden soll. Die
Ausgabe des nicht vergrößerten Sprites erfolgt im Grafikmodus, die Routine
wurde für MPS-Siebennadel-Drucker vom Typ MPS 801, 803 geschrieben. Drücken
Sie die Taste <1>, <8> oder <Pfeil nach links>, je nachdem, ob die
Originalgröße, die Vergrößerung oder doch kein Druck gewünscht wird. Dann
erscheint ggf. die Meldung, den Drucker vorzubereiten. Drücken Sie die Taste
mit dem Pfeil nach links, wird diese Funktion abgebrochen. Nach Betätigung
einer anderen Taste druckt ein abgeschlossener und eingeschalteter Drucker
das Sprite in der gewünschten Vergrößerung aus.

<X> - Spiegeln X: Das Sprite wird in der Waagerechten gespiegelt. Vor dem
Spiegeln müssen Sie noch die Frage beantworten, ob es sich bei dem Sprite um
ein Multicolor-Sprite handelt oder nicht. Mit der Pfeil-nach-links-Taste
wird der Vorgang abgebrochen. Die Spiegelung kann durch ein erneutes
Spiegeln rückgängig gemacht werden.

<Y> - Spiegeln Y: Das Sprite wird senkrecht gespiegelt. Die Spiegelung kann
durch ein erneutes Spiegeln rückgängig gemacht werden. Hier spielt es keine
Rolle, ob es sich um ein Multicolor-Sprite handelt oder nicht.

<F> - Rahmen: Um das Sprite läßt sich ein beliebig dicker Rahmen ziehen.
Nach <F> geben Sie ein, welche Stärke der Rahmen, der alle vier Seiten
umfaßt, haben soll. Zur Auswahl stehen 1 Punkt bis 8 Punkte (Tasten <1> bis
<8>). Auch hier beendet die Taste mit dem Pfeil nach links die Funktion
vorher. Wollen Sie keinen Rahmen aus gesetzten Punkten, sondern einen aus
gelöschten Punkten, sollten Sie das Sprite erst invertieren (<I>), dann den
Rahmen zeichen lassen und danach erneut invertieren.

<Pfeil nach links> - Suchen: Mit dieser Funktion kann ein Sprite im Speicher
gesucht werden. Die Sprites in der Anzeige werden in einer bestimmten
Geschwindigkeit durchgeschaltet, die Sie mit den Tasten <+> und <-> in den
Grenzen 1 (sehr langsam) bis 32 (sehr schnell) ändern. Mit der Taste <R>
wird die Richtung umgeschaltet. Blinkt neben diesem Untermenüpunkt ein
kleines Viereck, blättert das Programm rückwärts, sonst vorwärts. Haben Sie
beim Blättern das Sprite kurzzeitig gesehen, das Sie interessiert, war aber
die Reaktion zu langsam, können Sie auf die Taste mit dem Pfeil nach links
drücken. Der Computer blättert dann augenblicklich 12 Sprites in die andere
Richtung. Je öfter Sie auf diese Taste drücken, desto schneller blättert das
Programm in die Gegenrichtung der mit <R> gewählten Richtung. Die Taste
<RUNSTOP> beendet diese Funktion und führt in das Hauptmenü zurück, das
zuletzt angewählte Sprite bleibt in der Anzeige stehen und kann nun ggf.
bearbeitet werden.

Zum Verständnis der letzten drei Funktionen ist es notwendig, einen kleinen
Blick hinter die Kulissen des Spritefinders zu werfen. Obwohl in der Anzeige
bis zu 1024 Sprites gezeigt werden können, handelt es sich doch immer um das
selbe Sprite im Speicher, das der Computer darstellt. Es wird nämlich nicht
etwa der Sprite-Zeiger 2040 auf den Speicherbereich gestellt, der
dargestellt werden soll (das wäre ja auch nur auf eine Bank begrenzt und
nicht bankübergreifend möglich), sondern es wird immer nur das Sprite im
Speicher ab 704 = $2C0 (Bank 0, Sprite# 11) gezeigt. Das Programm kopiert
den Speicherbereich, ab dem das Sprite eigentlich zu finden ist, jedes Mal
nach 704, wenn Sie zum Beispiel mit den Funktionstasten oder der
Suchfunktion auf ein anderes Sprite umschalten.

<A> - Auto: Die Kopierung des Bereiches, in dem das Sprite eigentlich steht,
nach 704 geschieht gewöhnlich nur bei Bedarf, also zum Beispiel beim
Umschalten auf ein anderes Sprite mit der Suchfunktion oder den
Funktionstasten. Sie können jedoch auch eine Automatik einschalten, bei der
das Kopieren unabhängig von gewählten Befehlen 60 mal in der Sekunden
IRQ-gesteuert abläuft. Die Automatik wird im Hauptmenü mit <A> ein- oder
ausgeschaltet. Im eingeschalteten Zustand blinkt ein Viereck neben dem
Menüpunkt. Sie erkennen den Unterschied leicht, wenn Sie das Sprite# 2 (Bank
0, Adresse 128) wählen und etwa auf die Mitte des Sprites achten. Ist die
Automatik abgeschaltet, ändert sich das Aussehen des Sprites nicht. Bei
eingeschalteter Automatik ist jedoch ein Flimmern in der Mitte des Sprites
zu beobachten, das daran liegt, daß in diesem Spritebereich drei
Speicherzellen enthalten sind, die vom System laufend verändert werden (die
Systemuhr, Speicherzellen 160 mit 162). Zu beachten wäre noch, daß bei
aktivierter Automatik die Modifizierungsbefehle (Spiegeln, Rahmen,
Invertieren, Löschen) unwirksam sind - außer Sie bearbeiten das Sprite Nr.
11. Denn diese Befehle wirken im Speicher auf den Bereich ab 704, der
dargestellt wird, nicht auf den Original-Bereich. Wird etwa das Sprite# 123
dargestellt, ist der Originalbereich der ab 123*64 = 7872 = $1EC0, die
Änderungen wirken aber ab 704 = $2C0. Im Normalbetrieb des Programmes sollte
die Automatik abgeschaltet sein.

<Z> - Zurück: Wenn Sie diesen Befehl wählen, wird der Bereich ab 704 in den
Originalbereich kopiert. Beispiel: Sie bearbeite das Sprite# 123, das im
Speicher (siehe oben) ab 7872 steht. Es wird nach 704 kopiert, sobald Sie
das Sprite# 123 einstellen. Jetzt kann es zum Beispiel invertiert werden
(Taste <I>). Das invertierte Muster findet sich jetzt ab 704, und kann zum
Beispiel gespeichert werden (beim Speichern wird immer der Bereich ab 704
gespeichert). Im Original-Bereich ab 7872 jedoch befindet sich immer noch
das nicht invertierte Ogirinal-Sprite, und zwar so lange, bis Sie <Z>
betätigen. Achten Sie darauf, daß Sie diesen Befehl nicht bei Sprites mit
einer Nummer kleiner als 11 anwenden, da sonst Sprite-Daten in die Zeropage
kopiert werden und - falls Sie das Sprite verändert haben - ein Absturz
möglich ist. Ähnliche Effekte sind zu beobachten, wenn Sie diesen Befehl auf
eines der Sprites 16, 17, 18 oder 19 anwenden (Bildschirm) oder ein Sprite
mit einer Nummer zwischen 512 und ungefähr 564 anwenden (in diesem Bereich
liegt das Hauptprogramm des Sprite-Finders).

<U> - Undo: Wenn Sie diesen Befehl wählen, wird der Originalbereich erneut
in den Bereich ab 704 kopiert. So läßt sich eine Undo-Funktion realisieren.
Beispiel: Sie bearbeiten wieder das Sprite# 123, das im Speicher ab 7872
steht. Jetzt legen Sie einen Rahmen der Dicke 3 um das Sprite. Nach dieser
Manipulation gefällt Ihnen das Sprite jedoch nicht mehr. Da im
Originalbereich ab 7872 noch das unveränderte Original-Sprite zu finden ist,
können Sie es sich durch Druck auf <U> wieder in die Anzeige zurückholen.

Das war eine Beschreibung aller Programmfunktionen des Spritefinders.
Drücken Sie eine unerlaubte Taste, ertönt ein Signal. Wir wünschen Ihnen
viel Spaß und gelungene Sprites mit diesem Tool! Beachten Sie aber bitte,
daß es nicht nur in Deutschland verboten und strafbar ist, Teile fremder
Programme, also zum Beispiel Sprites, in eigenen Programmen
weiterzuverwenden und diese dann zu vertreiben (Urheberrechtschutz).







Anleitung zum »Chartransposer« Version 1.0

Dieses Programm dient in erster Linie zum Nachbearbeiten, Verschieben und
Aufbereiten von fertigen Zeichensätzen. Viele Sonderfunktionen machen dieses
Utility vor allem für Grafikprogrammierer interessant.

Laden Sie das in reiner Maschinensprache geschriebene Programm mit

LOAD"CHAR*",8

und starten mit RUN. Die Bildschirmmaske erscheint. Oben stehen die
verfügbaren Kommandos, die Tasten, die gedrückt werden müssen, sind jeweils
durch Großbuchstaben markiert. Unten ist der momentan in Arbeit befindliche
Zeichensatz eingeblendet. Drücken Sie die Taste <O>, um ein vernünftiges
Bild zu erhalten.

Die Funktionen im einzelnen:

Invert (Taste <I>):

Diese Funktion invertiert den gesamten Zeichensatz, bzw. den eingestellten
Bereich (siehe unten). Durch nochmaliges Invertieren wird der Effekt wieder
rückgängig gemacht.

Load (Taste <L>):

Mit dieser Funktion kann ein Charset geladen werden. Die Startadresse des
Char-Files (Länge: maximal 9 Blocks, Byte 1 und 2 = Startadresse, dann
Zeichendaten im üblichen Format) auf der Diskette wird ignoriert, der Satz
wird immer an die selbe Stelle im Speicher geladen. Während
Diskettenoperationen wird wegen des Raster-IRQs der Bildschirm flimmern, was
jedoch zu keinerlei Fehlfunktionen führt.

Save (Taste <S>):

Hiermit wird ein im Speicher befindlicher Zeichensatz als neun Blocks langes
File auf Diskette gespeichert. Obwohl das Utility die Zeichensätze immer an
der selben Stelle im Speicher verwaltet, wird dem erzeugten File auf
Diskette die im Programm vorgegebene Startadresse (wird ganz unten am
Bildschirm eingeblendet und kann mit der Taste <W> verändert werden)
gegeben. Das Umkopieren von Zeichensätzen ist auch eines der
Haupt-Anwendungsgebiete von »Chartransposer« (zum Beispiel, wenn Sie aus
einem Programm ein Charset »geklaut« haben, dies aber auf der Diskette noch
die falsche Adresse hat und Sie keinen Diskmonitor bemühen wollen): Laden
Sie den Zeichensatz mit der LOAD-Funktion, ändern Sie die Startadresse wie
gewünscht, modifizieren Sie ggf. den Satz und speichern Sie ihn dann mit der
neuen Adresse wieder ab.

Unabhängig vom eingestellten Bereich (siehe unten) wird immer der gesamte
Zeichensatz gespeichert.

Quit (Taste <Q>):

Diese Funktion verläßt das Programm. Es kann, sofern es sich noch im
Speicher befindet, mit SYS 2084,1 oder aber mit SYS 32768 wieder gestartet
werden. Gespeicherte Zeichensätze gehen nicht verloren.

Mirror X (Taste <X>):

Mit dieser Funktion kann der gesamte Zeichensatz oder der eingestellte
Bereich (siehe unten) waagerecht gespiegelt werden: aus dem Buchstaben »b«
wird ein »d«.

Mirror Y (Taste <Y>):

Mit dieser Funktion kann der gesamte Zeichensatz oder der eingestellte
Bereich (siehe unten) senkrecht gespiegelt werden: aus dem Buchstaben »M«
wird ein »W«.

Inv. Half (Taste <V>):

Haben Sie einen Zeichensatz, der zwar in der oberen Hälfte (nicht-reverse
Zeichen) ganz gut aussieht, aber in der unteren Hälfte, in der normalerweise
die inversen Zeichen stehen, nicht vollständig, zerstört oder mit für Sie
unnötigen Sonderzeichen versehen ist, berechnen Sie mit Hilfe dieser
Funktion, die sich auch immer auf den gesamten Zeichensatz bezieht, die
untere Hälfte. Arbeitsweise: Die 128 Zeichen der oberen Hälfte werden
invertiert und in die untere Hälfte kopiert.

Test (Taste <T>):

Mit dieser Funktion testen Sie die Wirkung eines fertigen Zeichensatzes auf
dem Bildschirm. Der Schirm wird gelöscht, der neue Zeichensatz
eingeschaltet. Jetzt können Sie den ganz normalen Bildschirmeditor benutzen.
Verlassen wird diese Funktion mit der Taste <f1>.

Lft. Margin (Taste <F>):

Es besteht die Möglichkeit, einige Befehle nur auf einen bestimmten Bereich
des Zeichensatzes wirken zu lassen. In der Mitte des Schirms sehen Sie nach
dem Start die Anzeige »left margin: 0; right margin: 255«. Dies bedeutet,
daß sich diese Befehle momentan auf den gesamten Zeichensatz (von Zeichen 0
bis 255 einschließlich) beziehen. Drücken Sie die Taste <F>, erscheint ein
weißer Rahmen, den Sie mit den Cursortasten nun nach links und rechts auf
jedes beliebige Zeichen bewegen können (bis zum rechten Rand). Nach dem
Druck auf <RETURN> wird der neue linke Rand gespeichert, die Befehle <I>,
<X>, <Y>, <C>, <P>, <A> und <H> beziehen sich jetzt nur noch auf diesen
Bereich.

Rgt. Margin (Taste <R>):

Ebenso wie der linke Rand kann auch die Position des rechten Randes frei
verschoben werden. Die Bedienung erfolgt analog wie oben.

Rom Set (Taste <O>):

Soll mit den beiden eingebauten Commodore-ROM-Zeichensätzen gearbeitet
werden, verwenden Sie diese Funktion. Dadurch wird der im Speicher
befindliche Satz gelöscht und der CBM-Zeichensatz darüberkopiert. Hinter der
Anzeige »Rom Set« erscheint die Ziffer 0, wenn momentan der
Groß/Grafik-Zeichensatz aktiviert ist, die 1 weist auf Klein/Großschrift
hin.

Clear (Taste <C>):

Dieses Kommando löscht alle Zeichen im eingestellten Bereich ersatzlos und
unwiderruflich.

Prepare (Taste <P>):

Diese Funktion ist etwas ganz besonderes. Sie konvertiert einen
Hires-Zeichensatz ins Multicolor-Format. Da hierbei jedoch die Auflösung auf
die Hälfte verringert wird, sollten Sie nicht normale Hires-Zeichensätze
damit behandeln, sondern nur extra dafür vorgegebene. Funktionsweise: Bei
der Konvertierung wird zeilenweise vorgegangen. In jeder Zeile (Byte) finden
sich acht Bit, von denen immer zwei nebeneinanderliegende Bits zu einer von
vier Gruppen zusammengefaßt werden. Ist in einer Gruppe mindestens ein Bit
gesetzt, werden beide Bits auf 1 gesetzt und dadurch beide Pixel gesetzt:

vorher:  nachher:
  0 0      0 0
  1 0      1 1
  0 1      1 1
  1 1      1 1

Work Area (Taste <W>):

Diese Funktion dient dazu, die in der untersten Bildschirmzeile angezeigte
»work area« festzulegen. Dieser Speicherbereich hat für die Arbeit mit dem
Programm »Chartransposer« keine Bedeutung, sie legt fest, welche
Startadresse Zeichensätze beim Speichern mit der Save-Funktion erhalten
sollen. Defaultwert ist $3800 (dezimal 14336), dies ist auch die Position,
an der die Zeichensätze während der Bearbeitung im Speicher liegen -
unabhängig von der jeweils eingestellten Work Area.

Rotate (Taste <A>):

Mit dieser Funktion werden die Zeichen innerhalb des gewählten Bereiches um
90° im Uhrzeigersinn gedreht. Viermaliges Drehen bringt wieder den
Ausgangszustand, ebenso zweimaliges Drehen und dann Spiegeln in X- und
Y-Richtung.

Restart (Taste <E>):

Dient zum Neustarten des »Chartransposers«. Dabei werden alle Einstellungen
auf die Standardwerte gebracht, der Zeichensatz jedoch nicht gelöscht. Diese
Funktion ist weiter ganz praktisch, wenn man ein Hardcopy-Programm zum
Ausdrucken des Bildes benutzt hat, welches den Raster-IRQ abgeschaltet hat
(z.B. Uniprint).

Catalog (Taste <G>):

zeigt das Directory der eingelegten Diskette durch waagerechtes Scrollen in
der untersten Bildschirmzeile an. Durch Druck auf <SPACE> wird die Ausgabe
angehalten, <STOP> bricht sie ab.

Disk Cmd (Taste <D>):

Mit dieser Funktion können Sie Befehle über den Kommandokanal 15 an das
Laufwerk senden. Geben Sie die Befehlszeile ein und drücken <RETURN>.
Daraufhin wird gleich der Fehlerkanal angezeigt. Wollen Sie nur die
Statusmeldung lesen, drücken Sie nur <RETURN>, ohne einen Befehl einzugeben.

Info (Taste <N>):

Diese Funktion informiert Sie auf einer Tafel kurz über das Programm. Nach
einem beliebigen Tastendruck geht's weiter.

Show Area (Taste <H>):

Diese Funktion färbt innerhalb der Zeichensatz-Anzeige den mit den Tasten
<F> und <R> gewählten Ausschnitt weiß.

Das waren alle Funktionen des Programmes »Chartransposer«. Wir wünschen
Ihnen viel Spaß und viele gelungene Zeichensätze damit!














Anleitung zu »Softscroll«

Dieses kurze Hilfsprogramm bindet eine Softscroll-Routine ins Betriebssystem
ein. Wer sich schon immer daran gestört hat, daß das Scrollen zum Beispiel
beim LIST-Befehl ziemlich ruckweise und auch etwas schnell vonstatten geht,
wird sich über diese Routine freuen. Sie eignet sich aber auch vorzüglich
dazu, in eigenen Programmen beispielsweise scrollende Vorspänne filmartig zu
steuern.

Die Routine wird mit dem Befehl

LOAD "SOFTSCROLL",8,1

von Diskette geladen. Geben Sie danach NEW ein. Nach dem Start mit

SYS 49152

installiert sich das Programm jetzt im Speicher und wird dann automatisch
gestartet. Sobald sich der Computer mit READY. zurückmeldet, ist die neue
Scrollroutine aktiviert. Probieren Sie sie aus, indem Sie zum Beispiel eine
lange Zahlenkolonne ausgeben:

FOR I = 1 TO 20000 : PRINT "DIESE ZAHL HEISST";I : NEXT

Bei Verwendung in einem Basicprogramm kann die Scroll-Routine beispielsweise
mit folgender Zeile automatisch nachgeladen und aktiviert werden:

10 IF SC=0 THEN SC=1: LOAD "SOFTSCROLL",8,1
20 SYS 49152

Auch die Scroll-Geschwindigkeit kann ggf. variiert werden. Der Befehl

POKE 49263,X

stellt X (1 bis 255) als Geschwindigkeit ein. Die Voreinstellung ist 2, je
kleiner X ist, desto schneller, aber auch ruckartiger scrollt der
Bildschirm. Der Effekt kann außerdem mit

POKE 1,55

abgeschaltet werden, die Re-Aktivierung erfolgt dann mit

POKE 1,53

Nach einem Reset sollten Sie die Routine mit

SYS 49152

neu starten, falls sie sich noch im Speicher befindet. Sie belegt den
Speicherbereich 49152 bis 49281.








Doppelt gemoppelt mit DoublePrint

Haben Sie etwas Wichtiges zu sagen? Dann machen Sie es doch auch auf dem
Bildschirm kenntlich! Dieses Utility vergrößert alle Textausgaben auf das
Doppelte.

Manchmal ist es ganz gut, wenn man die Bildschirmausgabe mit einem
besonderen Zeichensatz interessanter machen kann. DoublePrint enthält etwas
wirklich einzigartiges: Einen 20-Spalten Zeichensatz.

Warum sollte man von 40 Zeichen pro Zeile auf 20 Zeichen umschalten? Zum
einen ist ein Wort um so leichter zu lesen, je größer es ist. Zum anderen
ist es ein netter Trick, wenn Sie die Aufmerksamkeit des Anwenders erregen
wollen (z.B. bei Werbeprogrammen, die im Schaufenster ablaufen).

Wenn sich das Tool DoublePrint im Speicher befindet, ist es ganz einfach,
zwischen dem 20 und 40 Zeichenmodus umzuschalten, im Programm- oder
Direktmodus. Laden Sie zunächst die Routine mit

LOAD "DOUBLE PRINT",8,8

und starten Sie sie mit

SYS 49152:NEW

Der NEW-Befehl, der durch einen Doppelpunkt von SYS-Befehl abgetrennt wird,
ist sehr wichtig. Er löscht den Basicspeicher, der hier an eine andere
Stelle verschoben wurde. Wenn Sie später in Basicprogrammen umschalten
wollen, geben Sie nur ein:

SYS 49152

Geben Sie einmal

LIST

ein. Während Sie tippen, sehen Sie nur konfuse Zeichen. Drücken Sie
<RETURN>. Das Listing, sofern es vorhanden ist, wird ganz korrekt im 20
Zeichenmodus ausgegeben.

Der Grund für die seltsamen Zeichen ist beim C 64 technisch bedingt. Da der
Computer eigentlich nichts anderes als 40 Zeichen pro Zeile darstellen kann,
ist die 20 Zeichen-Darstellung gar nicht echt, sondern wird durch einen
veränderten Zeichensatz erzeugt. Jedes doppelt breite Zeichen besteht aus
zwei normalen Zeichen. DoublePrint hat dazu die Print-Routine des
Betriebssystems verändert. Immer wenn der C 64 auf den Bildschirm schreibt
(außer, wenn Sie etwas eingeben) wird jedes Zeichen zweimal ausgegeben,
einmal normal und einmal revers. Der Zeichensatz wurde so umdefiniert, daß
die normalen Zeichen die linke Hälfte der Zeichen enthalten und die reversen
Zeichen die rechte Hälfte. Dies ist auch der Grund dafür, daß man bei
aktiviertem 20 Zeichenmodus keine normal- oder doppelt breiten inversen
Zeichen darstellen kann. Wenn die beiden Hälften von der CHROUT-Routine
direkt nebeneinander gedruckt werden, entsteht ein doppelt breites Zeichen.

Versuchen Sie einmal folgendes: Geben Sie ein <A> ein. Nun schalten Sie den
Reversmodus mit <CTRL 9> ein und drücken noch einmal <A>. Der komplette
Buchstabe erscheint. Jetzt versuchen wir es mit einem Direktmodus-Kommando.
Gehen Sie mit dem unsichtbaren Cursor (es gibt ja keine reversen Zeichen
mehr) in eine leere Bildschirmzeile und geben ein:

PRINT "HALLO"

Wieder können Sie nicht lesen, was Sie da schreiben. Wenn Sie jetzt jedoch
<RETURN> drücken, wird völlig korrekt HALLO breit auf dem Bildschirm
ausgegeben.

Nun schalten Sie mit dem Befehl

SYS 49155

den normalen 40-Zeichenmodus wieder ein. Sie sehen jetzt ganz klar, auf
welche Weise die neuen breiten Zeichen erzeugt werden.

Wollen Sie in einem eigenen Programm Eingaben im 20 Zeichen Modus vornehmen
lassen, müssen Sie sich eine eigene Eingaberoutine schreiben, in der die
Zeichen nicht mit INPUT, sondern mit GET eingelesen und dann zweimal
ausgedruckt werden.

Das Maschinenprogramm, das DoublePrint steuert, liegt ab 49152 im Speicher.
Der neue Zeichensatz wurde bei 2048 untergebracht, der Basicspeicher beginnt
jetzt bei 4096.







Anleitung zum Programm »LETTER V2«

Dieses kurze Utility erlaubt die Darstellung von vergrößerten Buchstaben am
Zeilenanfang, wie es in Zeitschriften als »Initials« manchmal am Anfang
eines Absatzes verwendet wird.

Um sich von den Fähigkeiten zu überzeugen, sollten Sie sich zunächst einmal
das Demoprogramm ansehen. Laden Sie zunächst das Programm »Letter« mit den
Befehlen

LOAD "LETTER V2 $C000",8,8
NEW
SYS 49152

Nun erscheint die Einschaltmeldung, die bereits vergrößerte Zeichen enthält.
Drücken Sie nun die Tasten <RUN-STOP> und <RESTORE>, um die Sprites für das
Erste wieder abzuschalten. Wenn Sie nun das Demoprogramm laden, kann es
sonst nämlich passieren, daß der Computer abstürzt. Wegen des sehr
empfindlichen Timings ist es beim C 64 bei Diskettenzugriffen nicht erlaubt,
daß Sprites eingeschaltet sind.

Geben Sie nun ein

LOAD "LETTER V2 DEMO",8
RUN

Das Demo wird nun gestartet. Sie zeigt kurz die Möglichkeiten von »Letter
V2«.

Wie wird das Programm bedient? Wie Sie vielleicht bereits bemerkt haben,
erfolgt die Darstellung der »Initials«, die übrigens nur am Zeilenanfang
erlaubt sind, vollautomatisch. Nach dem Programmstart mit SYS 49152 ist die
Routine so eingestellt, daß jedesmal nach der Ausgabe von <RETURN> der
nächste Buchstabe groß dargestellt wird. In dieser Betriebsart würde also
jede Zeile mit einem Initial beginnen. Daher wurden noch vier Steuerzeichen
eingebaut, die Sie in den auszugebenden Text einbauen können. Diese Codes
wirken nicht, wenn sie direkt bei blinkendem Cursor über die Tastatur
eingegeben werden, sondern werden erst dann wirksam, wenn der C 64 sie in
einem String beispielsweise bei PRINT ausgibt.

Die Codes lauten:

<CTRL A> oder CHR$(1): Die Ausgabe der vergrößerten Buchstaben wird
eingeschaltet. Ist der Spezialmodus (siehe unten) aktiviert, dient dieser
Code dazu, die nächste folgende Zeile mit einem Initial zu versehen.
<CTRL B> oder CHR$(2): Die Ausgabe der Initials wird vollkommen abgeschaltet
<CTRL C> oder CHR$(3): Der Spezialmodus (siehe unten) wird abgeschaltet
<CTRL D> oder CHR$(4): Schaltet den Spezialmodus an. Hier wird an den Anfang
einer Zeile nur dann ein großer Buchstabe gestellt, wenn in der Zeile davor
ein <CTRL A> vorkam. Dieser Modus ist nach dem ersten Laden abgeschaltet,
sollte aber eingeschaltet werden, da man mit ihm »Letter V2« am besten
kontrollieren kann: Nur am Anfang eines neuen (inhaltlichen) Absatzes soll
ein Initial stehen.

Ein Beispiel:
10 PRINT "ES FOLGT IN DER NAECHSTEN ZEILE EIN INITIAL:"CHR$(4)CHR$(1)
20 PRINT "DAS 'D' WIRD VERGROESSERT, NICHT JEDOCH DAS FOLGENDE 'A':
30 PRINT "AB JETZT WERDEN WIEDER ALLE "CHR$(3)CHR$(1)"ZEILENANFAENGE ALS
INITIAL DARGESTELLT."
40 END

Wichtig ist noch zu wissen, daß sich niemals mehr als acht Initials
gleichzeitig auf dem Schirm befinden können, da die großen Buchstaben
Sprites sind, von denen der C 64 hardwaremäßig nur acht darstellen kann.
Wird diese Anzahl überschritten, wird die Ausgabe solange wieder normal
geschaltet, bis wieder Sprites frei sind.

Falls Sie »Letter V2« mit einem eigenen Zeichensatz verwenden wollen, teilen
Sie der Erweiterung die Startadresse der neuen Zeichen mit dem Befehl

SYS 49152, A, B

A ist hierbei die Startadresse im Speicher, B ist der Wert von PEEK (1)
während des Auslesens der Zeichen. Wenn Sie nur SYS 49152 geben, werden die
Standardwerte gesetzt (nur, wenn Sie vorher nicht mit dem erweiterten
SYS-Befehl geändert wurden). Diese sind:

SYS 49152, 53248, 51

Wie funktioniert »Letter V2« intern? Die Erweiterung besteht aus drei
Teilen. Der erste Teil, die Initialisierung, läuft nur einmal bei SYS 49152
ab und »baut« das Programm in den C 64 ein. Der zweite Teil wird jedesmal
bei der Ausgabe eines Zeichens aufgerufen (BSOUT), prüft zunächst, ob die
Ausgabe auf den Bildschirm gehen soll und ob Steuerzeichen (<CTRL A> und so
weiter) gesendet werden. Ansonsten wird geprüft, ob dem zu druckende Zeichen
ein <RETURN> (Zeilenende) vorausging. Wenn dies so ist und die Ausgabe als
Initial erlaubt und möglich ist, wird an der entsprechenden Stelle am
Bildschirm ein reverses <CBM B> (Bildschirmcode 255) in der Hintergrundfarbe
(somit ist es unsichtbar) gesetzt. Dieses dient als Erkennungszeichen für
das Initial. Daher dürfen Sie bei aktivierter Erweiterung dieses Zeichen
nicht am Zeilenanfang verwenden, diese kleine Einschränkung dürfte jedoch in
der Praxis nicht schlimm sein. Ein Initial hat die Größe von vier normalen
Blockgrafikzeichen, belegt also vier Bildschirmspeicherzellen. Links oben
steht wie gesagt der Erkennungscode, rechts oben wird nun die Nummer des
Sprites eingetragen, die beiden unteren Zeichen enthalten den Farbcode für
das Initial. Nun wird das Zeichen in ein freies Sprite übertragen, bei
Bedarf natürlich auch revers, und der restliche Text ausgegeben.

Der dritte Teil von »Letter V2« läuft im Interrupt ab. Hier wird jede 1/60
Sekunde geprüft, ob das Erkennungszeichen (255) irgendwo am Zeilenanfang
steht, und wenn ja, das Sprite dorthingesetzt. Durch diese entwas
komplizierte Technik wird das Scrollen der Initials ermöglicht.

Hier nun noch die Speicherbelegung des Programms (nur Version 2.0,
hexadezimal):

0002-0005 temporär
0800-09FF Spritebereich
0A00-9FFF Basic-Programm
C000-C302 »Letter V2«
C000-C005 Sprungtabelle
C006      Arbeitskopie von 53269 (Sprite-Enable)
C007      Bildschirmzeile für Initial
C008-C009 Basisadresse Zeichensatz (A bei SYS 49152,A,B)
C00A      Konfiguration Zeichensatz (Parameter B)
C00B      BSOUT Zwischenspeicher Y Register
C00C      BSOUT Zwischenspeicher X Register
C00D      BSOUT Zwischenspeicher Akku
C00E      Flag: letztes Zeichen war <RETURN>
C00F      Aktuelle Farbe für Initial
C010      Flag: Initial revers darstellen
C011      Nummer des Sprites für nächstes Initial
C012      Y-Registerstand zum Lesen aus Zeichenspeicher
C013      Y-Registerstand zum Schreiben in Initial
C014      relative Adresse des Zeichens high (Groß/Klein od. Grafik)
C015      Flag: Initial erlaubt (0=ja)
C016      Flag: Spezialmodus (255=ja)
C017-C01E Zweierpotenzen
C01F-C07B Einschaltmeldung
C07C-C302 100% Maschinenprogramm
C07C     Init-Routine
C11B     neue IRQ-Routine
C127     Initials suchen und ausgeben
C189     Schaltroutinen für Steuerzeichen
C1A6     neue BSOUT-Routine
C21F     Initial ausgeben
C27C     Zeichen in Sprite kopieren
C302      letztes Byte






Formatierte Zahlenausgabe mit »PRINT USING«

Eine »Print-Using-Routine« ist zwar grundsätzlich nichts neues.
Erfahrungsgemäß hat man aber nie eine zur Hand, wenn man eine braucht. Wir
präsentieren Ihnen daher eine neue besonders komfortable und leistungsstarke
Version dieses kurzen Unterprogramms zur formatierten Ausgabe einer Zahl.

Was tun Sie, wenn Sie in Basic eine Zahl oder ein Rechenergebnis auf dem
Bildschirm oder Drucker ausgeben möchten? Sie verwenden den PRINT-Befehl:
Zum Beispiel einfach

PRINT X

Eigentlich funktioniert das ganz gut. Spätestens jedoch, wenn Sie
formatierte Tabellen oder sonstige geordnete Zahlenaufstellungen ausgeben
möchten, stellen Sie einen wesentlichen Mangel des PRINT-Befehles in Basic
V2 fest: Er wirft »Kraut und Rüben« wirr durcheinander. Zahlen werden
linksbündig ausgegeben, von Ordnung kann keine Rede sein. Erwarten Sie, daß
alle Dezimalpunkte schön untereinander stehen, Einer unter Einer, Zehner
unter Zehner, Nachkommastellen an der selben Stelle beginnend? Soll
vielleicht, wie in Deutschland üblich, statt des Punktes ein Komma zur
Abtrennung der Nachkommastellen erscheinen, und dafür der Punkt zur
Abtrennung der Tausender? Schauen Sie einmal auf Ihren Bank-Kontoauszug: Da
steht nicht DM 51351,3425, sondern ordentlich DM 51.351,34 (ich wünsche
Ihnen einen so hohen positiven Kontostand!). Wünschen Sie das Vorzeichen
hinter statt vor der Zahl? Soll auf eine bestimmte Anzahl Nachkommastellen
gerundet werden? Stört Sie, daß bei Zahlen zwischen 0 und 1 die Null vor dem
Punkt fehlt? Jaja, der PRINT-Befehl ist bei numerischen Ausgaben sehr
schwach auf der Brust.

Professionelle Programme enthalten daher eine »PRINT USING« Routine, die die
Zahl vor der Ausgabe in einen String wandelt, dort die notwendigen
Änderungen vornimmt und dann den String ausgibt. Solche Routinen in Basic
haben einige Nachteile: Sie sind schwer zu programmieren, meist nicht
universell einsetzbar, kosten Zeit und - ganz wichtig - produzieren eifrig
String-Müll, der über kurz oder lang zur gefürchteten Müllabfuhr »Garbage
collection« im Computer führt. Und die kann bis zu einigen Minuten dauern.

Es liegt daher nahe, eine Konvertierungsroutine numerisch -> formatierten
String in Maschinensprache zu formulieren. Die Routine, die wir Ihnen
bieten, beseitigt nicht nur ALLE weiter oben genannten Nachteile. Sie ist
darüberhinaus sehr komfortabel und einfach in der Anwendung. Sie brauchen
lediglich grundlegende Basic-Kenntnisse zur Anwendung des Hilfsprogramms,
das leicht in eigene Basicprogramme eingebaut werden kann.

Zum Test laden Sie die nur zwei Blocks kurze Routine mit

LOAD "USING",8,8

Danach geben Sie NEW ein. Die Routine wird mit folgendem, nur auf den ersten
Blick kompliziert erscheinenden Befehl aktiviert:

SYS 51200,X,LE,VZ,TS,NK,FZ,CA,X$

Die Buchstaben hinter der Adresse 51200 stellen die Parameter dar, die die
Funktionsweise und damit das Aussehen der gewandelten Zahl steuern. Sie
können hier Zahlen einsetzen, Variablen oder numerische Basic-Terme. Sehr
wichtig sind die acht Kommas, die die Parameter abtrennen:

X ist die numerische Variable, deren Wert ausgegeben werden soll, oder ein
Rechenausdruck, oder auch eine Klartext-Zahl.

LE bestimmt die Länge des konvertierten Ausdrucks in Zeichen. Wird der
Ausdruck länger als LE, erscheint der ?STRING TOO LONG ERROR. Ist der
erzeugte Ausdruck zu kurz, wird er von links mit dem Füllzeichen FZ (siehe
unten) aufgefüllt (man sagt »rechtsbündige Ausgabe«).

VZ bestimmt die Position des Vorzeichens. Ist VZ=0, so wird das Vorzeichen
unterdrückt, es erscheint also nur der Absolutwert der Zahl. Ist VZ=1, so
erscheint das Vorzeichen direkt vor der ersten Stelle der Zahl (Minuszeichen
oder Leerzeichen für Zahlen über Null), so wie wir das von PRINT kennen. Ist
VZ=128, so stellt der Computer das Vorzeichen hinter die Zahl.

TS nimmt entweder den Wert 0 oder 1 an. Ist TS=1, so trennt der Computer die
Tausender und Millionen-Stellen durch einen Punkt ab. Eintausendvierhundert
ist dann 1.400 statt 1400, fünfzehn Millionen dreihundert erscheint als
15.000.300 statt 15000300. Ist TS=0, finden sich keine Trennpunkte in der
Ausgabe.

NK ist die Anzahl der Nachkommastellen und bewegt sich im Bereich von 0
(kein Nachkommaanteil) bis 9 (neun Nachkommastellen). Das Programm nimmt
dabei automatisch die erforderliche 4/5-Rundung vor. Soll etwa 135.628 auf
zwei Nachkommastellen genau ausgegeben werden, ist das Ergebnis aufgerundet
135.63. Wählen Sie NK=0, so erscheinen zwar keine Nachkommastellen, dafür
aber ggf. der Punkt bzw. das Komma (siehe unten CA). 135.628 auf 0 Stellen
genau liest sich mithin 136.

FZ ist der ASCII-Code des Füllzeichens, mit dem der erzeugte String von
links aufgefüllt wird, bis er die gewünschte Länge (LE) erreicht hat. So
werden Zahlen rechtsbündig, die einzelnen Stellen stehen brav untereinander.
Gewöhnlich soll mit dem Leerzeichen aufgefüllt werden, FZ ist dann 32. Auch
das »Scheckfälschungszeichen«, der Stern, kann Verwendung finden, dann
setzen Sie für FZ die 42 ein. Jetzt kann kein böser Bube Ihre Eurocheques
mehr »korrigieren«, wenn Sie sie mit dem C 64 und unserer Using-Routine
bedrucken. Eine Tabelle dieser ASCII-Codes finden Sie im C 64-Handbuch im
Anhang.

CA ist entweder 0, 1, 2 oder 3 und entscheidet über das Trennzeichen
zwischen Vor- und Nachkommastellen (man sagt »Dezimalseperator«). Ist CA=0,
so wird der Nachkomma-Anteil unabhängig (!) vom Parameter NK total
abgeschnitten. Setzen Sie also CA nur dann auf Null, wenn auch NK Null ist.
Ist CA=1, so trennt ein Punkt die Nachkommastellen ab, bei CA=2 ist es das
Komma und bei CA=3 ein Leerzeichen.

X$ schließlich ist die String-Variable, der der errechnete und konvertierte
Ausdruck übergeben wird. Wurde X$ noch nicht zuvor im Basicprogramm
verwendet, wird es neu angelegt, sonst wird der alte Inhalt gelöscht. Statt
X$ können Sie eine beliebige Textvariable (etwa A$ oder TE$ usw.) einsetzen.
Da der konvertierte Ausdruck ja formatiert ist, muß es sich logischerweise
um eine Stringvariable handeln.

Das folgende Beispiel demonstriert die Anwendung: Es soll in einen Scheck
der DM-Betrag eingesetzt werden. Dabei soll der Scheck verfälschungssicher
sein, weshalb wir Sternchen vor die Summe setzen (FZ=42). Der Betrag soll 15
Zeichen lang sein (LE=15), das Vorzeichen steht hinter dem Betrag (VZ=128).
Die Tausenderpunkte sind eingeschaltet (TS=1), als Trennzeichen für die
Pfennige (NK=2) wählen wir das Komma (CA=2). Der Betrag wird in BE$
übergeben und dann mit PRINT ausgegeben:

10 INPUT"BETRAG IN DM";DM
20 SYS 51200,DM,15,128,1,2,42,2,BE$
30 PRINT"BETRAG: DM ";BE$
40 END

Vergessen Sie nicht, vor der Eingabe dieses Programms »USING« wie oben
beschrieben zu laden! Einige Beispiele für Ein- und Ausgaben:

BETRAG          AUSGABE
12              DM *********12,00
23547.124       DM *****23.547,12
-77777777.777   DM *77.777.777,78-
0.50            DM **********0,50

Gültige Eurocheques, die mit dem C 64 und Using bedruckt wurden, nimmt der
Autor jederzeit gern entgegen.

Damit dürfte Ihnen das Prinzip klar sein. Wollen Sie die Routine in eigene
Programme einbauen, sehen Sie am besten wie folgte eine Boot-Zeile vor:

1 IF A=0 THEN A=1:LOAD "USING",8,8
2 weiter im eigenen Programm

Zum Schluß noch einige Hinweise. Bitte setzen Sie für die Parameter, vor
allem für CA, keine anderen Werte als die oben angebotenen ein,
Fehlfunktionen oder Fehlermeldungen wären die Folge. Die Fehlermeldung
?FORMULA TOO COMPLEX ERROR kann theoretisch ebenfalls erscheinen und weist
dann auf eine interne Störung bei USING hin, das Programm ist jedoch sicher
programmiert und weist keine Fehler mehr auf. Die Ausgabe des konvertieten
String auf den Drucker ist mit OPEN4,4:PRINT#4,BE$ natürlich ebenfalls
möglich, ebenso wie der von SYS 51200 erzeugte String ganz normal wie ein
solcher behandelt und mithin auch z.B. mit LEFT$ usw. nachbearbeitet werden
kann.

Warum nur muß man auf dem C 64 solche wichtigen und wertvollen Tools nur
immer selbst programmieren, warum wird zum Beispiel keine eingebaute
Using-Routine mitgeliefert?





4. KAPITEL: FLOPPY-PROGRAMMIERUNG







Relativ einfach!

Alles ist relativ, das hat schon der alte Albert Einstein gesagt. Aber viele
Programmierer haben Angst vor relativen Dateien. Wir zeigen Ihnen, wie es
einfach und schnell geht, welche Fallen beachtet werden sollten.

Die Idee, die hinter den relativen Dateien steckt, ist die folgende: Um
beispielsweise den Eintrag (man sagt »Record«) Nummer 25 zu lesen, brauchen
Sie sich nicht vorher durch die Records 1 bis 24 zu wühlen, so wie dies bei
Verwendung der sequentiellen Dateien (SEQ) der Fall wäre. Ein weiterer
Vorteil ist, daß wir keine Kopie der gesamten Datei machen müssen, um nur
einen Datensatz zu ändern; es wird stattdessen einfach der alte Eintrag
durch den neuen ersetzt - ganz unbürokratisch.

REL-Dateien im Prinzip...

Und wie funktioniert das intern? Zunächst einmal belegt jeder Eintrag einen
bestimmten, beim Anlegen der Datei vorgegebenen Platz. Dadurch müssen die
Einträge, die dem Datensatz folgen, den wir ändern wollen, nicht verschoben
werden. Nicht der ganze Platz, der pro Datensatz vorgesehen wurde, muß
jedoch auch belegt werden. Sie könnten eine Datei mit einer Datensatzlänge
von 60 erzeugen, obwohl einige (oder alle) Einträge weniger als je 60 Bytes
belegen. Die restlichen Bytes werden mit Nullen aufgefüllt. Der zweite Teil
des Tricks betrifft die Einführung eines Zeigers, des »Index«. Immer, wenn
Sie einen bestimmten Datensatz ansprechen, führt das Laufwerk verschiedene
Berechnungen durch und weiß dann, an welcher Stelle auf der Diskette die
gesuchten Daten stehen. Dazu existiert für jede REL-Datei ein sogenannter
»Side-Sector« (zu deutsch: Zeigerblock), in dem die belegten Blocks
verzeichnet sind. Die Zeigerblöcke fungieren als »Wegweiser« durch das File.
Mit der genauen Artihmetik braucht sich der Programmierer zum Glück nicht
befassen, sie ist ziemlich kompliziert. Rufen wir beispielsweise den
Datensatz 15 einer relativen Datei mit Datensatzlänge 100 ab, weiß das
Laufwerk aufgrund seiner Berechnungen, daß es dazu den 6. Sektor der Datei
lesen muß. Es sucht im Side-Sector die Adresse (Track, Sektor) und liest den
Block. Danach ergeben weitere Berechnungen, daß sich der gesuchte Datensatz
ab Byte 130 in diesem Block befindet. Wieder braucht man sich keine Gedanken
darüber machen, das haben bereits die Entwickler der 1541 getan (allerdings
nicht immer ganz astrein, wie wir später sehen werden). Sie geben nur die
Datensatznummer an und lassen den Computer rechnen. Weitere Hinweise zur
internen Bearbeitung durch die Station finden Sie unten.

... und in der Praxis

Es gibt aber auch einige wesentliche Nachteile bei relativen Dateien. Sie
sind langsamer, größer und komplexer als SEQ-Files, und halten eine ganze
Reihe an bösartigen Fallen bereit, in die man unweigerlich stürzt, wenn man
nicht einige Tricks kennt. Diese Ihnen vermitteln will dieser Artikel.

Betrachten wir ein SEQ-File. Es ist viel einfacher als eine REL-Datei, und
erledigt vieles mindestens genauso gut. Eine alte Grundregel der
Datenverarbeitung besagt: Falls pro »Session« auf mehr als 15 Prozent eines
Files zugegriffen werden muß, sollte man eine sequentielle Datei verwenden;
wenn weniger, eine relative Datei. Der Knackpunkt ist, daß es völlig unnötig
ist, sich erst durch den Anfang der Datei zu kämpfen, wenn man einen weiter
hinten liegenden Datensatz lesen will. In diesem Fall erlaubt die REL-Datei
direkten Zugriff auf den Teil, den Sie suchen. Eine sequentielle Datei
dagegen muß vom Anfang bis zum Ende gelesen werden, und eine Änderung
verlangt die Erstellung einer neuen Kopie der Datei.

Ziehen Sie auch folgende Punkte in Betracht. Belegt eine sehr große
sequentielle Datei sehr viel Platz auf Diskette (über eine halbe
Diskettenseite), haben Sie gar nicht mehr genügend Platz für eine Kopie auf
der selben Floppy. Hier muß man der relativen Datei einen klaren Vorteil
einräumen. Einen wesentlichen Nachteil der relativen Datei allerdings
sollten Sie immer im Auge behalten. Soll ein Datensatz geändert werden, geht
der alte Inhalt unwiderruflich verloren. Ein Eingabefehler beispielsweise
kann dazu führen, daß wichtige Informationen für immer verloren sind. Mit
SEQ-Dateien erzeugen Sie die neue Version, indem Sie eine Kopie anlegen. Die
alte Version ist, ggf. »unsichtbar«, immer noch vorhanden und könnte im
Falle eines Falles wiederhergestellt werden.

Das Demoprogramm

Den Umgang mit REL-Dateien erlernen Sie am besten anhand eines fertigen
Programmes. Das Programm zu diesem Artikel ist weitgehend selbsterklärend
und nicht zu knapp mit REM-Vermerken dokumentiert, daher wollen wir im
folgenden nur auf wichtige Eigenarten besonders hinweisen. Im Programm
werden einige der folgenden Merkpunkte in die Praxis umgesetzt. Es müßte auf
allen Acht-Bit Rechnern von Commodore mit einer der üblichen
Diskettenstationen laufen. Im Textkasten finden Sie eine Zusammenstellung
der wichtigsten Diskettenbefehle.

Die folgenden Richtlinien wollen als Sicherheitsratschläge verstanden
werden. Manchmal macht es nichts aus, wenn man eine davon bricht. Jedoch
lieben nur wenige von uns das Risiko, Daten zu verlieren, mithin kann es
nicht schaden, die sieben Grundregeln sorgfältig, konsequent und stur zu
beachten. Die meisten dieser Maßnahmen liegen übrigens in
Betriebssystemfehlern im Laufwerks-DOS begründet, in das Commodore
bekanntlich nicht allzu viel Mühe investiert hat. (Eine
Sonntags-Produktion?)

Sieben Regeln

Regel 1: Erzeuge genügend Datensätze

Wenn Sie das erste Mal ein File anlegen, sorgen Sie dafür, daß ausreichend
Records belegt werden, so daß mehr als ein Block auf Diskette von der Datei
belegt wird. Das Beispielprogramm arbeitet etwa mit einer Datensatzlänge von
33, mithin sollten acht oder mehr Datensätze angelegt werden (254/33 = 8).
In unserem Fall werden 10 Datensätze erzeugt (vgl. Zeile 320). Später kann
eine REL-Datei zwar theoretisch erweitert werden, jedoch klappt das in der
Realität nicht immer reibungslos. Gönnen Sie der Datei daher lieber zu viele
Einträge, wenn Sie sie anlegen.

Beim Anlegen der Datei in Zeile 290 (hier teilen wir dem Laufwerk das erste
Mal mit, daß wir die Absicht haben, mit REL-Dateien zu operieren) stellen
wir die Datensatzlänge auf 33 ein. Ihnen fällt vielleicht auf, daß diese
Angabe bei den OPEN-Befehlen in 190, 390 und 1400 fehlt. Anders als bei
SEQ-Dateien (hier müssen Sie immer schreiben: OPEN 2,8,2,"name,S,R") können
wir uns diese Angabe beim Öffnen einer bereits bestehenden REL-Datei sparen.

Es kann nicht schaden, die Datei mit einem gesonderten Programm anzulegen.
Nachdem ein File angelegt wurde, wird es im Folgenden nur noch »updated«. Im
Beispielprogramm wird in den Zeilen 170 bis 240 geprüft, ob die Datei schon
besteht. Wenn nicht, wird sie in 280 bis 390 neu angelegt. Das Programm
akzeptiert als einzige Floppy-Fehlernummer die 62 (FILE NOT FOUND), alles
andere ist ein »echter« Fehler, der vor dem Programmstop in den
Diagnoseroutinen ab Zeile 1620 ausgewertet wird.

Regel 2: Setze den Record-Zeiger immer auf das erste Byte des Datensatzes

Der Zeiger im P-Befehl (vgl. Textkasten) sollte immer auf das erste Zeichen
im Eintrag gestellt werden. Der letzte Parameter des P-Kommandos sollte
daher CHR$(1) sein (siehe Testprogramm Zeilen 670, 920, 1300). Lesen oder
beschreiben Sie jedes Mal den ganzen Record in einem »Aufwasch«, so ersparen
Sie sich unnötigen Ärger.

Regel 3: Prüfe den Disk-Status

Lesen Sie immer den Status aus dem Fehlerkanal 15, nachdem Sie der relativen
Datei einen Befehl gegeben haben. Sie brauchen den ermittelten Fehler
überhaupt nicht weiter auszuwerten (Zeile 1360), durch das Lesen des
Fehlerkanals gewinnt das Laufwerk die notwendige Zeit, um die gesuchte
Stelle der Datei aufzuspüren und anzufahren.

Es ist interessant, daß einige Fehlermeldungen durchaus im Normalbetrieb
auftreten und den korrekten Ablauf anzeigen. So erwartet Zeile 340 einen
Fehler Nr. 50. Der Grund: Vorher wurde die relative Datei angelegt, indem
wir das »Freizeichen« CHR$(255) in den höchsten Datensatz (Nr. 10)
schrieben. Dieser Satz existierte noch nicht, da die Datei ja eben erst
angelegt wurde. Das Laufwerk läßt dies natürlich nicht ungestraft mit sich
machen, und reagiert etwas sauer, wenn auch zu unrecht mit dem Fehler. Bei
der Statusprüfung in Zeile 690 weist ein NO RECORD-»Fehler« darauf hin, daß
es in der Datei keine weiteren Einträge mehr zu lesen gibt. Das Programm
bricht die Schleife hier ab. Und in Zeile 930 informiert eben dieser Fehler
den Anwender darüber, daß der momentan beschriebene Datensatz noch
»jungfräulich« war.

Fehlerkanal lesen

Sie denken bitte daran, daß das wichtige nur das Lesen des Status ist, es
dient nicht nur zum Erkennen von Fehlern, sondern auch zur Verlangsamung des
Programms, damit keine Daten zwischen Computer und Laufwerk verloren gehen,
bevor das Drive fertig ist.

Regel 4: Addiere 96 zur Sekundäradresse

Es ist nicht weiter schwer, beim P-Befehl (z.B. in Zeile 320, 670, 920 oder
1320) zur Sekundäradresse den Wert 96 zu addieren, damit das Drive die Datei
richtig behandelt. Diese wurde in Zeile 190 mit der normalen Sekundäradresse
2 geöffnet, zu der wir dann in den genannten Zeilen 96 addieren (ergibt 98),
um auf die Datei zuzugreifen.

Regel 5: Nur ein PRINT# pro Datensatz

Wenn Sie in ein File schreiben, benutzen Sie einmal den Befehl PRINT#, um
einen Eintrag zu schreiben; nicht mehr und nicht weniger. Sie sollten alle
Felder des Satzes in einem »Aufwasch« schreiben. (Wenn Sie die weniger
zuverlässige Methode verwenden, mit dem P-Befehl und einem letzten Parameter
ungleich 1 auf ein beliebiges Byte innerhalb des Records zu positionieren,
können Sie einen Teil des Eintrags verändern, sollten es aber aus
Sicherheitsgründen nicht).

Sehen Sie sich die Zeilen 1000 bis 1080 an. Obwohl es in einem Datensatz
verschiedene Felder gibt, werden sie in Zeile 1050 zusammengenagelt, damit
wir sie in Zeile 1080 alle zusammen an die 1541 senden können. Die einzelnen
Felder werden mit einem CR (Carriage Return, CHR$(13), entspricht der
<RETURN>-Taste) getrennt, jedoch ist am Ende des Textes kein CR erwünscht.
Daher wird dieses in Zeile 1070 ausgefiltert. Interessieren beim Lesen
verschiedene Datenfelder, gehen Sie so vor wie in den Zeilen 620 bis 770, wo
die System-Status-Variable dazu verwendet wird, festzustellen, ob innerhalb
des Datensatzes noch weitere Felder folgen.

Wenn Sie, wie es in unserem Beispielprogramm der Fall ist, vorhaben, in
sequentieller Reihenfolge auf die Einträge zuzugreifen (1, 2, 3, und so
weiter), sollten die vorstehenden Maßnahmen genügen. Wollen Sie jedoch auch
beim Lesen wild durch die Datei springen (etwa im Menüpunkt 2), folgen hier
noch zwei Merkpunkte, damit es keine Bauchlandung wird:

Beliebige Reihenfolge

Regel 6: Zum Lesen zweimal positionieren

Wenn Ihr Programm Datensätze in beliebiger Reihenfolge liest, geben Sie das
Positionier-Kommando (P) zweimal hintereinander. Lesen Sie jedes Mal den
Status der Station. Das klingt nach »Dummsuff«, hat aber durchaus seinen
guten Grund: Um auf einen neuen Datensatz zu positionieren, muß das Laufwerk
oft einen neuen Datenblock einlesen. Dazu muß erst wieder der side sector
gelesen werden, um die Track/Sektorangabe des nächsten Datenblocks zu
finden. Manchmal, wenn der neue Datenblock sehr weit vom alten entfernt
liegt, muß sogar ein neuer side sector gelesen werden. Schließlich müssen
noch zwei eigentliche Datenblocks von der Magnetscheibe geholte werden,
bevor Daten zur Verfügung stehen. Das alles geht natürlich nicht mit
Hexerein, sondern kostet unter Umständen viel Zeit. Gönnen Sie dem Laufwerk
eine Verschnaufpause und positionieren Sie zweimal. Das Demoprogramm tut
genau dieses im Bereich 630 bis 700.

Regel 7: Zum Schreiben Datei erst einmal schließen und anschließend wieder
öffnen

Schreibt das Programm Datensätze ohne Einhaltung der Reihenfolge, sollte das
File zur Sicherheit nach jedem Schreibzugriff geschlossen und gleich wieder
geöffnet werden (nach Auslesen des Status). Sie bezahlen dafür ggf. über
eine Sekunden an Programmlaufzeit, umgehen aber den Fehler im Betriebssystem
der Floppy, und stellen sicher, daß keine Daten im Nirwana landen.

Wenn Records geschrieben werden, hat das Laufwerk eine Menge zu tun. Es
führt nicht jedes Mal tatsächlich auch Schreibzugriffe auf die Magnetschicht
aus, wenn Sie den PRINT#-Befehl gehen, sondern speichert (theoretisch) die
Daten in einem Puffer und wartet, bis ein CLOSE-Befehl erfolgt oder mit dem
P-Kommando ein anderer Eintrag angewählt wird. Die Diskettenstation sollte
dann eigentlich die geänderten Daten sicher speichern, bevor sie den
nächsten Block liest. Dies ist allerdings eine etwas »kitzlige«
Angelegenheit, manchmal kommt es vor, daß die 1541 schlicht und einfach
vergißt, daß noch Änderungen ausstehen.

Die sicherste Vorgehensweise ist, das File zu schließen und wieder zu
öffnen. Genau das tut unser Beispielprogramm in Zeilen 1110 mit 1160 und
1370 mit 1420. Sicher, in diesem Fall ist das wohl zu viel des Guten, da das
Drive genügend Zeit zur Speicherung hat, während der Anwender den nächsten
Datensatz eingibt. Aber es sind Ihre Daten - Sicherheit geht vor.

Noch mehr Fallen

Es gibt da noch einige andere Anormalitäten, wenn Sie mit REL-Files zu tun
haben. Die Fehler im DOS sind gravierender, als man glauben möchte. Bitte
wundern Sie sich bei Ihren Experimenten nicht, wenn im Fehlerkanal plötzlich
nie dagewesene Fehlermeldungen wie

49,,00,00
08,DISK,00,00
04,OPEN,00,00
06,NOT,00,00

stehen (kein Witz - diese und andere Meldungen traten bei der Recherche zu
diesem Text tatsächlich auf!).

Auf Commodore-Floppies sollten relative Dateien nicht die ASCII-Zeichen 0
(Nullbyte) und 255 enthalten. Versuchen Sie, eines dieser Zeichen in einen
Record einzubauen, werden Sie wahrscheinlich unangenehme Überraschungen
erleben. Zeichen 0 wird verwendet, um den nicht belegten Teil des Eintrags
aufzufüllen. Steht ein Nullbyte zwischen den Daten, kann die 1541 nicht mehr
feststellen, wo der Datensatz endet, und arbeitet falsch. Die 255 wird vom
DOS verwendet, um einen leeren Datensatz zu markieren - ohne Daten. Unser
Beispielprogramm schreibt diesen Code in Zeile 350 beim Anlegen der Datei,
in Zeile 1350, um einen Eintrag zu löschen und wertet ihn in 720 aus, um
einen leeren Datensatz zu erkennen. Wollen Sie diesen Code verwenden, passen
Sie also auf.

Relative Files mit Datensatzlängen 42, 58 oder 63 können von der 1541 nicht
angelegt werden. Damit müssen Sie sich einfach abfinden. Grund: Aufgrund
eines Fehlers im DOS wertet das System diese drei Zahlen als die ASCII-Codes
für Stern, Doppelpunkt und Fragezeichen, und solche Zeichen sind für
Disk-Befehle bekanntlich tabu.

Sie sollten REL-Dateien grundsätzlich nur auf leeren Disketten anlegen, da
sie (wenn sie groß genug werden) die anderen Dateien auf der Diskette und
schlimmstensfalls sogar das Directory ohne Rücksicht auf Verluste gnadenlos
überschreiben. Auch das Erweitern einer solchen Datei (laut Handbuch
»problemlos möglich«) ist daher nur mit Vorsicht zu genießen.

Sie verfügen jetzt über das notwendige Werkzeug, um mit relativen Dateien
arbeiten zu können. Was vielleicht noch fehlt, ist das Verständnis für die
internen Abläufe, die uns als Programmierer im Normalfall gar nicht zu
interessieren brauchen. Dennoch kann es nicht schaden, sich kurz damit zu
befassen - vor allem auch, wenn es darum geht, den Platzbedarf eines solchen
Files abzuschätzen.

REL-Dateien intern

Wie bereits erwähnt, besteht die REL-Datei aus drei Teilen. Da wäre zum
einen der Eintrag im Directory. Zum zweiten die normalen Datenblöcke, die
ganz normal wie bei einer SEQ-Datei verkettet sind. Die Side-Sectors
(Zeigerblöcke) bilden den dritten Teil. Sie dienen als Wegweiser durch die
Datei. Jeder Side-Sector enthält in den ersten beiden Bytes einen Zeiger auf
den nächsten Side-Sector. Byte 2 enthält die Nummer des Side-Sectors (0 bis
5), in Byte 3 steht die Datensatzlänge. Danach folgen in zwölf Bytes die
Adressen (Track/Sektor) aller maximal sechs Side-Sector-Blöcke einer
REL-Datei (siehe unten). In den verbleibenden 256 - 2 - 2 - 12 = 240 Bytes
stehen die Adressen von maximal 120 Datenblocks. Dadurch, daß in jedem
Side-Sector die Adressen aller anderen Side-Sectors stehen, muß das Laufwerk
nur einen Lesezugriff ausführen, um einen beliebigen Zeiger zu lesen - das
bringt einen Geschwindigkeitsvorteil. Pro 120 angefangenen Datenblöcken wird
also ein Side-Sector angelegt. Für eine neu formatierte Diskette, die 664
freie Blöcke zur Verfügung stellt, ergibt sich demnach ein Bedarf von
maximal sechs Zeigerblöcken, dadurch bleiben bis zu 658 Blöcken zur
relativen Datenspeicherung übrig. Die kleinstmögliche REL-Datei besteht aus
zwei Blöcken (ein Side-Sector, ein Datenblock). Jeder Datenblock enthält 254
Datenbytes (die ersten beiden Bytes werden für die Verkettung benötigt,
mithin stehen auf einer Diskette maximal 167132 Bytes für die relative
Datenspeicherung zur Verfügung. Wir errechnen die maximal mögliche Anzahl
von Einträgen bei gegebener Datensatzlänge, indem wir die 167132 durch die
Satzlänge teilen. Auch hier gilt die theoretische Obergrenze von 65535
Sätzen (dies entspricht der höchsten mit zwei Bytes darstellbaren Zahl), die
überhaupt nur bei einer Datensatzlänge von zwei Zeichen übschritten werden
könnte. Unsere Beispieldatei erlaubt bis zu 167132 / 33 = 5064 Einträge. Bei
der höchstzulässigen Datensatzlänge von 254 Bytes erhalten wir genau 658
Datensätze, entsprechend einem Satz je Block.

Bei der Arbeit mit REL-Files muß der Programmierer also einige Dinge
besonders beachten, die auf den ersten Blick nicht logisch erscheinen. Aber
wenn Sie die Regeln beim Programmieren einhalten, werden Sie keinerlei
Probleme haben. Sie werden mit einer sehr flexiblen Art der Datenspeicherung
belohnt, die nicht nur Programme professioneller macht, sondern auch große
Vorteile in Komfort und Geschwindigkeit mit sich bringt.

Literatur:
Immer der Reihe nach, 64'er 7/89, Seite 94
Kreuz und quer, 64'er 8/89, Seite 56
Kreuz und quer, 64'er 9/89, Seite 98
Floppy-Flops, 64'er 1/91, Seite 55
Floppy-Flops, 64'er 2/91, Seite 50
Karsten Schramm, Die Floppy 1541, Markt & Technik Verlag, Best.Nr. 90444
Lothar Englisch, Gerd Szczepanowski, Das große Floppy-Buch, Data Becker

Befehle zu relativen Dateien:

(1) Berechnung von Low- und Highbyte
- Highbyte berechnen       HB=INT(SN/256)
- Lowbyte berechnen        LB=SN-HB*256

(2) Anlegen einer REL-Datei
- Befehlskanal öffnen      OPEN 1,8,15
- Datenkanal öffnen        OPEN 2,8,2,"name,L,"+CHR$(SL)
- Positionierung auf höchsten Datensatz
                           PRINT#1,"P"CHR$(98)CHR$(L)CHR$(H)CHR$(1)
- Freigeben des Satzes     PRINT#2,CHR$(255);
- Kanäle schließen         CLOSE 2:CLOSE 1

(3) Öffnen einer bestehenden REL-Datei
- Befehlskanal öffnen      OPEN 1,8,15
- Datenkanal öffnen        OPEN 2,8,2,"name"

(4) Lesen eines Datensatzes
- Positionierung auf den Datensatz
                                PRINT#1,"P"CHR$(98)CHR$(L)CHR$(H)CHR$(1)
- Daten einlesen           INPUT#2,daten oder GET#2, daten

(5) Schreiben eines Datensatzes (alle Daten in einem String!)
- Positionierung auf den Datensatz
                                PRINT#1,"P"CHR$(98)CHR$(L)CHR$(H)CHR$(1)
- Daten schreiben          PRINT#2,daten
- Kanäle schließen         CLOSE 2:CLOSE 1

Abkürzungen: SN = Satznummer, H = Highbyte, L = Lowbyte, SL = Satzlänge

Der P-Befehl

PRINT#1,"P"CHR$(c)CHR$(l)CHR$(h)CHR$(p)

CHR$(c) übergibt die Sekundäradresse des OPEN-Befehles, unter dem die
REL-Datei geöffnet wurde, plus 96
CHR$(l) und CHR$(h) übergibt im Format Lowbyte, Highbyte die Nummer des
Datensatzes, auf den positioniert werden soll
CHR$(p) kennzeichnet die Stelle, auf die innerhalb des Eintrags positioniert
werden soll. p sollte 1 sein.






ARC 1.5 - ein ganz neues Tool für den C 64

Aus der Welt der Personal Computer ist es nicht mehr wegzudenken. Nun wird
auch der C 64 davon befallen. ARC schlägt zu!

Vielleicht wissen Sie, was ein »Linker« ist: Dieses Programm gestattet es,
ein mehrteiliges Programm, das seine Bestandteile nacheinander in den
Speicher lädt (»nachlädt«), zu einem File zusammenzufassen, das dann ohne
Nachladen auskommt.

Das einteilige Programm, das dabei erzeugt wird, startet man mit RUN. Es
werden jetzt die einzelnen Bestandteile, die der Linker direkt
aneinandergehängt hat, wieder an ihre richtigen Positionen im Speicher
geschoben und dann das Programm normal gestartet. Natürlich muß man bei
dieser Methode die Nachladebefehle aus dem Hautprogramm entfernen, da dieses
sonst nun versucht, ganz normal nachzuladen.

Bislang gab es jedoch noch kein Programm für den C 64, das zwar auch
verschiedene Files von Diskette zusammenfügt und als Gesamtprogramm
speichert, das nach dem Starten dann aber die einzelnen Files wieder auf
Diskette generiert. Vor allem auf PCs, aber auch beim Amiga sind solche
Tools, »Archive« genannt, Standard. Man verwendet sie etwa, wenn man sehr
viele kleine Programme beispielsweise über BTX oder das Telefon (DFÜ)
übertragen will. Hier ist es leichter (und billiger), nur ein kompaktes
Gesamtpaket zu übertragen. Der Empfänger startet dieses dann, legt eine
leere formatierte Diskette ein und die kleinen Files werden auf Diskette
generiert.

Auch zur Datensicherung sind solche Utilities geeignet. Stellen Sie sich
vor, Sie haben so um die vierzig kleine Files zu je etwa vier Blocks, die
Sie beispielsweise auf Cassette überspielen wollen. Danach wandert die
Cassette ins Archiv, um die Programme sicher aufbewahrt zu haben.

Sie könnten nun alle vierzig Programme nacheinander auf das Band
überspielen. Jedoch würde vielleicht ein Packvorgang enormen Platzgewinn
bringen. Das Packen jedes einzelnen Files ist jedoch nicht nur sehr
arbeitsaufwendig, sondern auch nicht effizient, da hier der Entpacker schon
so lang würde, daß der durch Packen erzielte Platzgewinn zumindest wieder
ausgeglichen werden würde. Packen Sie nun mit einem »Archive«-Utility alle
vierzig Files zu einem Programm zusammen, es würde dann so um die 162 Blocks
lang werden (etwa zwei Blocks nimmt die kleine Routine in Anspruch, die nach
dem Starten des Kompaktfiles die einzelnen Files wieder auf Diskette
generiert). Durch Packen läßt sich dieses sicherlich auf weit unter 162
Blocks quetschen, und Sie erreichen enormen Platzgewinn.

Aber so ein Utility gab es für die kleinen Commodore-Computer bisher noch
nicht. Daher wurde »ARC« geschrieben. Dieser Spezial-Linker unterscheidet
sich, wie gesagt, von herkömmlichen Linkern dadurch, daß nach dem Start des
Gesamtfiles nicht (nur) im Speicher, sondern auf Disk die einzelnen Files
wieder erzeugt werden. Das in reiner Maschinensprache geschriebene Tool kann
dabei maximal 45 Stück verarbeiten. Sollen es noch mehr sein, müssen Sie die
ersten 45 Files zusammenpacken, den Rest in ein zweites Gesamtfile, die
beiden Kompaktfiles durch einen guten Packer schicken (»ARC« packt nicht
automatisch, da Packer laufend weiterentwickelt werden, der Anwender kann
dann einen Packer seiner Wahl anwenden), und die dabei entstehenden Files
noch einmal zusammen-manschen.

Das Programm wird mit dem Befehl

LOAD "ARC 1.5",8

geladen und mit

RUN

gestartet. Nach dem Start sind zunächst die Namen der Einzelfiles
einzugeben. Die Eingabe ist jedes Mal mit <RETURN> zu beenden. Sämtliche
Eingaberoutinen des Programmes sind so programmiert, daß durch
Cursorbewegungen die Bildschirmmaske nicht zerstört werden kann. Bitte
vermeiden Sie bei der Eingabe Joker (»*« und »?«), um die Filenamen
abzukürzen. Beim Laden gibt es zwar keine Probleme, da beim späteren
Speichern jedoch wieder exakt die selben Namen verwendet werden, ist die
Verwendung von Jokern nicht erlaubt.

Durch Eingabe des Dollarzeichens an erster Stelle wird das
Inhaltsverzeichnis der eingelegten Diskette (Directory) auf dem Bildschirm
gelistet. Am Ende kann durch Tastendruck wieder in die Eingabeschleife
zurückgekehrt werden. Hinter dem Dollarzeichen kann die Directory auch
genauer spezifiziert werden. So listet etwa »$HA*« alle Files, die mit »HA«
beginnen.

Durch Eingabe eines Fragezeichens können Sie die letzte Eintragung
korrigieren. Dies funktioniert natürlich nicht, wenn Sie erst bei der
Eingabe des ersten Namens sind, oder der Cursor in der obersten Zeile steht.
Die Liste der Filenamen wird bei der Eingabe gescrollt.

Zur Beendigung geben Sie einfach einen Stern ein. Dies funktioniert nur,
falls bereits mindestens ein Filename eingegeben wurde.

An Stelle des 46. Filenamens nimmt das Programm nur noch das Dollarzeichen,
das Fragezeichen und den Stern an, da mehr Filenamen nicht erlaubt sind.

Für den Fall, daß Sie sehr viele Routinen mit ähnlichen oder schwer zu
merkenden Namen zusammenpacken wollen, ist es sinnvoll, die gewünschten
Filenamen direkt aus dem Directory zu übernehmen. Daher wurde in der neuen
Version 1.5 eine solche Funktion implementiert. Geben Sie dazu anstelle
eines Filenamens einen Doppelpunkt ein und drücken <RETURN>. Die
Bildschirmmaske wechselt nun, Sie werden aufgefordert, eine Diskette
einzulegen. Legen Sie die Floppy mit den Quellprogrammen ein und drücken
eine Taste. Mit <A> wird ARC 1.5 völlig neu gestartet (Datenverlust!). Jetzt
zeigt das Tool den Diskettennamen an. Danach erscheinen der Reihe nach alle
gespeicherten Files mit der dazugehörigen Länge in Blocks (254 Byte). Mit
den Tasten <J> und <N> (für »ja« und »nein«) wählt man, ob das angezeigte
File in das Gesamtfile übernommen werden soll. Auch in diesem Modus sind nur
maximal 45 Files möglich, mehr faßt der Namens-Speicher nicht. Das Programm
zeigt laufend die Anzahl der bereits gewählten Files an. Wenn Sie mindestens
ein File selektiert haben, beenden Sie die Auswahl, wenn Sie fertig sind,
mit <*>. Sollen nur die ersten Files eines Directories erfaßt werden und
danach eine neue Diskette eingelegt werden, können Sie nach Druck auf <D>
eine neue Diskette einlegen. Die Taste <A> dient zum Abbruch, hier wird ARC
1.5 neu gestartet, alle bisher erfaßten Namen werden vergessen.

Während der automatischen Namenerfassung aus dem Directory zeigt ARC 1.5
ständig die Anzahl der geschätzten von den selektierten Dateien belegten
Blocks und die Anzahl der freien Blocks an. Dadurch wird weitgehend
vermieden, daß Sie später beim Einlesen eine böse Überraschung erleben:
»Speicher voll«. Der Speicher für die Files erstreckt sich von $9cd bis
$bfff, das sind ca. 181 Blocks. Wird diese Anzahl überschritten, können mit
<J> keine weiteren Files mehr selektiert werden. Die Länge der einzelnen
Files wird übrigens dem Directory entnommen. Da diese grobe Abschätzung
allerdings vor allem bei sehr kurzen Dateien (nur wenige Bytes) ungenau wird
(Rundungsfehler), ist es möglich, auch bei angezeigtem Speicherüberlauf
weitere Files mit <SHIFT J> zu übernehmen, auf die Gefahr hin, daß später
beim Einlesen »Speicher voll« erscheint. Beispiel: Der Zähler zeigt 166
belegte und 15 freie Blocks (Summe 181). Jetzt können mit <J> nur noch Files
mit 15, 14, 13 usw. Blocks Länge aufgenommen werden, keine Files über 15
Blocks Länge. Diese lassen sich nur mit <SHIFT J> erfassen. Im Normalfall
sollten Sie die Abschätzung allerdings als obere Grenze akzeptieren, mit
einer weiteren Einschränkung: In diese Berechnung gehen keine Files ein, die
im ersten Modus (manuelle Eingabe der Filenamen) erfaßt wurden. Haben Sie
den Automatik-Modus erst aktiviert, nachdem Sie schon einige Files von Hand
eingegeben haben, werden diese nicht mitgerechnet, der Speicher kann dann
u.U. sogar weniger als 181 Blocks fassen. Es ist nicht, auch nicht mit
<SHIFT J>, möglich, die Obergrenzen von 45 Files zu überschreiten.

Vom Modus des automatischen Einlesens können Sie nicht in den Modus der
manuellen Eingabe zurückzukehren, wohl aber umgekehrt. Soll das Gesamtfile
also Files enthalten, deren Namen Sie manuell über Tastatur eingeben wollen
(Modus 1) und weitere, deren Namen Sie einlesen lassen wollen (Modus 2), so
sind zuerst in Modus 1 die »manuellen Dateinamen« einzugeben, danach durch
Eingabe des Doppelpunktes Modus 2 zu aktivieren und die restlichen Namen zu
spezifizieren. Danach kann mit der Stern-Taste der Vorgang beendet werden.

Bitte beachten Sie noch, daß es in Modus 2 unter Umständen Probleme bei
Directory-Manipulationen geben kann, etwa dann, wenn nach dem zweiten
Anführungszeichen noch Ladehilfen wie »,8,1« stehen, oder wenn der Filename
im Directory Cursor-Steuerzeichen oder Joker (»*« oder »?«) enthält.
Insbesondere könnten Schwierigkeiten auftreten, wenn die im Directory
verzeichnete Blocks-Länge nicht mit der tatsächlichen File-Länge
übereinstimmt, da dann die oben erklärte Abschätzung falsch arbeitet, oder
wenn Files auf der Diskette vorhanden sind, deren Länge mehr als 255 Blocks
beträgt (kommt im Normalfall nicht vor, solch lange Files lassen sich mit
ARC gar nicht bearbeiten). Wenden Sie Modus 2 nur bei Disketten an, die
nicht zum Beispiel mit dem »Disc-Wizzard« manipuliert wurden!

Nach der Eingabe aller Namen ist zu wählen, ob alle Programm auf der selben
Diskette stehen, oder ob nach jedem File auf einen Tastendruck gewartet
werden soll, um Zeit für den Diskettenwechsel zu haben. Antworten Sie hier
einfach mit <J> oder <N>.

Die folgenden Frage erwartet den Filenamen, unter dem das gelinkte
Gesamtfile abgespeichert werden soll. Hier führt die Eingabe eines Sternes
oder eines Fragezeichens zurück zur Frage, ob alle Files auf einer Diskette
gespeichert sind. Bitte vermeiden Sie auch hier die Eingabe von verbotenen
Zeichen, wie »*«, »?«, »=«, »:«, »$« und so weiter.

Danach liest »ARC« alle benötigten Files in den Speicher. Hierbei können
Diskettenfehler auftreten (z.B. »FILE NOT FOUND«), die angezeigt werden. Der
Anwender kann dann durch Druck auf die Taste <V> erneut versuchen, das File
(eventuell von einer anderen Diskette) zu laden, mit <N> dieses File
»vergessen« und mit dem nächsten fortfahren oder mit <E> den Abbruch des
Einlesevorganges veranlassen. Dann wird sofort das Gesamtfile gespeichert.

Den eingelesenen Programmen steht insgesamt ein Speicherplatz von etwa 45
KByte zur Verfügung, dennoch kann es vorkommen, daß ein File zu lang ist.
Auch dieser Fall wird abgefangen. Hier kann gewählt werden, ob das File zu
überspringen oder der Einlesevorgang abzubrechen ist.

Der Bereich, der die Programme aufnimmt, reicht von $09CD bis $BFFF. Pro
File ist als Länge zu rechnen: Länge des Files in Zeichen + 5
Verwattungsbytes (Nullbyte, je zwei Bytes Länge und Startadresse) + Länge
des Filenamens in Zeichen. In $0801 bis $09CB findet sich das
Maschinenprogramm zum »Entwirren«, in $09CC steht die Anzahl der enthaltenen
Files.

Nach dem Einlesen wird das Gesamtfile auf Diskette gespeichert. Hier werden
Sie auf alle Fälle aufgefordert, eine (neue?) Floppy einzulegen, diese
Aufforderung muß wie üblich mit einem Tastendruck bestätigt werden. Tritt
ein Fehler beim Speichern auf, kann gewählt werden, ob »ARC« aufgeben soll,
oder ob die Speicherung zu wiederholen ist. Am Ende erscheint dann noch die
Frage, ob Sie »ARC« noch einmal starten wollen (Taste <J>), oder ob ein
Reset ausgelöst werden soll (<N>).

Das erzeugte Gesamtfile, das sich natürlich auch problemlos etwa auf
Cassette speichern läßt, können Sie ganz normal wie ein Basicprogramm laden
und nach Einlegen einer Diskette mit genügend freiem Platz mit RUN starten.
Jetzt werden automatisch die Einzelfiles mit ihrem Originalnamen wieder
erzeugt. Das Programm zeigt dabei die Nummer des gerade generierten Files
an.

Es bleibt nur noch zu sagen, daß sowohl das Generatorprogramm »ARC« wie auch
die Routine im Gesamtfile als Gerät die zuletzt aktive Diskettenstation
ansprechen. Dazu wird die aktuelle Geräteadresse geprüft. Liegt sie nicht
zwischen 8 und 15, so wird sie automatisch auf 8 gesetzt.

Das war eigentlich alles, was es zu »ARC 1.5«, einem Utility ganz neuer
Machart, zu sagen gab. Der geneigte Leser findet in der Tabelle die
Speicherbelegung des Tools, hilfreich etwa dann, wenn Ergänzungen oder
Erweiterungen vorgenommen werden sollen. Wir wünschen Ihnen viel Erfolg beim
Zusammenfügen Ihrer Programme!

Speicherbelegung hexadezimal (Version 1.5)

0002-0003 Zeiger in Speicher
0004      Anzahl der zu erzeugenden Programme
0005      Anzahl der Files (Generator)
008b      Flag: Files auf einer Diskette
008c      lfd. Nummer
008d      wirkliche Anzahl der erzeugten Files
008e-008f letzter Stand von 0002-0003
00a6-00a7 temporär
00aa-00ab aktuelle Länge (Byte)
00b2-00b3 Zeiger auf Länge
00b5-00b6 temporär
00fb-00fc File-Länge
00fd      Summe der File-Längen (Blocks, max. 181)
00fe      momentane File-Länge (Blocks)
02c0-02ff Disketten-Fehlermeldung
0312-0313 Anzahl Bytes des Files
0334-03ff Filename (Eingabe)
0400-07ff Bildschirm
0801-bfff frei für Generator-Datei
0801-09cb Generator
09cc      Anzahl der Files
09cd-bfff Files-Datenbereich
c000-ccbe ARC 1.5
c000-c002 Sprung auf Start c793
c003-c416 Texte
c417-c5e1 Kopf (Original-Generator)
c417-c4fc Maschinenprogramm
c4fd-c5e1 Texte
c5e2-ccbe Programm ARC 1.5: 100% Assembler
c5e2      Kopf ab 0801 erzeugen
c5ff      Dateinamen eingeben
c66c      Dateinamen-Speicher suchen
c6bd      Directory anzeigen
c793      Start Hauptprogramm
c7e5      Namen manuell eingeben
c855      fertig
c8ba      Files einlesen
c936      Fehlerkanal lesen
c9dc      Ladeschleife
ca1c      Abbruch
ca2f      alle Files eingelesen
caed      Files aus Directory einlesen
cb2b      Disk-Wechsel
cc7f      Block-Anzahl ausgeben
ccbe      letztes Programmbyte
cd00-cfff Speicher für max. 45 Filenamen, je max. 17 Zeichen
d000-d3ff Bildschirm-Zwischenspeicher für Directory








Anleitung zum Programm »Bumpmaster«

Was ist ein »Bump«? Die Floppy 1541 hat die Angewohnheit, wenn es ihr nicht
gelingt, von einer Diskette etwas zu lesen, bevor sie eine Fehlermeldung
ausgibt, es erst einmal mit »Rattern« zu versuchen. Bei diesem sog. »Bump«,
den Sie sicherlich auch schon einmal erleben durften, wird der
Schreib/Lesekopf im Laufwerk an eine ganz bestimmte Position gebracht, in
der Hoffnung, daß ein Lesen von hier aus möglich ist. Der Nachteil an diesem
Rattern ist aber, daß es nur selten zum Erfolg führt und eher den Vorgang
unnötig verzögert. Schlimmer noch, das Rattern ist schädlich für die
Laufwerksmechanik. Tritt der Bump zu oft auf, kann der Tonkopf dejustiert
werden. Zur Probe können Sie das Rattern auch manuell erzeugen: Entfernen
Sie die Diskette aus dem Drive, schalten Sie selbiges an und wieder aus und
schicken Sie dann den INIT-Befehl: OPEN 1,8,15,"I":CLOSE 1.

Es bietet sich daher an, den Bump einfach abzuschalten, zu »verbieten«. Die
Floppy ist im Prinzip ein eigener Computer mit eigenem Prozessor, eigenen
Speicherzellen, eigener Zeropage. In Speicherzelle 106 des Floppy-RAMs (!)
gibt das 7. Bit an, ob der Bump erlaubt oder verboten ist. Wird es gesetzt,
gibt die Floppy ggf. sofort die Fehlermeldung aus, ohne zu rattern. Da das
Bit nur mit verhältnismäßig großem Aufwand verändert werden kann, gibt es
das Programm »Bumpmaster«. Laden und starten Sie es wie ein Basicprogramm.
Es prüft nun, ob in der Floppy bereits der Schutz aktiviert ist. Danach
können Sie mit der Leertaste das Rattern »ein- und ausblenden«. Durch
<RETURN> wird der neue Zustand übernommen, er hält so lange vor, bis Sie das
Drive abschalten, einen Reset auslösen oder - natürlich - mit dem Bumpmaster
eine neue Veränderung vornehmen.









Anleitung zu »DON'T REPLACE!«

Das nur einen Block kurze Utility repariert den Replace-Programmierfehler
des Floppy-Laufwerkes 1541 für die Befehle SAVE und OPEN.

Sie wollen eine neue Version Ihres Programmes auf Diskette speichern. Dazu
wählen Sie den Dateinamen der Vorgängerversion. Das Laufwerk rebelliert:
FILE EXISTS! Klar, es dürfen sich niemals zwei Programme unter dem gleichen
Namen auf einer Floppy befinden. Also probieren Sie es mit dem Klammeraffen,
dem Replace-Befehl:

SAVE "@:NAME",8

wobei das Zeichen @ für den Klammeraffen steht. Die 1541 soll erst das alte
File löschen und dann das neue unter dem Namen »NAME« speichern. Leider
funktioniert das nur in der Theorie, denn bekanntlich steckt im
Betriebssystem des Laufwerks ein Programmierfehler, der sich bei Verwendung
des Replace-Befehles (Klammeraffe) auswirkt: Manchmal kommt es vor, daß das
falsche Programm gelöscht und das neue falsch im Directory eingetragen wird.
Daher, so lernt jeder Anfänger, sollte der Klammeraffe-Befehl nicht benutzt,
sondern erst mit Scratch das alte File und dann die neue Datei gespeichert
werden.

Das Utility »DON'T REPLACE!« erledigt dies für Sie automatisch, im
Direktmodus oder programmgesteuert. Sie verwenden wieder den Klammeraffen,
der aber von diesem Utility abgefangen und automatisch in einen
Scratch-Befehl umgewandelt wird. Im Programm-Modus merken Sie nichts davon,
wohl aber im Direktmodus, denn es erscheint eine neue Meldung:

SAVE "@:FILENAME",8

SCRATCHING FILENAME
SAVING FILENAME

Der Rechner zeigt also an, daß jetzt erst die alte Version gelöscht wird.
Der Klammeraffe gelangt gar nicht bis zum Laufwerk und kann so keinen
Schaden anrichten. Eine echts Neuheit an »DON'T REPLACE« ist, daß es nicht
nur beim SAVE-Befehl (sei es in Basic oder in Assembler) wirkt, sondern auch
dann, wenn Sie beim OPEN-Befehl (oder beim Aufruf der OPEN-Routine in
Maschinensprache) den Klammeraffen setzen. Drei Dinge sollten Sie beachten:
Die Umwandlung erfolgt nur, wenn das angesprochene Gerät tatsächlich eine
Floppy ist (Geräteadresse größer als sieben), wenn hinter dem Klammeraffen
ein Doppelpunkt folgt (die Anzahl der Zeichen zwischen Klammeraffe und
Doppelpunkt ist beliebig, es sind also auch Konstruktionen wie

SAVE "@0:NAME",8

erlaubt, für Anwender von Doppel-Laufwerken). Außerdem dürfen Sie den
Klammeraffen wie gezeigt nicht verwenden, wenn der OPEN-Befehl ein File
nicht zum Schreiben, sondern zum Lesen öffnet. Denn sonst würde erst das
File gelöscht und anschließend normal zum Lesen geöffnet werden, was einen
FILE NOT FOUND ERROR zur Folge hätte.

Die Anwendung von »DON'T REPLACE« ist denkbar einfach. Laden Sie einfach vor
einer Computer-Session das Programm in den Speicher:

LOAD "DON'T REPLACE!",8,1
NEW

und starten es mit

SYS 49152

Mit diesem Befehl kann es auch nach einem Reset ggf. wieder aktiviert
werden. Eine Einschaltmeldung erscheint, und die Erweiterung ist fortan
aktiv. Sie kann auch mit

SYS 65418

ohne weiteres jederzeit wieder abgeschaltet werden. Bemerkung: Diese
Erweiterung eignet sich nicht für die Datasette, da diese weder über den
fehlerhaften Replace-Befehl, noch über Scratch verfügt. Besitzer anderer
Laufwerke als der 1541 sollten es auf einen Versuch ankommen lassen.








Anleitung zum »Twin Search System, Version 2.1«

Dieses nur 15 Blocks kurze Utility gestattet auf sehr einfache und
komfortable Weise die Suche nach Programmen, die (ggf. auch unter
verschiedenen Namen) auf einer oder mehreren Disketten mehrfach vorkommen.
Viele Sonderfunktionen machen dieses Programm für alle C 64 Anwender
interessant.

Die Anwendungsgebiete für das Programm sind vielfältig. Beispielsweise sind
die sogenannten »Bibliotheken« weit verbreitet. Auf einer oder mehreren
Disketten werden zum Beispiel Sprites gesammelt. Im Laufe der Zeit sammeln
sich da dann mehrere hundert Sprites an, und bald verliert man den
Überblick, ob man nicht vielleicht einige Sprites doppelt, weil zum Beispiel
aus verschiedenen Quellen stammend, archiviert hat. Das selbe gilt zum
Beispiel für eine Diskette, auf der Zeichensätze gesammelt werden, die aus
kommerziellen Programmen ausgebaut wurden. Erwischt man zwei Programme, die
den selben Zeichensatz verwenden (soll gar nicht so selten vorkommen!), und
kann sich nicht mehr daran erinnern, daß man diesen Font ja bereits vor
einiger Zeit archiviert hat, so verschwendet man neun Blocks: Der Satz ist
doppelt gespeichert. Auch könnten Sie mit dem »Twin Finder«
(Zwillingsfinder) ja einfach einmal alle Ihre Utility-Disketten durchgehen.
Vielleicht entdecken Sie ja, daß Sie bestimmte Programme auf mehreren
Disketten gespeichert haben. Insgesamt eignet sich das Programm also sehr
gut dazu, Diskettenspeicherplatz zu sparen, da die Duplikate gelöscht werden
können. Sie können das »TSS« aber auch »nur« dazu einsetzen, alle Files
anzeigen zu lassen, die gleich lang sind und/oder (lediglich) die selbe
Startadresse haben.

Grundsätzlich könnte man dazu wie folgt vorgehen: Man lädt ein Programm nach
dem anderen in den Speicher und vergleicht dieses nacheinander mit allen
Programmen auf der Diskette Byte für Byte. Aber das kostet viel, viel Zeit,
da jedes Programm nicht nur einmal, sondern zum Beispiel bei 20 Files 20 mal
vollständig gelesen werden muß! Die Zeit, die diese Methode beansprucht,
steigt quadratisch mit der Anzahl der zu testenden Files. Etwas schneller
geht es, wenn Sie alle Files auf der Diskette ein einziges Mal in den
Speicher des C 64 einlesen und dann im RAM miteinander vergleichen. Nur, wie
sollen Sie zum Beispiel 150 HiRes-Grafiken zu je 32 Blocks (= gesamt 4800
Blocks oder 1200 Kilobyte) in den 64 K Speicher des C 64 einlesen?

Das »Twin Search System« arbeitet hier mit einem ebenso einfachen wie
»genialen« Trick: Es werden zwar alle Files »gescannt«, also Byte für Byte
gelesen. Aus den Programmbytes bildet das Tool dann jedoch auf vier
verschiedene Weisen vier Prüfsummen, nur diese werden zusammen mit
Filenamen, Startadresse und Länge des Files im RAM abgelegt. Nachdem alle
Files gescannt sind, vergleicht das Programm dann nur diese Prüfsummen.
Haben zwei Programme die selben vier Prüfsummen und sind sie zudem gleich
lang, so kann man davon ausgehen, daß es sich um zwei identische Files
handelt. Durch geschickt gewählte Algorithmen (siehe unten) wird verhindert,
daß zum Beispiel die Zahlenkombinationen 24, 35 und 35, 24, die ja summiert
den selben Wert 59 ergeben, als identisch angesehen werden. Die
Wahrscheinlichkeit, daß zwei verschiedene Files trotzdem die selben vier
Prüfsummen haben und zudem noch gleich lang sind, geht gegen Null. Dies kann
mathematisch aufgrund der Berechnungsverfahren sogar bewiesen werden. Dieser
Fall trat bei einer Großzahl von getesteten Programmen nicht ein einziges
Mal auf.

Laden Sie das in reiner Maschinensprache geschriebene »TSS« mit dem Befehl

LOAD "TSS 2.1",8

und starten Sie es wie ein Basicprogramm mit RUN. Der Befehl LIST bringt
hier keine Befehle zum Vorschein.

Nach einem Programmabbruch, dem Programmende oder einem Ausstieg mit <RUN
STOP> <RESTORE> oder Reset kann das »TSS« mit SYS 2257 wieder aktiviert
werden, so es sich noch im Speicher befindet.

Auf dem Bildschirm ist jetzt das Titelbild zu sehen. Legen Sie die erste
Diskette mit zu testenden Files ein und drücken eine Taste. Jetzt soll die
Directory-Maske eingegeben werden. Dazu gehen Sie so vor wie beim
Scratch-Befehl: Die Joker »?« und »*« dürfen gesetzt werden. Die Eingabe von
»OP.*« übernimmt alle Files, deren Namen mit »OP.« anfangen. »M??ER«
übernimmt zum Beispiel »MAYER«, »MEIER«, »MEYER«, »MJWER« und so weiter.
Auch der Filetyp kann angegeben werden, hinter dem Namen und einem
Gleichzeichen: zum Beispiel selektiert »H*=P« alle PRG-Files, deren Namen
mit H beginnen. Die Trennung verschiedener Masken mittels Kommata ist hier
leider nicht möglich. Nach der Eingabe drücken Sie <RETURN>. Im Normalfall
übernehmen Sie aber einfach das Sternchen mit <RETURN>, dann werden
sämtliche Files selektiert.

Die Eingabe eines Dollarzeichens ($) bewirkt, daß das Directory der
eingelegten Diskette auf dem Bildschirm ausgegeben wird. Ca. alle 22 Zeilen
hält die Ausgabe an und kann durch Tastendruck fortgesetzt werden. Die Taste
<RUN STOP> ermöglicht den vorzeitigen Abbruch.

Das Programm reagiert übrigens gelegentlich etwas anfällig auf
Directory-Manipulationen, wie etwa CHR$(160) oder Nullbytes im Filenamen,
oder Kommentare im Directory, wie man sie mit dem »Disc Wizard« erzeugen
kann. Daher sollten Sie möglichst nur ganz normal gespeicherte Files
durchgehen lassen, dann kann nichts passieren. Das Programm ist natürlich so
programmiert, daß Abstürze unmöglich sind, wenn Sie sich an die Anweisungen
auf dem Bildschirm halten. Diskettenfehler werden grundsätzlich abgefangen
und angezeigt. Dennoch können eben Files, deren Einträge im Directory
manipuliert sind, nicht in allen Fällen getestet werden. Aufpassen sollten
Sie auch bei Files, bei denen im Directory als Starttrack und -sektor die
Null angegeben ist (solche Files erzeugen manche Directory-Manipulatoren
etwa bei den Trennstrichen): diese Files können weder von »TSS«, noch vom
normalen DOS geladen werden.

Nach der Eingabe dieser Vorwahl werden nun das Directory wie gewünscht
geladen und die Filenamen eingelesen. Treten hier Diskettenfehler auf,
werden diese angezeigt und müssen mit einem Tastendruck quittiert werden.
Danach kann die Operation wiederholt werden. Files, die vor dem Typ ein
Sternchen stehen haben (sog. nicht geschlossene Write-Files) können nicht
gelesen werden, hier erscheint eine blinkende Meldung, die durch Tastendruck
bestätigt wird. Das File wird übersprungen. Nach dem Einlesevorgang
erscheint die Anzahl der Files, deren Namen bereits gespeichert sind, und
die Frage, ob eine weitere Diskette getestet werden soll. Drücken Sie hier
auf die Taste <J>, so erscheint die Aufforderung, die Floppy zu wechseln.
Daraufhin wird wieder der Directory-Name eingegeben. Somit können auch
doppelte Files erkannt werden, die sich unter dem gleichen oder
verschiedenen Namen auf mehreren Disketten befinden. Antworten Sie dagegen
mit <N>, ist der Vorgang des Namen-Einlesens beendet.

Jetzt prüft das Programm, ob sich mindestens zwei Files im Speicher
befinden. Wenn nicht, erscheint eine entsprechende Meldung, denn es hat wohl
wenig Sinn, mit einem oder gar keinem File diesen Vergleich durchzuführen.
Übrigens dürfen nicht mehr als 250 Files bearbeitet werden, auch eine
Überschreitung dieses Maximalwertes erkennt das »TSS«. Mit der Taste <A>
können Sie jetzt bei Bedarf abbrechen.

Haben Sie also mit <N> geantwortet, wird jetzt gewählt, nach welchem
Verfahren geprüft werden soll. Wie bereits erwähnt, werden vier Prüfsummen
gebildet, außerdem kann anhand der Startadresse und der Filelänge auf
Gleichheit geprüft werden. Mit den Tasten <1> bis <6> werden jetzt diese
sechs Verfahren ein- oder ausgeblendet, jede erdenkliche Kombination (außer:
alles sechs ausgeschaltet) ist erlaubt. Ein Verfahren ist eingeschaltet,
wenn das Feld mit der Nummer markiert, also revers unterlegt ist. Die
Beschreibung der sechs Verfahren:

1: Das erste Verfahren betrifft die Länge des Files in Bytes. Es wird
einfach gezählt, bei Gleichheit ist diese Prüfung erfüllt. Der Zähler der
Anzahl Bytes hat eine Breite von 16 Bit, läuft also erst bei Files ab 258
Blocks über und beginnt wieder bei Null:

      INC SUMME1:BNE LABEL:INC SUMME1+1
LABEL ...

2: Eine einfache Prüfsumme: Es werden alle Bytes des Files addiert. Bei
Überträgen von einem Byte wird noch eins dazuaddiert. Der Algorithmus sieht
folgendermaßen aus:

LDA BYTE:CLC:ADC SUMME2:ADC #0:STA SUMME2

3: Hier werden alle Bytes des Files EOR-miteinander verknüpft:

LDA BYTE:EOR SUMME3:STA SUMME3

4: Während bei den Algorithmen 2 und 3 Dreher nicht erkannt werden (diese
errechnen etwa bei den aufeinanderfolgenden Zahlen 45, 34 und 63 immer die
selbe Summe, egal, in welcher Reihenfolge diese Zahlen im Programm
aufeinanderfolgen), berücksichtigt die Methode 4 auch die Stellung eines
Bytes im Programmtext. Dazu wird zunächst die bisherige Summe um ein Bit
nach links rotiert, Überträge wandern rechts wieder in das Byte hinein, und
zum Ergebnis wird dann das jeweilige Programmbyte addiert:

LDA SUMME4:ASL:ADC #0:ADC BYTE:STA SUMME4

5: Der fünfte Algorithmus ist eine Mischung aller vorangegangenen Methoden.
Die bisherige Anzahl der Bytes im File (nur das Lowbyte) wird mit dem
gelesenen Byte EOR-verknüpft. Vom Ergebnis subtrahiert der Computer die
bisherige fünfte Prüfsumme, rotiert das Ergebnis nach links und speichert es
als neue fünfte Prüfsumme ab:

LDA SUMME1:EOR BYTE:CLC:SBC SUMME5:ASL:ADC #0:STA SUMME5

6: Die sechste Methode, die nach dem Programmstart abgeschaltet ist (das
Feld mit der »6« ist nicht markiert), vergleicht die Startadressen der
Files.

Bei den obigen Auszügen der Algorithmen bedeutet BYTE das momentan gelesene
Programmbyte, SUMME1 bis SUMME5 sind die gespeicherten Prüfsummen, die vor
dem Scannen des Files alle auf Null gesetzt werden. Die obigen
Programmausschnitte werden für jedes Bytes des Files neu durchlaufen,
übrigens unabhängig davon, ob das jeweilige Verfahren eingeschaltet ist oder
nicht.

Wie gesagt, es können mehrere oder alle Verfahren miteinander kombiniert
werden. Schalten Sie etwa nur das zweite und das sechste ein, so bekommen
Sie alle Files mit gleicher Startadresse als Zwillinge gemeldet, deren
EOR-Verknüpfung den selben Wert ergibt: Die Verfahren 1, 3, 4 und 5 werden
dann nicht berücksichtigt. Im Normalfall ist es aber am sichersten, die
Voreinstellung zu übernehmen, die das Programm anbietet, nämlich die
Verfahren 1 bis 5 einzuschalten und auf das sechste Verfahren (Startadresse)
zu verzichten. Dann werden mit 100 prozentiger Treffer- und praktisch
Null-prozentiger Fehlerquote alle wirklich identischen Files unabhängig von
ihrer Startadresse angezeigt.

Die Auswahl beenden Sie mit der Taste <RETURN>. Drücken Sie <SHIFT RETURN>,
wird in den Automatikmodus geschaltet. Ist dieser aktivert, wartet das
Programm im Folgenden nicht mehr auf Eingaben des Benutzers, sondern gibt
automatisch alle möglichen Daten auf dem Drucker aus. Dieser Modus kann
nicht gewählt werden, wenn Sie mehr als eine Diskette gewählt haben, da dann
zum Diskwechsel eine Taste gedrückt werden muß. In diesem Fall reagiert der
Computer nicht auf <SHIFT RETURN>.

Jetzt werden alle gewählten Files gescannt. Dies kann je nach Filelänge
einige Zeit dauern. Diskettenfehler werden auch jetzt angezeigt, führen
allerdings in dieser Phase nicht zum Abbruch, sondern zu der Alternative
»Weiter« (Taste <W>) oder »Abbruch« (Taste <A>). Wird die Taste <W>
betätigt, fährt das Programm mit dem nächsten File fort, das übersprungene
Files wird als gesperrt gekennzeichnet und nicht für die Zwillingsprüfung
verwendet.

Immer, wenn Sie beim Einlesen der Directories die Diskette wechselten,
erscheint an dieser Stelle jetzt die Aufforderung, eben solches wieder zu
tun. Achten Sie peinlich genau auf die Reihenfolge der Diskette, wird
versehentlich eine falsche Diskette eingelegt, zeigt das Programm eine »FILE
NOT FOUND«-Meldung an. Legen Sie dann erst die richtige Floppy ein, kann das
betroffene File nicht mehr gescannt werden und erhält den Sperrvermerk.

Nachdem alle Files gescannt sind, erscheint ein kleines Menü. Sie haben
jetzt die Möglichkeit, alle Files in einer Gesamtübersicht auf dem
Bildschirm (Taste <S>) oder dem Drucker (Taste <D>) auszugeben. In dieser
Übersicht folgen hinter dem Namen die Startadresse, die Länge in Byte, die
um eins erhöhte errechnete Endadresse und die vier Prüfsummen (alle Angaben
hexadezimal). Wird die Übersicht auf dem Schirm ausgegeben, fehlen aus
Platzgründen die Prüfsummen. Außerdem müssen Sie hier nach der Ausgabe und
ca. alle 22 Zeilen eine Taste drücken. Gesperrte Files (bei denen Fehler
beim Scanning auftraten) erkennen Sie schon in der Übersicht an einem
entsprechenden Vermerk an Stelle der Startadresse und Länge. Ist der
Automatikmodus eingeschaltet, gibt der C 64 die Liste automatisch auf dem
Drucker aus.

Nach der Ausgabe der Liste oder dem Überspringen mit der Taste <N> kommen
Sie jetzt in das Menü des eigentlichen Zwillingsfinders. Dieser kann sein
Ergebnis wiederum auf dem Drucker (Taste <D> oder wenn der Auto-Modus
eingeschaltet ist) oder Schirm (Taste <S>) ausgeben. Weiter besteht hier die
Möglichkeit, mit der Taste <A> abzubrechen, die Taste <Z> führt zurück in
die Gesamtübersicht, und die Taste <N> startet das Utility neu.

Bei Anwahl der Twin-Find Funktion vergleicht der Computer jede Prüfsumme mit
allen anderen gespeicherten Prüfsummen, oder, besser gesagt, nur diejenigen,
die Sie bei der Verfahrensauswahl eingeschaltet haben. Werden
Übereinstimmungen festgestellt, gibt der Computer dies aus. Am Ende der
Liste erscheint die Gesamtzahl der geprüften Files und die Anzahl der
Unikate, also jener Files, die nur genau einmal auftauchten. In der
Überschrift dieser Liste werden auch die Verfahren aufgeführt, nach denen
sie zusammengestellt wurde. Bei der Bildschirmausgabe soll auch hier ca.
alle 22 Zeilen eine Taste gedrückt werden, um ein »Durchscrollen« der Liste
zu vermeiden.

Danach befindet sich das Programm wieder im »Twin-Menü«, ein eventuell
aktivierter Automatik-Modus wird abgeschaltet.

Sie sehen, das »TSS« ist ein komfortables, vielseitiges und praktisches
Utility, das Sie sicherlich gern einsetzen werden. Im folgenden noch die
Speicherbelegung (gültig für die Version 2.1, hexadezimal):

0002-0003  temporär
0004-0005  Zeiger für $0e3e
0006       Flag: Automatik
00a6       Modus (gewählte Verfahren)
00a7       momentan bearbeitetes File
00a8       File, mit dem dieses momentan verglichen wird
00a9       Devicenummer für Ausgabe der Liste
00aa       Speicher für X-Register
00ab       Stackpointerspeicher
00b0       Highbyte für $0fc4
00b1       Flag: Hilfsmenü bei Diskfehler
00b2-00b3  Endadresse
00b4       Zeilennummer für Scrolling
00b5-00b6  Speicher für $0002/3
00f7-00f8  Zeiger auf Datenbereich/Hilfsspeicher für Directory
00f9       Anzahl der Files
00fa       gelesenes File-Byte
00fb       Anzahl der Disketten
00fc       Anzahl der Duplikate eines Files
00fd       Anzahl der Duplikatsgruppen
00fe       Anzahl Dubletten insgesamt
02c0-02c7  Prüfsummen des aktuellen Files
0334-0339  Zwischenspeicher für Berechnung der Prüfsummen
0801-08d0  Basic-Lader
08d1-16ac  Programm »TSS 2.1«
08d1-08d3  Sprung zur Hauptroutine bei $1118
08d4-0e10  Texte
0e11-0e25  Filenamen für Directory und Fehlerkanal
0e26-0e2d  Zweierpotenzen
0e2f-0e3d  Hexzahlen
0e3e-1117  Hilfsroutinen
0e3e       Routine: String ausgeben
0e54       auf Taste warten
0e5f       Diskfehler
0e97       Programmabbruch
0fc4       berechnet Zeiger auf Filenamen und Datenbereich
0fff       Verfahren ausgeben
1021       Duplikate ausgeben
10a1       Directory zeigen
1118-16ac  Hauptprogramm
1118       Start Hauptprogramm
118d       Directory lesen
1252       Verfahren wählen
12d3       Files scannen
134a       Prüfsummen bilden
13b9       Menü für Gesamtübersicht
13e7       Gesamtübersicht ausgeben
150a       Menü für Duplikat-Suche
154c       Duplikate suchen
1684       Endadresse ausgeben
1697       Bildschirm-Scroll-Stop
16ac       letztes Programmbyte
6e00-6eff  Flags: File bereits mit anderen verglichen
6f00-6fff  Flags: File gesperrt
7000-8099  Speicher für 250 Filenamen
8100-88d0  Speicher für 250 mal 6 Prüfsummen (je acht Bytes)
8e00-8eff  Tabelle mit den Nummern der Kopien eines Programmes
8f00-8fff  Filenummern mit Diskettenwechsel







Anleitung zum Programm »Verify 2 Files« Version 1.2: Hoch mit dem kleinen
Unterschied!

Fast gleich und doch verschieden. Zur genauen Untersuchung der Unterschiede
zweier verschiedener Datenfiles eignet sich der Verify-Befehl des Basic
nicht. Er kann ja nur »ja« oder »nein« sagen. Ein gutes und einfach zu
bedienendes Utility muß her. Eines wie »Verify 2 Files«.

Jeder Commodore 64-Anwender kennt das: Man hat zwei Files, die zwar
wahrscheinlich identisch sind, aber eben vielleicht doch nicht. Handelt es
sich um zwei Basicprogramme, kann man sich ggf. mit dem Tool »Line-Verify«
behelfen. Hat man es aber mit Assemblerprogrammen, Grafikbildern,
Zeichensätzen oder anderen Datenfiles zu tun, kann man unter Umständen per
Verify-Befehl feststellen, ob es Unterschiede gibt. An welchen
Speicherzellen diese stehen, wie viele Unterschiede es sind und welchen
Inhalt die beiden Files an dieser Stelle jeweils haben, bleibt verborgen.
Files, die im RAM unter dem ROM liegen, oder in der Zeropage, oder zwei
Files mit verschiedenen Startadressen oder unterschiedlicher Länge können
mit VERIFY überhaupt nicht richtig verglichen werden.

In allen diese Fällen schafft das Programm »VERIFY 2 FILES« in der
vorliegenden Version 1.2 Abhilfe. Das aus Gründen des Komforts und der
Geschwindigkeit in reiner Maschinensprache verfaßte Utility
(Assemblerkenntnisse sind zu Anwendung nicht nötig) wird wie ein normales
Basicprogramm mit

LOAD "VERIFY 2 FILES",8

geladen und mit

RUN

gestartet. Auf dem Bildschirm erscheint jetzt die Frage nach dem ersten
Programmnamen. Geben Sie den Namen des ersten zu vergleichenden Files, ggf.
durch Joker vereinfacht, ein und drücken <RETURN>. Danach wird auf die selbe
Art und Weise der Name des zweiten Files eingegeben.

Legen Sie die Diskette ein, auf der sich das erste File findet, und drücken
irgendeine Taste. Die Datei wird, unabhängig von ihrer wahren Startadresse,
in einen Puffer in den Computerspeicher eingelesen. Als kleine Zugabe
ermittelt der Rechner die echten Start- und Endadressen dieses Files und
gibt sie aus. Während des Ladens flimmert der Bildschirmrahmen als Anzeige
dafür, daß der Computer nicht abgestürzt ist (was bei diesem Tool gar nicht
denkbar ist). Für das erste File steht ein Puffer von Speicherzelle 9369 bis
53247 zur Verfügung, also ungefähr 48 KByte oder 172 Blocks. Sollten Sie
versuchen, ein längeres Programm zu laden, läuft der Speicher über. Der
Computer gibt eine entsprechende Meldung aus und bricht die Bearbeitung ab.
Übrigens werden auch Diskettenfehler automatisch erkannt und ausgegeben.

Steht das erste File komplett im Speicher, kann es mit der zweiten Datei
verglichen werden. Legen Sie die entsprechende Diskette ein und drücken eine
Taste. Die Startadresse des zweiten Files erscheint.

In den untersten drei Bildschirmzeilen können Sie nun die Bearbeitung
mitverfolgen. In der drittletzten Zeile wird der Inhalt des ersten Files
durchgescrollt, darunter finden Sie die Bytes aus dem zweiten Programm. Ganz
unten ist die »Unterschiede-Zeile« untergebracht (Zeichen »D:«). Sie ist
normalerweise leer, unterscheiden sich jedoch das erste und das zweite File,
scrollt hier ein reverser Block durch.

Da die Bearbeitung in Assembler erfolgt, werden die beiden Files sehr
schnell verglichen. Das menschliche Auge kommt kaum mit, nur hin und wieder
ist ein ganz kurzer Stop erkennbar, wenn die Floppy einen neuen Sektor
liest. Immer, wenn ein Unterschied auftritt, wird das waagerechte Scrolling
kurze Zeit sehr langsam und dann allmählich wieder schneller. Diesen Effekt
können Sie aber auch durch Druck auf die Shift-Taste erreichen: Drücken Sie,
wird das Scrolling immer langsamer, um erst dann wieder zu beschleunigen,
wenn Sie die Taste loslassen.

Ist auch das zweite File beendet, endet die Ausgabe. Die Endadresse dieser
Datei sowie die Anzahl der erkannten Unterschiede wird noch ausgegeben, dann
befindet sich der Computer wieder im Direktmodus. Das Utility kann bei
Bedarf durch RUN wieder gestartet werden, oder, wenn der Header (der bei
LIST erscheint) gelöscht wurde, durch Eingabe von SYS 8192.

Dieses nur fünf Blocks kurze Utility eignet sich übrigens auch hervorragend
zum Vergleichen zweier unterschiedlich langer Programme, etwa, wenn die
Anfänge der beiden Dateien übereinstimmen. Treten zu viele Unterschiede auf,
ist davon allerdings abzuraten, da die Ausgabe dann wegen der automatischen
Verlangsamung bei Unterschieden sehr lange dauert. Im Normalfall wird man
also zum Beispiel zwei unterschiedliche Versionen einer Datei vergleichen,
bei der keine Verschiebungen stattfinden (also zum Beispiel Datenfiles oder
Maschinenprogramm, die nachträglich per Monitor stellenweise modifiziert
wurden).










Sag niemals nie!   -   »Unscratch« stellt gelöschte Dateien wieder her

Auf dem Computer sind die wenigsten Vorgänge endgültig, auch wenn es oft so
aussieht. Die meisten lassen sich nachträglich rückgängig machen. Das
Programm »Unscratch« kommt zur Anwendung, wenn Sie versehentlich ein File
mit dem Scratch-Befehl von Diskette gelöscht haben: Es kann zurückgeholt
werden!

Kennen Sie das Gefühl? Man hat eben völlig auf Versehen eine sehr wichtige
Datei mittels Scratch von Diskette gelöscht. Trockenes Schlucken. Eigentlich
sollte ja ein anderes File daran glauben, aber wie es in der Hektik und kurz
nach Mitternacht nun mal ist... Naja, die Datei ist ja wohl verloren.

So soll und muß es in Zukunft nicht mehr sein. Besitzer eines 1541-Laufwerks
können zum einen Dateien vorsorglich vor dem Scratch-Befehl schützen,
beispielsweise mit Hilfe des im 64'er Sonderheft 33 veröffentlichten
Programmes »File-Lock«. Die andere Möglichkeit wirkt, wenn es passiert ist.
»Unscratch« stellt gelöschte Dateien wieder her. Beim Löschen,
beispielsweise über die Befehlsfolge

OPEN 15,8,15
PRINT#15,"S:DATEINAME"
CLOSE 15

wird das File nämlich nicht wirklich gelöscht, sondern nur im Directory als
gelöscht gekennzeichnet. Auf der Diskette ist es aber noch vorhanden, und
zwar so lange, bis Sie weitere Files darauf speichern. Haben Sie also ein
File versehentlich gelöscht, sollten Sie sofort nachdem Sie Ihren Lapsus
bemerkt haben »Unscratch« laden. Haben Sie noch keine neue Datei auf der
Diskette gespeichert, können Sie davon ausgehen, daß das versehentlich
gelöschte File ohne Verluste wiederhergestellt werden kann. Obwohl
»Unscratch« aus Geschwindigkeits- und Komfortgründen vollständig in stark
optimierter Maschinensprache geschrieben wurde, müssen Sie diese Sprache
nicht kennen und auch sonst keinerlei Programmier-Kenntnisse mitbringen, um
mit dem Hilfsprogramm umgehen zu können. Es kann wie ein normales
Basicprogramm geladen, gestartet und ggf. kopiert werden. Laden Sie es also
mit

LOAD "UNSCRATCH",8

Der LIST-Befehl bringt hier keine vernünftigen Befehle zutage, starten Sie
also sogleich mit RUN. Auf dem Bildschirm erscheint das Titelbild und die
Aufforderung, die Diskette einzulegen, auf der sich die gelöschte Datei
befindet. Tun Sie dies und drücken eine Taste. Das Programm liest nun intern
das Directory dieser Diskette ein. Gelingt dies nicht, erscheint eine
entsprechende Meldung, und das Programm kann nach einem Tastendruck neu
gestartet werden. Übrigens werden im gesamten Programm sämtliche Diskfehler
abgefangen und angezeigt. Wichtig für Besitzer mehrerer Laufwerke: Nach dem
Start stellt sich »Unscratch« auf das Laufwerk ein, das Sie zuletzt
angesprochen haben, im Normalfall also das Drive, von dem »Unscratch«
geladen wurde. Im Zweifelsfalle setzt das Programm die Geräteadresse 8
(Laufwerk 0) ein.

Der C 64 durchsucht nun das Directory nach als gelöscht gekennzeichneten
Files. Wurde ein solches gefunden, erscheint der Filename auf dem Schirm und
Sie werden gefragt, ob dieses File wiederhergestellt werden soll. Antworten
Sie mit <J> für Ja oder <N> für Nein. An dieser Stelle kann auch abgebrochen
werden, dazu ist <A> zu betätigen. Haben Sie sich für die Wiederherstellung
entschieden, erscheint als nächstes die Frage nach dem ursprünglichen
Filetyp. Sie müssen dem Computer jetzt mitteilen, um was für eine Dateiart
es sich handelte. Im Normalfall antworten Sie hier mit der P-Taste, die
Datei wird dann als Programmfile markiert. Sollte es sich um eine Datei
gehandelt haben, die ein eigenes Programm angelegt hat, kann auch <S>
richtig sein, diese Taste erzeugt ein sequentielles File. Andere
Möglichkeiten: <U> (»USR«) erzeugt eine vom Anwender definierte Datei
(User-File), <R> ergibt das RELative File. Mit <A> kann hier der Vorgang
abgebrochen werden, das Programm fährt dann mit dem nächsten File fort.

Ansonsten ersetzt »Unscratch« die Markierung »File gelöscht« im Directory
durch den von Ihnen gewählten ursprünglichen Filetyp. Die Datei ist somit
wiederhergestellt. Auf diese Weise geht der Computer nun alle gelöschten
Dateien auf dieser Diskette durch und fragt jedesmal, ob sie
wiederhergestellt werden soll. Sie antworten brav jedes Mal mit <J> oder
<N>. Zum Schluß muß, falls mindestens ein File repariert wurde, noch die
Organisationsstruktur der Diskette wiederhergestellt werden, das heißt, es
werden die Bereiche, auf denen die reparierte Datei steht, als »belegt«
gekennzeichnet. Dies kann besonders bei gefüllten Disketten durchaus einige
Sekunden oder Minuten dauern (es wird ein »Validate« ausgeführt). Danach ist
das Programm fertig, und Sie können wieder wie gewohnt mit Ihrer Datei
arbeiten.

Übrigens besteht kein Grund zur Unruhe, wenn Sie sich bei der Wahl des
Filetyps vertan haben. Löschen Sie einfach die reparierte Datei sofort
wieder mit Scratch und rufen sodann noch einmal »Unscratch« auf, geben
diesmal aber den richtigen Typ ein. Beachten Sie bitte auch, daß »Unscratch«
nur dann korrekt arbeiten kann, wenn Sie nach dem versehentlichen Löschen
der Datei noch keine weiteren Files auf dieser Diskette geschrieben haben.
Andernfalls könnte es passiert sein (muß aber nicht, einen Versuch ist es
zumindest wert), daß die neuen Files das alte, versehentlich gelöschte
überschrieben haben. Nach der vollständigen Reparatur der Diskette können
Sie diese selbstverständlich wieder ohne Einschränkungen nutzen.

Wir wünschen Ihnen viel Erfolg beim Retten versehentlich gelöschter Dateien
mit »Unscratch«.








Top Secret - Daten sicher geschützt

Datenschutz auf dem Computer ist in! Schließen auch Sie Ihre geheimen Files
vor neugierigen oder unbefugten Blicken sicher weg. »Top Secret«, ein sehr
komfortables Maschinensprache-Utility codiert Files aller Art direkt auf
Diskette. Nicht einmal ein Experte mit Diskmonitor wird ohne Kenntnis des
Paßworts an die Daten gelangen. Dabei findet ein Chiffrier-Algorithmus
Verwendung, der sonst etwa von Geheimdiensten eingesetzt wird. Das ist es:
Dateien besser verschlüsseln als der BND!

Haben Sie eine spezielle Programmiertechnik, die vor fremden Blicken
geschützt werden soll? Oder enthält Ihr Programm DATA-Zeile, die vor fremden
Blicken sicher sein sollen? Verwalten Sie Personendaten und wollen die
Bestimmungen des Bundesdatenschutzgesetzes (BDSG) exakt einhalten? Oder
stellen Sie sich vor, Sie haben eine Diskette randvoll mit Programmen, die
Sie an verschiedene Bekannte weitergeben möchten, von denen aber nicht jeder
alle Programme erhalten soll, sondern nur einen für ihn bestimmten Teil.
Schützen Sie alle Programme und geben jedem File ein individuelles Paßwort.
Dann können Sie die ganze Disk vervielfältigen und müssen Ihren Freunden nur
jeweils die für sie bestimmten Codewörter mitteilen.

Das Programm »Top Secret« codiert sequentielle Dateien auf Diskette, also
PRG, SEQ und USR-Files. Das Programm läßt sich danach zwar noch laden, es
erscheint aber nur Unsinn. Nur mit Hilfe von Top Secret lassen sich die
Daten wieder rekonstruieren. Dabei kann für jede Datei ein individuelles
Codewort vereinbart werden, ohne das kein Zugriff möglich ist. Sichere
Verschlüsselungs-Mechanismen garantieren absolute Datensicherheit selbst vor
Profis, denen Teile des Originals bekannt sind. Obwohl das Programm aus
Gründen des Komforts und der Geschwindigkeit vollständig in Maschinensprache
geschrieben ist, benötigen Sie keinerlei Assemblerkenntnisse, um damit
arbeiten zu können. Das sichere und leicht zu bedienende Utility kann wie
ein Basicprogramm geladen, gestartet und ggf. kopiert werden. Sie sollten
nur niemals den Fehler machen und Top Secret mit sich selbst codieren, wenn
Sie keine Kopie mehr davon haben. Dann ist nämlich keine Rückgängigmachung
mehr möglich!

Laden Sie das Programm mit

LOAD "TOP SECRET",8

Der Start erfolgt mit RUN. Legen Sie die nicht schreibgeschützte Diskette
mit der zu schützenden oder freizugebenden Datei ein, und betätigen eine
Taste. Aus technischen Gründen können keine GEOS-Disketten verarbeitet
werden, das Programm erkennt diesen Fall automatisch und bricht mit einer
entsprechenden Meldung ab. Weitere Einschränkung: Dateien vom Typ DEL und
REL, die in der Praxis kaum vorkommen, lassen sich aufgrund ihrer
komplizierten Struktur ebenfalls nicht chiffrieren. Ausgenommen sind
außerdem »open write-files«, also Dateien mit einem Stern vor dem Filetyp im
Directory sowie Files, die auf dem Track 18 lagern. Dazu gehören
insbesondere die Trennstriche, die von Programmen wie dem Disc-Wizzard
erzeugt werden. Da diese Files allerdings keine Daten enthalten, wäre ein
Verschlüsseln ziemlich sinnlos.

Nach dem Einlegen der Diskette darf die Laufwerksklappe bis zum Erlöschen
der roten Leuchtdiode nicht mehr geöffnet werden. Es erscheint eine
Auflistung der auf dieser Diskette gespeicherten in Frage kommenden Dateien.
Angezeigt werden Filename und -typ. Hinter dem Typ weist ein Schrägstrich
»/« auf eine normal und ein Prozentsymbol »%« auf eine nach dem
Delta-Verfahren (siehe unten) chiffrierte Datei hin. Bei jedem gemeldeten
File können Sie mit den Tasten <J>, <N> und <A> wählen: <J> selektiert die
Datei. Ist sie noch ungeschützt, verzweigt das Programm in die
Codier-Routine, bei einer bereits chiffrierten Datei wird das Entsichern
eingeleitet. Es ist also nicht möglich, eine bereits codierte Datei nochmals
zu verschlüsseln, oder ein File zweimal hintereinander zu dechiffrieren.
Antworten Sie mit <N>, geht es mit der nächsten Datei weiter. Bei <A> wie
»Abbruch« schließlich wird das Programm vorzeitig beendet.

Haben Sie sich für ein File entschieden, betätigen Sie also <J>. Sowohl beim
Codieren wie auch beim Decodieren ist jetzt ein maximal 14 Zeichen
umfassendes Paßwort einzugeben. Beim Codieren wählen Sie es beliebig, bei
Decodieren ist es als Sicherheitsabfrage wieder einzugeben. Die Tasten
<Space>, <Ausrufezeichen> und <Anführungszeichen> sind gesperrt, ansonsten
stehen alle alphanumerischen Zeichen (Buchstaben, Ziffern, Satzzeichen) zur
Verfügung. Die Eingabe kann mit <DEL> korrigiert werden und wird mit
<RETURN> abgeschlossen. Geben Sie nichts ein und drücken nur die
RETURN-Taste, geht es in der Auswahl mit dem nächsten File weiter, das
vorher gewählte wird dann nicht bearbeitet.

Eine mit Top Secret geschützte Datei kann ohne das Codewort nicht, auch
nicht mit Hilfe von Tricks, wiederhergestellt werden. Geben Sie also eine
Zeichenfolge ein, die Sie sich leicht merken können, zum Beispiel den Namen
von Freundin/Freund, Ihr Geburtsdatum oder dergleichen mehr. Sorgen Sie
dafür, daß es nicht zu offensichtlich ist und erraten werden könnte. Wenn
Sie eine geschriebene Liste all Ihrer Kennwörter anlegen, bewahren Sie sie
an einem sicheren Ort auf. Am besten verwenden Sie für all Ihre
Sicherheitsfiles das selbe Paßwort, dann kommt keine Verwirrung auf. Die
Eingabe eines fehlerhaften Codeworts wird beim Decodieren mit einer
entsprechenden Meldung quittiert, geben Sie dann nochmals das korrekte
Paßwort ein.

Achtung: Aus technischen Gründen kann es rein theoretisch in äußerst
seltenen Fällen vorkommen, daß der Computer ein absichtlich falsches Paßwort
annimmt und dann versucht, damit das File zu decodieren. In diesem Fall wird
nur Unsinn erzeugt, die Datei ist dann rettungslos verloren. Grund: Das
Paßwort wird nicht Zeichen für Zeichen auf Diskette gespeichert, sondern nur
seine Länge und eine Art Quersumme. Hat nun ein falsches Kennwort die selben
Daten, akzeptiert das Programm es als korrekt. Da beim Codieren die zu
verschlüsselnde Datei mit den Zeichen des Codeworts verknüpft wird und der
Decodiervorgang nicht rückgängig gemacht werden kann, hätte ein falsches
Paßwort fatale Auswirkungen. Die Routine ist aber so programmiert, daß zum
Beispiel Tippfehler wie »Dreher« zuverlässig erkannt werden. Die
Einschränkung wirkt auch sonst nicht schwer, da nur etwa 0,3 % aller
falschen, von der Länge aber korrekten Paßwörter vom Programm »gefressen«
werden. Nur durch diese Technik kann verhindert werden, daß ein Experte
durch Auslesen der gesicherten Diskette das Paßwort ermitteln kann. Am
sichersten freilich ist es, eine ungeschützte Kopie des Programms auf Band
oder Disk an einem sicheren Ort zu verwahren.

Beim Codieren erscheint nun die Abfrage, ob das Delta-Verfahren zu verwenden
ist. Bei diesem relativ kompliziert arbeitenden Verfahren handelt es sich um
eine sehr sichere Methode, die auch bei Kenntnis einiger Teile des Originals
nicht zu knacken ist und darüber hinaus die chiffrierte Datei nicht
verlängert. Dieses Verfahren beruht auf einem Vergleich der im File
aufeinanderfolgenden Bits und wurde in Ausgabe 6/90 (Seite 62) des
64'er-Magazins genau besprochen. Übrigens bedienen sich auch viele
Geheimdienste bei der Informationsübermittlung des Delta-Verfahrens, das nur
den Nachteil hat, daß die Codierung etwas länger dauert. Antworten Sie auf
die Frage mit <J>, wird die Datei auch nach dem Delta-Verfahren behandelt.
Bei <N> unterbleibt dies, und es wird »nur« der Inhalt der Datei auf
geheimnisvolle Weise mit den Zeichen des Paßworts verknüpft (auch bei
Eingabe von <J>, dann allerdings eben zusätzlich mit Delta-Codierung).

Beim Decodieren merkt das Programm vollautomatisch, ob die Datei im
Delta-Verfahren verschlüsselt wurde oder nicht, und berücksichtigt dies.
Eine besondere Eingabe ist nicht erforderlich.

Die Datei wird jetzt zunächst im Directory als geschützt oder wieder
decodiert gekennzeichnet. Diese Markierung können Sie auf herkömmliche Weise
nicht sichtbar machen, sie erscheint nur in Form des Schrägstrichs bzw.
Prozentzeichens bei der Auflistung in Top Secret.

Dann erfolgt der Zugriff auf sämtliche Bereiche der Diskette, die vom File
belegt sind. Alle werden verschlüsselt bzw. wieder zurückgerechnet. Gerade
bei längeren Dateien kann dies durchaus etwas dauern, im allgemeinen ist
etwa die doppelte Ladezeit für den gesamten Vorgang anzusetzen. Beispiel:
Eine Datei mit 122 Blocks wird mit Delta in 4:12 Minuten codiert und in 4:38
wieder freigegeben, ohne Delta-Verfahren dauert's jeweils 3:27. Wie in allen
anderen Phasen auch werden hier Diskettenfehler erkannt und sofort gemeldet.
Beseitigen Sie ggf. die Ursache für die Störung und starten durch einen
Tastendruck das Programm nochmals.

Noch einige Hinweise zur praktischen Anwendung. Beim Codieren von
PRG-Dateien wird auch die in den ersten beiden Bytes gespeicherte
Ladeadresse verändert. Versuchen Sie also, eine geschützte Datei absolut
(,8,1) an die vorgesehene Stelle in den Speicher zu holen, so wird Ihnen
nicht einmal das gelingen. Vorsicht beim Kopieren von geschützten Files: Da
Top Secret die Organisation der geschützten Diskette verändert, können
chiffrierte Files weder mit File-Kopierprogrammen, noch beispielsweise mit
dem Copy-Befehl der Diskettenstation dupliziert werden. Die Kopien lassen
sich dann weder laden (weil sie codiert sind) noch decodieren (weil die
Information, daß sie chiffriert sind, nicht mitkopiert wurde und daher von
Top Secret nicht mehr gefunden wird). Dennoch lassen sich auch gesicherte
Dateien ganz normal löschen, auch gibt es sicher keine Probleme
beispielsweise beim Validieren. Beim Kopieren mit einem Backup-Programm, das
die gesamte Diskseite vervielfältigt, sind keine Probleme zu erwarten.

Zuletzt noch einige kurze Hinweise zur Funktionsweise. Das Programm vermerkt
in den normalerweise (außer bei REL- oder GEOS-Dateien) unbenutzen Bytes 22,
23 und 24 des Directory-Fileeintrags, ob und ggf. wie das File codiert
wurde. Bit 7 in Byte 22 wird für ein geschütztes File gesetzt, Bit 6 ist 1,
wenn das Delta-Verfahren aktiviert wurde. In Byte 23 findet sich eine
Prüfsumme über das Codewort. Zusammen mit Byte 24, in dem codiert die Länge
des Paßworts erfaßt wurde, erfolgt so beim Entschlüsseln die Prüfung, ob die
Eingabe korrekt ist. Die Codierung der Filedaten selbst erfolgt per
Direktzugriff (U1 und U2-Befehle) auf die vom File belegten Sektoren. Für
jeden Sektor wird das erste Byte mit dem ersten Byte des Paßworts verknüpft,
das zweite Byte mit dem zweiten Zeichen und so weiter bis zum Ende des
Codeworts. Danach geht es mit dem ersten Byte des Kennworts von vorn los.
Außerdem erfolgen Bit-Rotationen, um den Schutz zu verbessern. Falls
gewünscht, wird danach noch die Delta-Codierung durchgeführt, für die im
Programm eine eigene Routine vorhanden ist.









Den Bits auf der Spur: Der »Disk Spy«

Rund, schwarz und geheimnisvoll sind die Disketten für das 1541-Laufwerk.
Zumindest die letzte Eigenschaft verlieren sie aber ganz schnell, wenn Sie
mit einem Diskettenmonitor rangehen. Der einfach zu bedienende Disk Spy
bietet wichtige Funktionen zur Manipulation von Daten direkt auf der
Magnetscheibe. Sogar ein Disassembler ist enthalten.

Bei diesem Diskmonitor handelt es sich um eine Weiterentwicklung des von
Matthias Boeing in RUN 2/86 vorgestellten Diskmonitors, allerdings in völlig
neu programmierter Fassung. Unsere Version ist um einiges
bedienungsfreundlicher, alte Funktionen wurden stark verbessert, teilweise
wurden neue hinzugefügt, so beispielsweise der umfangreiche Hilfsschirm, der
mit dem Kommando »?« aufgerufen werden kann. Dieser Monitor hat 22 Befehle,
die Ihnen das Arbeiten mit der Diskstation einfacher machen. Sie werden
weiter unten aufgelistet.

Doch vorher noch einige Worte zur Bedienung. Der Monitor wird mit dem Befehl

LOAD "DISK SPY",8

geladen. Dabei geht ein evtl. im Speicher stehendes Basicprogramm verloren.
Geben Sie nach dem Laden den Befehl RUN ein. Das Maschinenprogramm wird an
seine eigentliche Adresse verlegt (30000) und dort gestartet. Hierauf meldet
sich das Programm mit einem hellen Bildschirm, auf dem in dunkler Farbe eine
Einschaltmeldung steht. Nun zeigt das Programm den Fehlerkanal der
Diskstation an. Hier sollte der Text »00,OK,00,00« erscheinen, wenn nicht,
schalten Sie Floppy und Computer ab, und laden erneut. Unter der Meldung hat
der Rechner bereits den »?« Befehl angezeigt. Quittieren Sie diesen, indem
Sie die RETURN-Taste drücken. Es wird nun eine Liste aller vorhandenen
Befehle mit Erklärung angezeigt. Diese Befehle bestehen jeweils aus einem
Buchstaben, dahinter teilweise noch Angaben, auch »Parameter« genannt.

Bevor wir Ihnen jetzt die Liste aller Befehle präsentieren, noch die übliche
Diskmonitor-Warnung: Um sich mit dem Programm vertraut zu machen, sollte man
keine Disk verwenden, auf der sich wichtige Daten befinden. Ein Diskmonitor
ist ein sehr mächtiges Werkzeug, und kann bei Fehlbedienung irreparablen
Schaden anrichten! Auch wenn dieser Monitor weitgehend gegen falsche
Bedienung gesichert ist, beherzigen Sie diesen Rat während der
Einarbeitungszeit im Interesse Ihres Disketteninhalts.

An dieser Stelle eine Erklärung wichtiger Begriffe im Zusammenhang mit der
1541-Diskette, in aller Kürze. Genauere Informationen finden Sie in
zahlreichen Kursen zu diesem Thema, die auch im 64'er-Magazin immer wieder
erscheinen. Die Diskette ist in 35 konzentrische Kreise um den Mittelpunkt,
die »Spuren« oder »Tracks« aufgeteilt. Spur 1 ist ganz außen, Track 35
innen. Auf manchen Disketten sind beispielsweise zu Kopierschutzzwecken auch
noch die Spuren 36 bis 42 vorhanden, die von Disk Spy aus technischen
Gründen allerdings leider nicht bearbeitet werden können. Je nach Nummer
enthält ein solcher Track bis zu 21 Sektoren, die die eigentlichen Daten
enthalten. Die Sektorgrenzen verlaufen im Prinzip über die Tracks hinweg
strahlenförmig vom Mittelpunkt der Diskette weg. Die folgende Tabelle
enthält die Anzahl der Sektoren pro Track:

Spur        Anzahl Sektoren
 1 bis 17        je 21
18 bis 24        je 19
25 bis 30        je 18
31 bis 42        je 17

Beispiel: Spur Nr. 21 enthält 19 Sektoren, die von 0 (!) bis 18
durchnumieriert werden. Die unterschiedliche Anzahl der Sektoren pro Spur
ist bedingt durch die Verkürzung der Spuren zum Mittelpunkt hin. Ein Sektor
speichert 256 Bytes. Addieren Sie die Sektorenzahlen der Tracks 1 bis 35,
erhalten Sie den Wert 683, das entspricht den 174848 Bytes (170,75 KB), die
eine 1541-Diskette speichern kann. Der Track 18 wird komplett vom
Inhaltsverzeichnis der Diskette belegt, zieht man von den 683 Blocks die 19
Blocks der Spur 18 ab, kommt man auf die 664 Blocks, die nach dem
Formatieren »FREE« sind.

Der wichtigste Block einer Diskette findet sich auf Track 18, Sektor 0 (vor
dem Inhaltsverzeichnis) und enthält die »Block Availability Map«, kurz BAM.
Es handelt sich um eine Tabelle, in der für jeden der 664 Sektoren einer
Diskette verzeichnet ist, ob er von Daten belegt oder noch verfügbar, also
frei ist. Aufgrund dieser Informationen errechnet das Laufwerk die »xxx
BLOCKS FREE.«, die unter jedem Directory erscheinen. In diesem Block stehen
außerdem Name und ID der Diskette. Sollten jetzt noch Begriffe unklar sein,
schlagen Sie im Lexikon am Ende des Buches nach.

Nun zur Auflistung der Befehle. Sie geben den Kennbuchstaben ein, wenn nötig
und/oder erwünscht, dahinter noch die Angaben, meistens im Hexdezimalsystem.
Gibt es mehrere Schreibweisen für einen Befehl, folgen diese vor der
jeweiligen Erklärung aufeinander. So ist es etwa beim zweiten Befehl, dem
m-Befehl, möglich, nur das m zu schreiben, oder mit einem oder zwei
Parametern dahinter. Lassen Sie bei einem solchen Befehl Parameter weg,
werden diese vom Programm sinnvoll ergänzt (vgl. Beschreibung).

r tt ss
Der mit TT (Track) und SS (Sektor, beide hexadez.) angegebene Block wird in
den Speicher gelesen. Die Befehle m, w, v, f, p, h, d, e und t werden nur
ausgeführt, wenn sich bereits ein Block im Speicher befindet.

m
m ab
m ab eb
Der im Speicher stehende Block wird von AB bis EB (hexadezimal, wenn nicht
anders angegeben: AB = 0, EB = 255) hexadezimal und im ASCII-Code angezeigt.
Durch <STOP> kann die Anzeige abgebrochen werden. Um ein Byte zu ändern,
geht man mit den Cursor auf die entsprechende Stelle und ändert sie.
Änderungen im ASCII-Code (rechts) sind nicht möglich. Statt der HEX-Bytes
kann auch der Großbuchstabe A gefolgt vom Zeichen verwendet werden. Der Code
des Zeichens wird dann eingesetzt. Nach Druck auf <RETURN> werden die
Änderungen im Speicher fixiert, auf Disk gelangen sie erst durch den w
Befehl. Im ASCII Code werden nicht druckbare Zeichen als ».« augegeben.
Beispiel: Aus
]:12  30 31 32 33 34 35 36 37   01234567
wird durch Überschreiben:
]:12  30 33 Aw A9 34 35 36 37   01234567
nach Druck auf <RETURN> werden die Änderungen in den Speicher und die ASCII
Anzeige übernommen.

Bei den Laufwerken für den C 64 enthalten die ersten beiden Bytes jedes
Sektors die Nummer des Tracks und Sektors, auf dem die Datei fortgesetzt
wird. Steht hier als Trackangabe eine Null, ist das ein Hinweis, daß dieser
Block der letzte Datenblock des Files ist. An Stelle der Sektorangabe findet
sich dann die Anzahl der Bytes, die die Datei auf diesem Block noch belegt.
Der Disk-Spion wertet nach dem m-Befehl die beiden Angaben automatisch aus
und gibt einen r-Befehl aus, der nur noch mit <RETURN> bestätigt werden
müßte, um den nächsten Block zu lesen. So hangelt man sich unkompliziert
auch durch größere Files.

w
w tt ss
Der im Speicher stehende Block wird auf die Disk geschrieben. Wird TT und SS
weggelassen, werden Track und Sektornummer des letzten Lese- oder
Schreibbefehls verwendet.

h aa bb cc
h aa bb Ax
Alle Stellen innerhalb aa und bb, in denen das Byte cc bzw. das ASCII
Zeichen x auftritt, werden gelistet. Am Ende wird die Anzahl der Fundstellen
hexadezimal ausgegeben. Die Suche kann mit <STOP> abgebrochen werden.

v
Der Block im Computer wird mit Nullen gefüllt.

f aa bb cc
f aa bb Ax
Der Block im Computer von aa bis bb wird mit dem Byte cc (wie üblich
hexadezimal) oder dem ASCII Code des Zeichens x gefüllt. Falls die
ASCII-Darstellung gewählt wird, muß das A wie auch beim m Befehl mit <SHIFT>
eingegeben werden!

p aa text
Der Text wird ab aa in den Block im Computer geschrieben. Er braucht nicht
in Anführungszeichen zu stehen, diese werden wie alle anderen Zeichen
mitgespeichert.

t
Der zuletzt gelesene Block wird in Form eines w Befehles ausgegeben. Um ihn
auszuführen, drücken Sie nur <RETURN>.

A "text"
Der text (in Anführungszeichen) wird als Hexdump ausgegeben. Das A muß
geshiftet eingegeben werden, damit keine Verwechslungen mit dem folgenden
Kommando auftreten:

a bb bb bb ...
Die Bytes bb bb bb bb (beliebig viele) werden im ASCII-Code ausgegeben
(Umkehrfunktion zu A)

@ (Klammeraffe)
Der Fehlerkanal der Floppy wird ausgegeben (@ = Klammeraffe, Taste links
neben <Stern>).
@text
Der Text wird als Kommando an die Floppy gesendet. Beachten: Kein
Leerzeichen nach dem @! Bsp.: @v (Validate)

@$
Das Inhaltsverzeichnis wird ausgegeben (kein Leerzeichen zwischen @ und $, @
= Klammeraffe)

?
Hilfe-Funktion: Alle Befehle des Monitors werden angezeigt.

<- (Pfeil nach links)
Die Farbwahl des Bildschirms wird geändert. Es sind sieben verschiedene
Farbkombinationen gespeichert, die der Reihe nach abgerufen und danach
wiederholt werden. Die Taste mit dem Pfeil nach links finden Sie ganz links
oben.

c nn
Die Geräteadresse innerhalb der Floppy wird in nn (hex.) geändert und bleibt
bis zur erneuten Änderung oder zum Abschalten der Floppy erhalten. Auch
spricht der Monitor die Floppy jetzt unter der neuen Nummer an.

n
Der Monitor zeigt an, unter welcher Geräteadresse er die Floppy momentan
anspricht.

n nn
Der Monitor spricht die Floppy ab jetzt unter der Nummer nn (hexadezimal, 08
- 0f) an. So kann man mehrere Diskstationen gleichzeitig betreiben. Sinnvoll
ist dieser Befehl aber nur, wenn die zweite Floppy beispielsweise mit dem
c-Befehl oder hardwaremäßig auf die neue Nummer eingestellt wurde.

$ dz
Die Dezimalzahl dz (0 - 65535) wird hexadezimal angezeigt, Bsp.: $ 12, $
5856, $ 90.

! nnnn
Die Hexadezimalzahl nnnn (vierstellig) wird dezimal ausgegeben. Beispiele: !
1342, ! 0002, ! ffd2

d aa bb cc
Der Bereich aa bis cc wird disasembliert, als stünde er ab bb (vierstellig,
hexadezimal) im Speicher. Die Branch-Befehle (BEQ, BCC etc) werden
entsprechend korrigiert. Der Disasembler akzeptiert auch illegale OP-Codes.
»???« sind nicht dechiffrierbare Codes, »CRA« solche, die zum Absturz
(CRAsh) führen.

e
e aaaa
Enthält der Block im Computer ein komplettes, also 1 Block langes Programm,
so wird es durch den e (Exexute) Befehl in den Speicher des C 64 ab Adresse
aaaa (vierstellig, hexadezimal) gelesen. Fehlt aaaa, wird die Adresse
angenommen, die in Byte $02 und $03 des Blocks steht. Nach der Ausführung
des Befehl wird automatisch ins Basic zurückgesprungen, weil eventuell der
Monitor überschrieben wurde. Das geladene Programm kann mit SYS dann
gestartet werden.

x
Der Monitor wird verlassen und ins Basic zurückgesprungen. Er kann mit SYS
30000 wieder gestartet werden, auch nach NEW oder RESET.

s
Der Monitor wird neu gestartet.

Fehlermeldungen:

Wurde ein Befehl nicht verstanden, erscheint ein einfaches Fragezeichen (?).
Wurde ein Befehl zwar verstanden, und die Interpretation der Parameter
gelang nicht, werden zwei Fragezeichen ausgegeben. War alles korrekt, wird
der Befehl ausgeführt und eine neue Eingabe erwartet.

Hinweise zur Praxis des Diskmonitors:

Angenommen, Sie wollen ein mit dem Scratch-Befehl gelöschtes File wieder
retten und haben seit dem Löschvorgang noch nicht auf diese Disk
geschrieben. Das gelöschte Programm kann dann leicht wieder rekonstruiert
werden. Im Folgenden zeigen wir Ihnen den Weg, der hierzu mit dem Disk-Spy
gegangen werden müßte. Dieser Vorgang findet automatisiert aber auch beim in
dieser Hinsicht komfortableren und sichereren Utility »Unscratch« statt.

Laden Sie den Monitor, starten ihn und lesen den ersten Block der Directory
ein: Track 18 (hex. $12), Sektor 1.

r 12 01

Nach kurzer Zeit ist der Block im Computer und könnte geändert werden. Geben
Sie den m-Befehl ohne Parameter ein. Es werden nun einige Filenamen
durchlaufen (rechts in der ASCII-Anzeige). Wenn Sie den Namen der
versehentlich gelöschten Datei wiederfinden, machen Sie weiter wie unten
beschrieben, sonst drücken Sie einfach <RETURN> für den am Ende des Hexdumps
stehendes r-Befehl, der als Argument gleich die Track und Sektornummer des
Folgetracks mitbekommen hat. Steht dort kein r-Befehl, so ist (war) das
gelöschte File nicht auf dieser Disk oder wurde schon durch ein neues
überschrieben. Steht dort aber noch ein r-Befehl, führen Sie diesen aus, und
machen wie oben mit dem m-Befehl ohne weitere Angaben weiter.

Haben Sie den Namen in der ASCII-Anzeige gefunden, drücken Sie schnell die
STOP-Taste, um die Ausgabe anzuhalten. Sie bewegen den Cursor nun hoch an
den Anfang der Zeile, in der der (Anfang des) Filename(ns) steht. Gehen Sie
nun auf das vierte Byte nach dem Doppelpunkt (also das dritte nach dem
Doppelleerzeichen). Es muß sich um ein Nullbyte handeln. Überschreiben Sie
dieses Byte mit dem Hexbyte »82«, falls das File ein Programmfile war (»81«
= SEQ) und drücken die RETURN-Taste. Löschen Sie nun den Bildschirm und
drücken Sie RETURN, damit die Klammer (der Prompt »]«) wieder erscheint. Nun
geben Sie den w-Befehl ohne Parameter ein und drücken <RETURN>. Die Änderung
wird nun auf Disk übertragen. Geben Sie zur Kontrolle den $ Befehl und
schauen, ob das File im Directory wieder erscheint. Wenn alles in Ordnung
ist, müssen Sie noch ein Validate geben: Der Befehl lautet v. Damit werden
die vom File benutzten Blocks in der Belegungstabelle (Block Avilab Map,
BAM, siehe oben) wieder als belegt gekennzeichnet. Diese Prozedur kann je
nach Diskfüllung sehr lange dauern, die Mühe wird sich aber lohnen. Wie
gesagt, üben Sie dies aber vorher an einer Übungsdisk ohne wichtige
Programme. Leichter geht's in jedem Fall mit »Unscratch«.

Wir wünschen Ihnen viel Erfolg mit dem Disk-Spy!










Ein Monitor für die Floppy: Anleitung zum D.M.S.

Mit einem normalen Maschinensprachemonitor können Sie nur auf den
Computerspeicher zugreifen. Ein Diskettenmonitor liest nur Daten von der
Diskette. DMS greift wie ein Maschinensprachemonitor auf den Speicher der
1541 zu. Damit wird die Programmierung des Laufwerks einfach.

Zwei Programmtypen gibt es, die Sie kennen: Der Monitor und der Diskmonitor.
Mit einem Monitor kann man sich den Speicher (das RAM und ROM) des C 64, mit
einem Diskmonitor die Tracks und Sektoren der Floppy ansehen. Was geschieht
nun, wenn man diese beiden Programme miteinander vermischt? Damit meinen wir
nicht einen Monitor, der einen Diskmonitor beinhaltet. Wir sprechen vielmehr
von einem Monitor, der wie ein »normaler« C 64-Monitor bedient wird, aber
Zugriff auf den Speicher des Laufwerks hat! Ein solches Programm ist der
D.M.S. (Disk Memory Spy, Diskspeicherspion). Mit leistungsfähigen, einfach
zu bedienenden Befehlen rücken Sie der Floppy zu Leibe. Außerdem sind noch
sinnvolle Sonderfunktionen integriert, wie das Listen eines Programmes in
drei Formaten, das Disassemblieren der FloppyROMprogramme und das
Verschieben von Programmen im Floppyspeicher mit Umrechnung der absoluten
Adressen.

Sie laden das Programm mit LOAD "DMS",8 und starten es mit RUN. Ein
Kurzprogramm verschiebt das Maschinenprogramm an die erwünschte Stelle ab
25000, und startet es. Nun wird ein »I«-Befehl zum Laufwerk geschickt, ein
Maschinenprogramm in den Floppyspeicher übertragen (dieses stellt einen
verbesserten M-R Befehl (UC) da, da der normale M-R Befehl bei Adresse $CB3E
(für Profis) im Floppyrom einen Fehler enthält: der INC Befehl könnte unter
bestimmten Umständen das Carryflag setzen).

Nun erscheint eine Meldung, und dann der Eingabeprompt (ein Größerzeichen),
das anzeigt, daß das Programm auf eine Eingabe wartet. Jetzt können Sie die
Befehle eingeben. Jeder Befehl besteht aus einem Buchstaben mit meistens
noch Parametern dahinter. Diese werden als zwei- oder vierstellige
hexadezimale Zahlen übergeben. Falls alles korrekt ist, wird der Befehl
ausgeführt. Bei einem Fehler wird das Größerzeichen revers gefärbt.

Hier vor der Liste mit allen Befehlen noch einige Tips: Alle Leerzeichen in
der Eingabezeile können weggelassen werden. Der Eingabestring wird nach der
Eingabe nämlich von einer Routine bearbeitet, die außerhalb von
Anführungszeichen alle Spaces, Shiftspaces und Prompts (»>«) aus der Zeile
entfernt. Sie können den Befehl M 9800 also auch als »M9800« oder als »M 9 8
0 0« oder als »M >980 >0« eingeben (alle »>«-Zeichen werden überlesen).
Innerhalb von Anführungszeichen gilt das nicht. Das zweite Gänsefüßchen kann
grundsätzlich weggelassen werden (übrigens auch in BASIC, etwa bei PRINT).

Falls Sie sich mit dem »M«-Befehl Speicherinhalte auf den Bildschirm geholt
haben (auch bei den Befehlen »D«, »N«, »J«, »$«, »#«), können Sie nun sehr
einfach Änderungen vornehmen, indem Sie mit dem Cursor an die entsprechende
Stelle fahren und das entsprechende Byte überschreiben.

Hier ist eine Liste mit allen Befehlen. Parameter im Klammern können
weggelassen werden (siehe Text).

Bedeutung der Zeichen:

Großbuchstabe    Name des Befehles
ad               Adresse (4 stellige Hexzahl)
by               Byte (zweistellige Hexzahl)
text             Beliebiger ASCii-Text ohne Gänsefüßchen
"name"           Filename in Anf.z. (das zweite kann entfallen)
ga               Geräteadresse (hex) 04-FF
puf              Puffernummer in der VC 1541 (hex, 2 stellig, 00-05)
hex              Hexadezimalzahl, 0-4 stellig)
dez              Dezimalzahl (0-65535)
tr               Tracknummer (1-41)
se               Sektornummer (0-21)

Die Befehle: (»@« = Klammeraffe, rechts neben der »P«-Taste)
X             EXIT: Verlassen des Programmes. Neustart, auch nach RESET, mit
              SYS 25000 (der BASIC Bereich wird entsprechend eingeengt).
              Wenn Sie hinter den SYS Befehl nach einem Komma noch eine Zahl
              anhängen, wird diese als neue Deviceadresse gedeutet (SYS
              25000,8)
?             HELP: gibt eine Liste der Befehle aus
;             REMARK: alles, was hinter dem »;« steht, wird überlesen.
              Zweck: Das Programm benutzt dieses Zeichen manchmal, wenn es
              Listen ausgibt, etwa beim »^« Befehl. Auch kann man hiermit
              Bemerkungen für eine eventuelle Hardcopy einfügen.
B (tr)        BUMP: erzeugt ein Rattern, um etwa eine Justierung
              vorzunehmen, wenn der Tonkopf an einer nicht definierten
              Stelle steht. Falls der Track angegeben ist, wird nach dem
              Bump auf diesen Track positioniert.
N (ga)        NUMBER: Setzt die Gerätenummer (ga), unter der das Programm
              das Laufwerk anspricht. Falls ga fehlt, wird eine Nummer
              ausgegeben, die einfach verändert und/oder mit <RETURN>
              übernommen werden kann. Diese Adresse kann aber auch mit SYS
              25000,ga oder POKE 26263,ga gesetzt werden.
@ (text)      CMD: Falls der Text fehlt: Der Fehlerkanal wird ausgegeben.
              Manchmal kann es passieren, daß stattdessen nur eine Leerzeile
              oder Unsinn erscheint. Probieren Sie es dann erneut. Falls der
              Text mit »$« beginnt, wird die Directory (nach Wahl
              selektiert, etwa @$op.*) ausgegeben. Abbruch mit <STOP>, Pause
              mit <SPACE>. Sonst wird der Text auf dem Fehlerkanal zur
              Floppy geschickt, etwa @S:NAME zum Löschen eines Filets.
*             RESTART: Startet das Programm neu
^ (puf)       LIST JOBS: Der Pfeil nach oben listet die fünf Jobcodes mit
              den Track- und Sektornummern (dezimal) und einer Erklärung.
              Hinter dem Pfeil nach oben (»^«) kann der Puffer aber auch
              einzeln selektiert werden, etwa ^04 für Nr. 4.
$ hex         Die Hexzahl wird ins Dezimale gewandelt und ausgegeben.
# dez         Die Dezimalzahl wird ins Hexadezimale gewandelt
R             RESET DRIVE: Es wird im Laufwerk ein RESET (UJ) ausgelöst. Der
              Computer wartet (ca. zwei Sekunden), bis die Floppy ihren
              Speicher gelöscht und sich initialisiert hat.
M (ad)        MEMORY: Die acht Bytes ab ad im Floppyspeicher werden als
              Hexdump dargestellt. Änderungen können mit den Cursortasten
              und durch Überschreiben vorgenommen werden. Falls ad nicht
              angegeben ist, wird der letzte M, D oder C-Befehl
              weitergeführt. Wenn Sie nach dem M-Befehl <RETURN> drücken,
              können Sie gleich weiterlisten, da der neue M-Befehl gleich
              vorgegeben wurde. Dies gilt auch für den D und C-Befehl.
C (ad)        CHAR: Die 32 Bytes ab ad werden als ASCii Zeichen ausgegeben.
              Änderungen können nicht vorgenommen werden. Siehe auch
              M-Befehl.
D (ad)        DISASSEMBLE: Der 6502-Befehl ab ad wird disassembliert.
              Änderungen können nur bei den Hexbytes vor dem Mnemonic
              vorgenommen werden, sonst wie der M Befehl.
: ad by (by by by by ...)  CHANGE: Die (maximal acht) Bytes werden im
              Floppyspeicher ab ad abgelegt, danach wird ein M-Befehl
              ausgeführt, um die ASCii Zeichen zu ergänzen. Diesen Befehl
              brauchen Sie normalerweise nicht einzugeben, da der M-Befehl
              die Syntax automatisch vorgibt.
L "name"      LOAD: Das File name (Typ egal) wird gelistet. Dabei können Sie
              wählen, ob Sie das File als Basicprogramm listen wollen, als
              Hexdump wie bei M oder wie bei C als Text. Danach ist (nicht
              bei Basic) zu entscheiden, ob das File in den ersten beiden
              Bytes die Startadresse enthält (was gewöhnlich der Fall ist).
G ad          GOTO: Das Maschinenprogramm, das im Floppyspeicher ab ad
              liegt, wird ausgeführt. Es muß mit RTS enden, sonst stürzt das
              Laufwerk ab (= M-E)
S ad1 ad2 by (by by by ...)  SEARCH: Es wird im Floppyspeicher von ad1 bis
              ad2 einschl. nach den (maximal 28) Bytes gesucht. Sie müssen
              hintereinander im Speicher stehen. Die Fundstellen werden
              ausgegeben. Das Suchen geht recht schnell, da es von einem
              Maschinenprogramm im Floppyram erledigt wird. Es können
              maximal 254 Fundstellen verwaltetet werden.
Y ad1 ad2 ad3  COPY: Der Bereich von ad1 bis ad2 einschl. im Floppyspeicher
              wird ab ad3 kopiert (in den Floppyspeicher), ohne etwas zu
              verändern. So lassen sich Datentabellen kopieren.
T ad1 ad2 ad3  TRANSFER: ad1 - 3 wie bei COPY, zum Kopieren von
              Maschinenprogrammen, da absolute Adressen, die in den zu
              kopierenden Bereich zeigen, umgerechnet werden. Für ad2 muß
              unbedingt das letzte Byte des letzten 6502-Befehles angegeben
              werden; falls das Programm mit RTS endet, muß also z.B. die
              Adresse angegeben werden, in der das RTS steht; falls der
              letzte Befehl JMP ist, muß die Adresse gewählt werden, in der
              das High-Byte der Sprungadresse steht. Dies ist unbedingt zu
              beachten, da das Ende sonst nicht erkannt wird.
J             JOB LIST: Die Jobs der fünf Puffer werden aufgelistet, dabei
              wird gleich die Syntax des folgenden J-Befehles gewählt, damit
              Änderungen einfach durch Überschreiben vorgenommen werden
              können.
J puf by tr se  SET JOB: Für den Puffer puf wird der Jobcode by für Track tr
              Sektor se festgelegt. Bsp. Lesen von Track 18, Sektor 1 in
              Puffer 3: J 03 80 12 01 (80 = Code Lesen)

Fehlermeldungen:

FILE NOT FOUND    Das File für den L Befehl existiert nicht auf der
                  eingelegten Disk
STACK OVERFLOW    Diese Meldung deutet auf einen Programmierfehler im DMS
                  hin. Sie ist aber in langen Tests noch nie aufgetreten und
                  würde darauf hinweisen, daß ein interner Stack
                  übergelaufen ist.
STACK UNDERFLOW   Wie STACK OVERFLOW (Stapelunterlauf)
TOO OFTEN FOUND   Beim S-Befehl wurde das Byte so oft (mehr als 254 mal)
                  gefunden, daß ein interner Speicher überlief
DEVICE MISSING    Beim N-Befehl ist das neue Drive nicht bereit oder
                  vorhanden. Die alte Nummer wird wieder übernommen.

Sonstige Meldungen:
ASK ? FOR A HELP  Weist am Anfang auf den ?-Befehl hin
WRITE TO $xxxx    Statusmeldung für die Befehle T und Y
..X FOUND         Anzahl der Fundstellen bei S (dezimal)
N.C.              Puffer nicht benutzt (bei ^)
ERROR #..         Fehler im Puffer     (bei ^)
OK                Kein Fehler          (bei ^)
>                 Prompt (»bereit«)

Hinweise zur praktischen Anwendung finden Sie an anderer Stelle. Hier nur
noch die übliche Warnung: Da es sich beim DMS um ein sehr mächtiges Programm
handelt, sollten Sie es zum Einarbeiten nur mit Disketten anwenden, auf
denen sich keine wichtigen Daten befinden. Durch Eingabe eines falschen
Befehles kann im ungünstigen Fall eine gesamte Diskette unbrauchbar und
nicht wiederherstellbar werden. Bei den Jobbefehlen befinden Sie sich auf
einer Ebene, in der insbesondere die Tracknummer nicht mehr überprüft wird
(legale Tracknummern: 1 bis 35, in einigen Fällen bis 41). Versuchen Sie
also, etwa von Track 150 zu lesen, so wird die Floppy diesen Befehl brav
ausführen und versuchen, den Lesekopf auf die Spur 150 zu positionieren. Da
nach Spur 41 ein mechanischer Anschlag kommt, sind dann ernsthafte Störungen
wie verstellte oder gar zerstörte Lesekopf, Lesemechanik und/oder
Schrittmotor zu befürchten. Verfasser und IPV Verlag AG übernehmen keine
Gewähr für zerstörte Disketten oder Hardware. Gerne stehen wir jedoch für
Ausfünfte zur Verfügung.

Nun für den Tüftler noch die hexadezimale Speicherbelegung:

1. Computer
00FB-00FC  Adresszwischenspeicher
61A8-61AA  Sprung zur Startroutine bei $689A
61AB-62AA  Tabelle: Befehlscode des aktuellen Bytes
62AB-63AA  Tabelle: Adressierungsarten
63AB-63B7  Tabelle: Anz. Bytes für jede Adr.art
63B8-63D1  Adressen der Routinen zur Anzeige der Adr.arten
63D2-649A  Texte der Mnemonics
649B-650A  Startmeldung
650B-650C  »UJ« für »R« Befehl
650D-6513  Text für den reversen Prompt bei Fehlern
6514-6548  STACK OVERFLOW, STACK UNDERFLOW, TOO OFTEN FOUND
6549-6589  Texte für »J« und »^« Befehle
658A-658B  »I0« zum Initialisiern der Floppy
658C-659D  Texte für »S« Befehl
659E-65AD  »0123456789ABCDEF« für Hexzahlen
65AE-65B9  »WRITE TO $« für T und Y Befehle
65BA-65BE  Lesetext (UC 00 00 00)
65BF-65C6  Texte für die Vorgabe der Defaultwerte
65C7-65CC  »M-W« 00 00 00
65CD-65F9  Namen der Jobs für »^« Befehl
65FA-6607  Tabelle mit den Zeigern auf diese Namen
6608-660C  »M-R« 00 00
660D-661C  »OK«, »N.C.« und »ERROR #« für »^« Befehl
661D-6621  »M-R« Befehl zum Test auf Masch.prog.
6622-6626  »M-E« 00 00 für »G« Befehl
6627-664E  Text für »L« Befehl
664F-666E  »DEVICE MISSING«, »FILE NOT FOUND«
666F-668F  Text 2 für »L« Befehl
6690-6696  »M-W« 00 00 01 00
6697       Devicenummer (8) für »N« Befehl oder SYS 25000,X
6698       Flag für Anführungszeichen für INPUT Routine
6699-669A  Zwischenspeicher für Adresse beim »D« Befehl
669B       Zwischenspeicher
669C       Stackpointer für internen Stack ab $669E
669D       Zeiger auf Eingabezeile
669E-66A7  Stack, auf dem das X Register abgelegt wird
66A8-66AF  Latch, etwa für »M«, »D«, »Y« oder »T« Befehle
66B0       Zwischenspeicher
66B1       Name des aktuellen Befehles
66B2-66C7  Tabelle mit den Namen der Befehle
66C8-66F1  Adressen der Routinen der Befehle
66F2-672B  Maschinenprogramm für Floppypuffer 2 zum Lesen von Werten aus dem
           Floppyspeicher (siehe Einleitung)
672C-678B  Maschinenprogramm für Floppypuffer 2 zum Suchen von Werten im
           Floppyspeicher (»S«-Befehl)
678C-6899  Hilfstexte für »?« Befehl
689A-68F7  Maschinenprogramm: Hauptprogramm
68F1-68F3  am Anfang JSR 0, Sprung in die Befehlsroutinen
68F8-6B69  Unterprogramme (Ein- Ausgabe, Umrechnungen etc.)
6B6A-7553  Routinen der Befehle
7554-7653  Eingabepuffer

2. Floppyspeicher
0014-0015  zu lesende Adresse beim »S« Befehl
006F-0070  zu lesende Adresse
0300-03FF  LOW Bytes der Funstellen
04FE       Flag, ob TOO OFTEN FOUND (dann 255)
04FF       Anzahl Funstellen
0500-052D  Maschinenprogramm 1 als verbesserter »M-R« Befehl
0500-054D  Maschinenprogramm 2 für »S« Befehl
0600-0699  High-Bytes der Funstellen










Tester 1541 - Prüfprogramm für Rotationsgeschwindigkeit und Kopfjustage

Das Disketten-Laufwerk ist mit Sicherheit Ihr wichtigstes Peripheriegerät.
Da es mechanische Präzisionsteile enthält, ist es auch das, was am ehesten
Kummer bereitet. Der »Tester 1541« hilft Ihnen dabei, diese Probleme
frühzeitig zu erkennen und zu lokalisieren.

1. Warum?

Für viele Anwender ist das Laufwerk die wichtigste Komponente des
Gesamt-Systems - es ist das am häufigsten zur Programmspeicherung genutzte
Medium. Ohne die Floppy wären die meisten Computer unpraktisch, wenn nicht
unmöglich.

Wenn Ihr Laufwerk 1541 nicht mehr so arbeitet, wie Sie es von ihm erwarten,
kann Ihnen der »Tester 1541« dabei helfen, herauszufinden, wo der Fehler
steckt. Das Programm analysiert die kritischten Funktionen der
Drive-Mechanik und versorgt Sie am Bildschirm mit wichtigen Informationen.
Auf einen Blick sehen Sie, wie schnell sich die Diskette dreht, wie
verstellt der Schreib-/Lesekopf ist, und wie gut er jeden Track erreicht. Es
erscheint auf Wunsch sogar eine Angabe darüber, wie es mit der Lesbarkeit
der Bereiche zwischen den Tracks steht (sog. »Halftracks«). Wenn diese
Informationen erst einmal am Bildschirm stehen, sollte es keine Probleme
mehr geben, zu entscheiden, ob das Problem gravierend ist und ob eine
Reparatur notwendig ist. Wenn Sie schon wissen, wo der Fehler steckt, sparen
Sie eine Menge Geld und Zeit.

Das Laufwerk 1541 ist ein ziemlich zuverlässiges Gerät. Seine Mechanik ist
stabil und hält meistens auch gröberen Umwelteinflüssen tapfer stand.
Allerdings ist kein Ding auf dieser Welt perfekt, und so gibt es immer
irgendwann einmal den Augenblick, in dem etwas in der 1541 »in die ewigen
Jagdgründe eingeht« oder schlicht und einfach nur »spinnt«. Typische
Probleme ergeben sich durch defekte Disketten, defekte oder verstellte
(dejustierte) Mechanik, oder Fehler in der Elektronik. All diese bewirken
dann Störungen beim Laden oder Speichern von Dateien, in Extremfällen
funktioniert das Laufwerk gar nicht mehr. In diesem Fall sollten Sie es aus-
und wieder einschalten. Prüfen Sie als nächstes alle Steckerverbindungen,
die Stromzuleitung sowohl an der Steckdose wie auch an der
Laufwerks-Rückseite, um sich zu vergewissern, daß alles fest verbunden ist.
Bringt das nichts, prüfen Sie die hinten befindliche Sicherung. Falls
notwendig, ersetzen Sie die Sicherung durch eine vom genau gleichen Typ.

Wenn keiner dieser Schritte das Problem löst, stimmt wahrscheinlich etwas
mit der eingebauten Elektronik nicht. Sollte nach dem Einschalten die rote
Leuchtdiode nicht ausgehen oder zu blinken beginnen, stimmt mit ziemlicher
Sicherheit etwas mit der Elektronik nicht. In solchen Fällen ist der Gang
zur Reparaturwerkstatt leider unumgänglich. Andere Probleme aufzuspüren ist
normalerweise nicht ganz so einfach. In den meisten Fällen wirken sich
Störungen in Form der bekannten Read-Errors aus, die rote Lampe flimmert und
das Laufwerk erzeugt ein Rattern. Das Laden oder Speichern eines Programmes
dauert dann länger als gewöhnlich, oder die 1541 bricht gar die ganze
Prozedur ab, die rote LED blinkt um einen Fehler zu melden. Sie können
natürlich leicht herausfinden, um welchen Fehler es sich handelt, indem Sie
das folgende Programm starten:

10 OPEN15,8,15:INPUT#15,A,B$,C,D:PRINTA;B$;C;D:CLOSE15:END

Manchmal ist es nützlich, die Fehlermeldung zu kennen, aber im allgemeinen
reicht das nicht, um die wirkliche Fehlerquelle herauszufinden. Wir haben es
mit dieser Fehlergattung nicht nur bei defekten Disketten zu tun, sondern
auch wenn die Rotationsgeschwindigkeit der Magnetscheibe nicht stimmt, wenn
der Lesekopf dejustiert ist, oder sogar wenn Sie das Laufwerk im Störfeld
eines Fernsehers, Monitors, Computers oder ähnlichem betreiben. Da diese
Pannen nahezu die gleichen Symptome zeigen, brauchen Sie ein Programm wie
den »Tester 1541«, um weitere Informationen über die genaue Art und Ursache
des Fehlers zu gewinnen.

2. Das Programm

Das Programm ist aus verschiedenen Gründen vollständig in Assembler
geschrieben. Dennoch brauchen Sie keinerlei Maschinensprache-Kenntnisse, um
damit umgehen zu können. Das Programm läßt sich wie ein Basicprogramm laden,
starten und ggf. kopieren. Nach der Eingabe sollten Sie eine Kopie auf
Diskette speichern. Besitzen Sie eine Datasette? Dann speichern Sie doch
auch eine Kopie auf Band, damit das Utility im Falle eines Falles geladen
werden kann, auch ohne das Diskettenlaufwerk. Um den Tester von Diskette zu
laden und starten, geben Sie ein:

LOAD "TESTER 1541",8
RUN

Das Titelbild erscheint, nach einer kurzen Wartezeit von knapp einer Sekunde
folgt das Hauptmenü. In der Pause überträgt der Tester ein Maschinenprogramm
in den Floppy-Speicher. Jetzt haben Sie die Wahl zwischen dem
Rotations-Geschwindigkeits-Test oder dem Justage-Test. Mit <Q> wird das
gesamte Programm beendet, die Floppy wird initialisiert, nach einigen
Sekunden sind Sie wieder im Direktmodus. Der Tester läßt sich ggf. mit RUN
oder SYS 2061 wieder starten.

3. Rotationsgeschwindigkeit

Der Speed-Test prüft, wie schnell die Magenetscheibe vom Hauptmotor des
Laufwerks um sich selbst gedreht wird, wenn die 1541 liest oder schreibt.
Die Geschwindigkeit darf leichte Toleranzen aufweisen, ohne daß sich
Probleme ergeben. Es gibt da allerdings Grenzen, und einige Programme - vor
allem mit Kopierschutz - sind schon arg »pingelig«, wenn es um den
Diskettenzugriff geht. Gewöhnlich sollte die Diskette sich mit 300 rpm
(Umdrehungen pro Minute, Rotations per Minute) drehen, das entspricht einer
Umlaufzeit von 0,2 Sekunden oder einer Frequenz von 5 Hertz
(Winkelgeschwindigkeit 31,4 Hz, Bahngeschwindigkeit 2,094 Meter pro
Sekunde). Dieser Wert sollte im Normalfall um nicht mehr als 1 oder 2 rpm
nach oben oder unten abweichen. Falls doch, treten Lesefehler auf.

Um die Rotationsgeschwindigkeit zu messen, laden und starten Sie das
Programm. Im Hauptmenü gelangt man mit der Taste <1> in den entsprechenden
Programmpunkt. Sie sollen dann eine leere Diskette einlegen. Diese kann
formatiert oder unformatiert sein, wichtig ist aber, daß sie nicht
schreibgeschützt ist. Das Programm beschreibt die Diskette, allerdings auf
einem Bereich, der sonst nicht für die Datenspeicherung verwendet wird (ab
Track 36). Sollten sich Daten auf der Floppy befinden, werden diese nicht
zerstört. Um ganz sicherzugehen, benutzen Sie eine Diskette, auf der sich
nichts Wichtiges befindet. Mit <Q> können Sie abbrechen.

Nach dem Einlegen starten Sie mit einer beliebigen Taste den Meßvorgang. Die
Bildschirmmaske für den Geschwindigkeits-Test erscheint, und das Drive läuft
an. Nach einigen Berechnungen zeigt der Tester die Rotationsgeschwindigkeit
in rpm mit dem Sollwert 300.0 und der errechneten Differenz gegen 300.0 rpm
an. Diese enthält auch ein Vorzeichen (+ oder -), je nachdem, ob der
gemessene Wert nach oben oder unten abweicht. Ein Plus zeigt eine zu hohe
Geschwindigkeit an, bei Minus dreht sich die Floppy zu langsam. Ist der Wert
in den erlaubten Grenzen (Abweichung +- 2 rpm), wird er in weiß geschrieben.
Liegt er im »kritischen« Bereich zwischen 2 und 4 rpm, erscheint er in gelb.
Abweichungen über 4 rpm bedeuten grobe Fehlfunktion und werden in rot
dargestellt. In diesem Fall kann das Laufwerk zwar vielleicht noch laden und
speichern, hat aber wahrscheinlich Probleme, Diskette zu bearbeiten, die auf
anderen Laufwerken formatiert wurden. Aus diesem Grunde sollten Sie das
Laufwerk justieren lassen, wenn die Geschwindigkeit ständig in rot angezeigt
wird.

Dieser Wert wird ständig neu gemessen und in der Tabelle angezeigt. Ist die
unterste Zeile erreicht, scrollt die Tabelle eine Zeile nach oben. Es kommt
vor, daß die Geschwindigkeit leicht schwankt, während die 1541 aktiv ist. Es
gibt dann keinen Grund zur Unruhe - manche Disketten sind besser als andere,
und auch Disketten selbst produzieren Schwankungen, je nachdem, wieviel
Reibung sie erzeugen. Stimmt die Drive-Geschwindigkeit im Normalfall, bei
bestimmten Disketten jedoch nicht, sollten Sie diese speziellen Disketten
nicht mehr benutzen. Die Rotationsgeschwindigkeit verändert sich auch, wenn
der Keilriemen in der 1541 schlüpft. Das kommt durchaus vor, vor allem auf
alten oder stark genutzten Geräten. In diesem Fall sollte der Riemen
ausgewechselt werden.

Beim Speed-Test können auch Fehler auftreten. Diese werden auf dem
Bildschirm mit einer Fehlernummer gemeldet, die genau der der normalen
1541-Fehlermeldungen entspricht. Die Nummer 26 bedeutet etwa, daß die
Diskette schreibgeschützt ist, Nummer 21 weist auf eine fehlende Diskette
oder einen zerstörten Kopf hin. Oder haben Sie vergessen, die
Laufwerksklappe zu schließen? Tritt ein Fehler auf, sollen Sie eine Taste
drücken.

Um den Test zu stoppen, ist ebenfalls ein Tastendruck notwendig. Unter
Umständen müssen Sie die Taste mehr als einmal oder etwas länger drücken, da
der Tester intensiv mit der 1541 kommuniziert und daher die Tastaturabfrage
nur unregelmäßig durchführt. Am besten drücken Sie die Leertaste, diese hat
eine automatische Tastenwiederholung.

4. Kopfjustage-Test

Um die Kopfjustage zu prüfen, drücken Sie im Hauptmenü die Zifferntaste <2>.
Jetzt soll die Testdiskette eingelegt werden (diesmal muß sie wirklich
formatiert sein, sonst schlägt der Justage-Test fehl). Dann werden wieder
einige Wahlmöglichkeiten aufgelistet. Die für diesen Test verwendete
Diskette kann irgendeine formatierte Diskette sein. Im Interesse eines
sorgfältigen Tests ist es wichtig, daß diese Diskette auf einem absolut
perfekt justierten Laufwerk formatiert wurde. Je »besser« formatiert die
Testdiskette ist, desto genauer wird der Test. Eine kommerziell produzierte
Diskette (beispielsweise eine Leserservicediskette oder die Diskette aus
einem neueren 64'er Sonderheft) ist ideal. Benutzen Sie keine
kopiergeschützte Floppy. Zwar schreibt der Justage-Test nicht auf die
Diskette, so daß sicher kein darauf gespeichertes Programm angegriffen wird.
Dennoch sollten Sie Kopien von wichtigen Files machen.

Nachdem die Testdisk eingelegt wurde, wird der Test mit der <J>-Taste
gestartet. Sie sehen einen Datenschirm mit zwei Bereichen zu je vier
Spalten. Die Spalten sind überschrieben mit A) geprüfter Track, B) gelesener
Track, C) Track-Lesbarkeit und - falls eingeschaltet - D)
Halftrack-Lesbarkeit. Wenn der Test läuft, werden die 35 Tracks der Diskette
in diese Tabelle eingetragen. Nach Track 18 wird der linke Teil rechts
fortgesetzt.

Über der ersten Spalte steht die Kennung für »geprüfter Track«. Hier zeigt
der Tester die Nummer des momentan geprüften Tracks an. Es beginnt immer mit
Track 1 und endet mit Track 35. Dies ist das Standard-Format der 1541 und
ändert sich nicht, gleichgültig, was auf der Diskette gespeichert ist und ob
das Laufwerk justiert ist oder nicht.

Bevor die Daten für Track 1 erscheinen, durchläuft das Programm eine
komplizierte Prozedur, um festzustellen, auf welchem Track sich der Kopf
momentan befindet. Danach wird der Kopf heruntergefahren, auf Track 1 und
gegen die Kopfbegrenzung. Verlief die Ermittlung der Position vorher
einwandfrei, sollte es ein leises »Klicken« geben, wenn der Kopf die Sperre
erreicht. Konnte die Position nicht ermittelt werden, wird ein »Bump«
ausgeführt, um den Kopf ganz nach unten zu ziehen. Das bekannte Rattern ist
zu hören. Das ist hier nur sehr selten der Fall, kann aber vorkommen, wenn
die 1541 total dejustiert ist oder Sie versehentlich eine unformatierte
Diskette verwenden.

Über der zweiten Spalte steht »gelesener Track«. Hier finden Sie die Nummer
des Tracks, auf dem der Lesekopf im Augenblick steht. Auf jedem Track einer
formatierten Diskette findet sich auch eine Angabe über die Tracknummer. Das
Testprogramm versucht, diese Angabe zu lesen und zeigt sie in Spalte 2 an.
Die Zahlen in den Spalten 1 und 2 sollten für jeden Track identisch sein. In
diesem Fall werden sie in weiß ausgegeben. Das bedeutet, daß der richtige
Track gelesen wurde. Stimmt die von Diskette gelesene Tracknummer nicht mit
Spalte 1 überein, wird die Zahl in rot ausgegeben. Im Normalfall sind
entweder alle Zahlen in Spalte 2 weiß oder alle rot. Es ist
unwahrscheinlich, daß sowohl rote wie weiße Werte vermischt zu sehen sind.

Ein falsch justierter Lesekopf ist der Übeltäter, wenn in der zweiten Spalte
rote Zahlen erscheinen. Die Differenz zeigt Ihnen, wie stark der Kopf
dejustiert ist. Ist die Differenz 1, so beträgt die Dejustage einen Track.
Zwei Tracks sind es bei einer Differenz von 2, und so weiter. Auch eine
Aussage über die Richtung der Dejustage ist möglich. Wenn die Zahlen in der
zweiten Spalte größer sind als die ganz links, befindet sich der Kopfstop zu
weit oben und der Kopf kann die Tracks mit niedrigen Nummern nicht mehr
anfahren. Sie wären dann nicht imstande, ein Programm, das auf Track 1
gespeichert ist, zu laden. Die weiter verbreitete Störung ist, daß die
Zahlen in der zweiten Spalte kleiner sind als die in der erste Spalte. Der
Kopf kann sich dann zu weit nach unten bewegen. Das stellt kein Problem dar,
wenn die Disketten ordnungsgemäß formatiert wurden, da das Laufwerk den Kopf
auf alle Tracks positionieren kann. Auch wenn Disketten auf einem Laufwerk
mit einem Justierungsproblem der Kopfsperre formatiert wurden, sollte es
kein Problem beim Lesen aller Tracks geben, solange die Floppy mit dem
selben Gerät bearbeitet wird. Wenn sie dann allerdings in ein Laufwerk mit
korrekt eingestellter Kopfsperre eingelegt wird, können die Tracks nicht
mehr gelesen werden, die zu weit unten formatiert wurden.

Ohne einen Justagetester ist es sehr schwer, einem dejustierten Kopf auf die
Schliche zu kommen. Er macht sich nur bemerkbar, wenn Disketten auf mehr als
einem Laufwerk benutzt werden, oder wenn sich die Diskette mit Dateien
füllt. Wenn die Diskette nicht allzu voll ist, sind keine Störungen zu
erwarten. Die Programme werden auf der Scheibe beginnend auf den mitteleren
Tracks abgelegt und arbeiten sich dann nach außen in Richtung Track 1 und
Track 35. Sogar wenn das Laufwerk einen Fehler erkent und den Kopf gegen die
Begrenzung fährt, um den Fehler zu korrigieren, so lange der Kopf sich
selbst immer wieder korrigieren kann, ist alles in Ordnung. Es ist schön,
daß die 1541 in der Lage ist, solche Korrekturen selbständig vorzunehmen.
Aber dadurch wird die Erkennung eines verstellten Kopfes erschwert, es sei
denn, Sie arbeiten mit einem Spezialprogramm wie diesem. Wenn das Problem
erst einmal erkannt ist, sollten Sie den Kopf neu justieren lassen, um den
Schaden möglichst gering zu halten.

Über der dritten Spalte steht »Track-Lesbarkeit«. Die Daten, die hier
angezeigt werden, sind am wichtigsten bei der Beurteilung, ob das Laufwerk
ein Justierungsproblem hat oder nicht. Wie aus der Überschrift bereits
hervorgeht, gibt das Programm hier an, wie gut das Drive in der Lage ist,
einen Track zu lesen. Das Testprogramm versucht, mindestens 17 Sektoren auf
jedem Track zu lesen. Gelang es bei jedem Sektor beim ersten Versuch, den
Datenheader zu lesen, beträgt die Lesbarkeit 100%. Dieser Wert wird weiß
angezeigt. So sollte die Angabe für jeden Track aussehen, wenn das Laufwerk
richtig eingestellt ist. Ist mehr als ein Versuch notwendig, um einen der
Header zu lesen, wird die Angabe in der dritten Spalte eine Zahl unter 100
sein. Liegt sie im Bereich zwischen 94 und 99 %, wird sie gelb angezeigt.
Das bedeutet, daß alle Header im Prinzip gelesen werden konnten, aber einige
Schwierigkeiten auftraten. Ist die Lesbarkeit unter 94 %, wird sie rot
ausgegeben. Ein klares Zeichen dafür, daß es Probleme beim Lesen eines oder
mehrerer Header gab, oder das Laufwerk konnte einige Sektoren überhaupt
nicht lesen.

Ein justiertes Laufwerk sollte keinerlei Probleme haben, auf allen Tracks
den Wert 100 % zu erreichen. Ist dies nicht der Fall, probieren Sie es mit
einer anderen Testdiskette. Treten hier ähnliche Ergebnisse auf, können Sie
davon ausgehen, daß Ihr Laufwerk ein Justierungs-Problem hat. Bevor Sie es
allerdings zur Justage weggeben, sollten Sie es zunächst einmal an einem
anderen Ort betreiben, möglichst weit weg von Ihrem Fernseher, Monitor,
Drucker, Computr und anderen elektronischen Geräten, die sich vielleicht in
der näheren Umgebung befinden. Elektronische Interferenzen sind
wahrscheinlicher als echte Dejustierung, und zeigen genau die gleichen
Symptome. Sollte die »Versetzung« keinen Erfolg bringen, bleibt Ihnen der
Weg in die Reparaturwerkstatt zwecks Justage nicht erspart.

Die vierte Spalte trägt die Bezeichnung »Halftrack Lesbarkeit«. Es handelt
sich um ähnliche Informationen wie die in der dritten Spalte, allerdings
wurde der Kopf hier zwischen zwei Tracks gestellt. Der Schrittmotor, der im
Laufwerk den Kopf antreibt, muß zwei Schritte machen, um einen vollen Track
zu überspringen. Macht er nur einen Schritt, befindet sich der Tonkopf
zwischen zwei Spuren. Im Idealfall sollte die 1541 nicht in der Lage sein,
Daten zwischen zwei Tracks zu finden, die Lesbarkeit sollte also immer
gleich Null sein. In der Praxis »strahlen« einige der Daten der benachbarten
Tracks in den Bereich zwischen zwei Spuren. Auch wenn das Gerät imstande
ist, Daten in den »Halftracks« zu lesen, wäre es verständlich, wenn es die
größten Schwierigkeiten hätte, wenn der Kopf sich exakt zwischen zwei Spuren
befinden und die Lesbarkeit zu den benachbarten Tracks hin zunimmt. In
Wirklichkeit stimmt das so weit, daß man nützliche Informationen daraus
ableiten kann, aber wegen Toleranzen in der Mechanik und in der
Magnetscheibe selbst können diese Werte nicht als absolut angesehen werden
und sollten nur zum Vergleich herangezogen werden. Da außerdem aufgrund der
vielen notwendigen Leseversuche die Ermittlung der Halftrack-Werte ziemlich
lang (bis zu einer oder zwei Sekunden pro Track) dauern kann, besteht die
Möglichkeit, die Ausgabe der vierten Spalte ganz abzuschalten. Dazu
betätigen Sie im Untermenü »Justage« die <H>-Taste, um die Halftrack-Option
abzuschalten.

Die Farbgebung in der vierten Spalte ist anders als die in Spalte 3. Ist die
Lesbarkeit 0 %, wird dieser Wert weiß ausgegeben. Dies ist das Ideal beim
Lesen von Halftracks. Werte zwischen 1 und 80 % färbt das Programm gelb, die
Werte fallen gewöhnlich in diesen Bereich. Rote Zahlen (81 bis 100 %) sind
seltener als gelbe, erscheinen aber auch auf Stationen, die sonst sehr gut
arbeiten. Die Justierung ist am besten, wenn wenigstens einige Nuller in der
vierten Spalte auftauchen. Sind viele Werte rot, könnten Probleme vorhanden
sein, seien Sie aber nicht besorgt, wenn alle Zahlen in der dritten Spalte
weiß sind.

Es wird Ihnen auch auffallen, daß hinter der vierten Spalten in vielen
Fällen ein Plus- oder Minuszeichen steht. Das Testprogramm zählt, wie oft es
Daten vom unter dem Halftrack liegenden Track liest, und wie oft Daten von
der oberen Nachbarspur. Es zeigt dann ein »-« oder »+« an, um anzuzeigen,
welche Spur öfter gelesen wurde, und setzt Sie in Kenntnis, welcher
Nachbartrack näher bei dem vermeintlichen Halftrack lag. Wird ein
Minuszeichen angezeigt, erscheint der niedrigere Track näher. Wird das Plus
gemeldet, wurde öfter vom höheren Track gelesen. Ist das Vorzeichen für alle
35 Tracks das gleiche, scheint der Lesekopf sich stark an der oberen oder
unteren Trackgrenze zu befinden, je nachdem, welches Zeichen erscheint. Ist
kein Symbol zu sehen, erschienen entweder beide Tracks gleich weit entfernt,
oder es konnten zu wenige Werte für den Vergleich gelesen werden.

Obwohl der Justagetest eine beträchtliche Menge an Informationen liefert,
ist er nicht schwer in der Anwendung, insbesondere, wenn Sie einen
Farbmonitor benutzen. Sind alle Zahlen in den Spalten 2 und 3 weiß, ist die
Justage völlig in Ordnung. Bei der Farbgebung im Programm wurde aber bewußt
darauf geachtet, daß auch auf Monochrom-Monitoren (wie ihn der Programmautor
benutzt) klare Unterschiede zu erkennen sind. Die weißen Zahlen sind am
hellsten, die gelben etwas dunkler und die roten heben sich klar von den
übrigen ab. Die Benutzerführung erfolgt übrigens in dunkelgrau. Die Spalten
1 und 2 sollten identisch sein, und Spalte 3 sollte vollständig mit einer
100 gefüllt sein, dann stimmt alles. Eine Reparatur wäre anzuraten, wenn die
Spalten 1 und 2 nicht übereinstimmen oder in Spalte 3 Werte unter 94 %
stehen. Bevor Sie das Laufwerk weggeben, probieren Sie aber unbedingt die
Prozedur an mehreren Testdisketten durch, um sicherzugehen, daß nicht
einfach nur die Diskette defekt war.

Die Justagetest-Funktion läßt sich auf Tastendruck abbrechen. Das Programm
kehrt dann in das Justage-Menü zurück, von wo Sie mit <Q> wieder das
Hauptmenü erreichen. Unter Umständen muß auch hier die Taste mehrmals bzw.
längere Zeit betätigt werden, da der Computer mit dem Laufwerk kommuniziert
und von Zeit zu Zeit Tastendrücke ignoriert.

Das Programm bricht den Test von sich aus ab, wenn es Track 35 erreicht hat.
Drücken Sie dann eine Taste, um das Menü wieder zu erreichen. Sie können den
Test auch in einer Endlosschleife durchführen, indem Sie ihn im Justage-Menü
nicht mit <J>, sondern mit <W> starten. Mit dieser Option löscht das
Programm nach Track 35 automatisch den Bildschirm und fährt wieder mit Track
1 fort. Hier müssen Sie (möglicherweise mehrmals) eine Taste drücken, um
abzubrechen.

Bleibt noch die Taste <1> im Justage-Menü. Diese Funktion bewegt den Kopf
einfach nur auf Track 1 (bzw. dort, wo dieser sein sollte) und parkt ihn
dort, bis Sie eine Taste drücken. Diese Möglichkeit wurde für diejenigen
eingebaut, die dieses Programm dazu benutzen wollen, den Kopf selbst zu
justieren. Diese Justage erfordert allerdings ein Ausbauen des Laufwerks und
sehr präzise Arbeiten an der Drive-Mechanik. Da außerdem die Gefahr eines
elektrischen Schlages besteht (grundsätzlich stehen ALLE Metallteile im
Innern der 1541 unter absolut tödlicher Hochspannung!), sollte diese Arbeit
nur ein Fachmann ausführen.

Weiter besteht im Justage-Menü, wie erwähnt, die Möglichkeit, die
Halftrack-Prüfung abzuschalten. Die Taste <H> wirkt hier wie ein Schalter.
Je nachdem, ob das Wort »AN« oder »AUS« unterstrichen ist, werden die
Zwischen-Tracks getestet oder nicht.

5. Nachspiel

Um das gesamte Programm zu verlassen, sollten Sie in jedem Fall vorher ins
Hauptmenü zurückkehren (von den beiden Untermenüs jeweils mit der <Q>-Taste)
und dort ebenfalls mit <Q> das Testprogramm beenden. Dadurch wird das Drive
initialisiert und ist danach wieder in Bereitschaft für das nächste
Programm. Sie dürfen das Laufwerk nach dem Start des Testprogrammes übrigens
nicht abschalten, da sonst das in dessen RAM enthaltene Maschinenprogramm
verloren geht. In diesem Fall muß der Tester vor der weiteren Arbeit erst
wieder gestartet werden.

Sie können die Justierung des Laufwerks eines Freundes testen, ohne dazu das
Laufwerk selbst zu benötigen. Lassen Sie den Freund eine Diskette auf seinem
Drive formatieren, und verwenden Sie diese dann als Testdisk für den
Justage-Test. Ergibt der Test ein positives Ergebnis, ist die Justierung des
Drives wahrscheinlich in Ordnung. Verläuft der Test negativ, sollten Sie das
Programm direkt auf dem fremden Laufwerk ausprobieren, bevor eine
Entscheidung über die Reparatur getroffen wird.

Jede Diskette läßt sich auf korrekte Formatierung überprüfen, indem sie
einfach als Testdisk für den Justage-Test verwendet wird. Die Daten, die das
Programm ausgibt, zeigen Ihnen, ob alle Tracks formatiert wurden, ob sie in
der richtigen Reihenfolge sind, und ob bestimmte Spuren Fehler aufweisen
(dann nämlich, wenn die Lesbarkeit einen kleineren Wert hat als sie es
sollte).

Es gibt noch viele weitere Anwendungsmöglichkeiten, als die, die wir hier
aufgezählt haben. Das Programm eignet sich vielleicht nicht für jede
Anwendung, die Ihnen jetzt so vorschwebt, aber es enthält eine gut
entwickelte »Alarmanlage«, die Ihnen ganz wesentlich dabei hilft, das
Laufwerk vor Fehlern zu schützen. Es ist nicht möglich, das Laufwerk durch
falsche Programmierung zu zerstören, aber es ist möglich, es zum Absturz zu
bringen. In diesem Fall schalten Sie es kurz aus und wieder ein, und geben
folgenden Befehl:

OPEN 1,8,15,"I0":CLOSE 1

Dadurch wird der Schreib-/Lesekopf auf seine Standard-Position gebracht und
das Laufwerk initialisiert.

6. So funktioniert das Testprogramm

Leider können wir hier aus Platzgründen keine detaillierte Beschreibung der
genauen internen Vorgänge liefern, wohl aber eine grobe Übersicht. Der
wichtigste Bestandteil ist das Maschinenprogramm, das beim Start in das
Floppy-RAM übertragen wird. Dieses wird vom im C 64 befindlichen
Maschinenprogramm aufgerufen und führt unter anderem die Messungen durch,
dient aber auch dazu, die Motoren zu steuern. Der Aufruf erfolgt mittels M-E
Befehl über eine Sprungtabelle, die in der Floppy ab $400 steht und folgende
Befehle bietet:

$400  ersten Track testen, später alle anderen
$403  nächsten Halftrack testen
$406  nächsten Fulltrack testen
$409  Kopf von Halftrack auf Track 18 positionieren
$40c  Ende, Kopf auf Track 18
$40f  Rotat. Geschw. erneut berechnen
$412  Rotat. Geschw. berechnen
$415  nur Track 1 lesen
$418  LED und Hauptmotor aus
$41b  Hauptmotor an
$5b3  Kopf auf Fulltrack positionieren

Beim Justage-Test geht das Programm die gewünschten Tracks durch und
versucht, 17 Sektoren zu lesen. Die Floppy übergibt dem C 64 eine Tabelle
mit den Leseversuchen für die einzelnen Sektoren. Daraus berechnet der C 64
die Prozentzahl. In einer separaten Speicherzelle wird die gelesene
Tracknummr übergeben. Diese Daten übernimmt der Computer mit dem M-R Befehl,
eigene Busroutine sind nicht vorhanden.

Zum Geschwindigkeitstest legt das Programm auf Track 36 oder höher einen
Killertrack an, der nur aus einer langen Sync-Marke und einer ganz
speziellen Markierung an einer Stelle besteht. Um die Geschwindigkeit zu
messen, wartet das Programm auf diese Markierung und setzt dann einen Zähler
auf Null. Dieser wird nun mit jeder Sync-Marke um eins erhöht, so lange, bis
die Markierung wieder kommt. Der Zählerstand gibt dann indirekt schon die
Rotationsgeschwindigkeit, der genaue Wert in RPM wird unter Berücksichtigung
der Floppy-Taktfrequenz und der Länge des zuständigen Maschinenprogrammes
aus- und in RPM umgerechnet. Nähere Informationen entnehme der interessierte
Leser auch der Speicherbelegungstabelle.

$0002-0005 temporär
$0006      Tracknummer
$00b5      Flag: Halftracks anzeigen
$00b6      Justage-Test Modus
$00f7      Zähler
$00f8      Zehntel
$00f9-00fa Geschwindigkeitswert
$02c0      Übergabespeicher für Diskfehler
$02c1-02c4 Übergabespeicher für Geschwindigkeit
$0334-0347 Übergabespeicher für Justage-Test
$0801-15b9 Programm Tester 1541
$0801-080d Basic-Kopf
$080e      Initialzündung: Sprung nach $0ed9
$0810-0818 Floppybefehle
$0819-0828 Hexadezimalzahlen
$0829-0cd4 Bildschirmtexte
$0cd5-130a C 64-Maschinenprogramm
$0cd5      Rahmen zeichnen
$0d29      diverse Bildschirmroutinen
$0d92      Hexadezimalzahl ausgeben
$0deb      Peripheriegerät ansprechen
$0e06      Disk-Befehl ausführen
$0e33      Maschinenprogramm in Floppy starten
$0e4b      Zahl formatieren
$0e5e      Justage-Ergebnisse abfragen und auswerten
$0ed9      Hauptprogramm
$0f4f      Hauptmenü
$0f71      Beenden
$0fa1      Rotations-Geschwindigkeit auswerten
$0fe1      Hauptschleife dazu
$102b      Geschw. berechnen
$1125      Umrechnung -> RPM
$119a      Justagetest
$11c2      Justage-Menü
$11ed      Justage-Schleife
$121d      nächster Track
$130a      letztes Byte für C 64
$130b-15b9 Floppy-Maschinenprogramm





5. KAPITEL: SONSTIGES







DOC 64 2.2 - ein Selbsttest für den C 64 mit allen Schikanen

Spätestens, wenn er »nicht mehr geht« sorgt man sich um das Innenleben des
Computers. Manchmal genügt es, wenn ein Chip ausgetauscht werden muß.
Welcher das ist, läßt sich leicht mit Hilfe einer Selbsttest-Routine
feststellen, die Komponenten des Rechners auf Funktionsweise prüft. »DOC
64«, der Name leitet sich von »Doctor 64« ab, enthält ungewöhnlich komplexe
Testroutinen, die wirklich jede erdenkliche Funktion genauestens prüfen.
Neben dem obligatorischen RAM- und ROM-Test (dabei werden sogar verschiedene
Kernal-Versionen berücksichtigt und ggf. die Chip-Nummer des defekten RAMs
angezeigt) prüft DOC 64 auch den Prozessor 6510, den Soundchip SID, den
Videobaustein VIC, die beiden »Ein-Ausgabeagenten« (CIAs) und mit deren
Hilfe das gesamte System-Timing sowie unter Zuhilfenahme von sog. »Dongles«
einige Schnittstellen. Ingesamt muß der Brotkasten über 30 Tests
durchlaufen, bevor er die Funktionsfähigkeit bescheinigt bekommt. Natürlich
werden die Einzelergebnisse angezeigt.

Ein solches Programm ist nicht nur für den Privatmann interessant, sei es im
Falle eines Defektes oder auch nur, um regelmäßig den Rechner durchzutesten.
Vorstellbar wäre auch die Anwendung in einer Reparatur-Werkstatt, um Defekte
leichter zu finden, oder beim Kauf eines neuen C 64, wenn ermittelt werden
soll, ob das neue Gerät das tun wird, was man von ihm erwartet.

Bevor wir die einzelnen Programmfunktionen beschreiben, zunächst noch einige
Anmerkungen zu den »Dongles«. Damit der C 64 die Schnittstellen testen kann,
müssen vor dem Test einige Stecker an den Userport, Cassettenport und die
beiden Joystickports (Control-Ports) gesteckt werden. Diese enthalten nur
einige Verbinden bzw. wenige passive Bauelemente, die zur Prüfung der
Schnittstellen benötigt werden. Die drei Dongles können Sie selbst nach dem
Schaltplan nachbauen. Für den seriellen Port wird kein Dongle benötigt, da
hier im Computer bereits die Voraussetzungen erfüllt sind. Sie können DOC 64
aber auch völlig ohne Zusatz-Hardware betreiben, allerdings werden dann die
Schnittstellen-Test negativ ausfallen. Dieses Ergebnis ignorieren Sie dann
einfach.

Sind die Controlport-Dongles eingesteckt, wird es zu Störungen der Tastatur
kommen, da diese über die selben Leitungen abgefragt wird. Es wird daher
empfohlen, erst das Programm zu laden und zu starten und dann während die
erste Testseite aufgebaut wird die Dongles einzustecken.

DOC 64 kann von Diskette geladen und dann im RAM gestartet werden, ist aber
auch als Eprom auf einer Karte im Expansion-Port lauffähig. Bevor wir auf
die allgemeinen Programmfunktionen eingehen, soll daher zunächst die
Installation im RAM oder Eprom beschrieben werden. Die einfachste und
billigste Methode ist, das Programm einfach von Diskette zu laden und zu
starten. Dazu geben Sie ein:

LOAD "DOC 64 $8000",8,8

Zum Start des »Doktors« gibt es drei Möglichkeiten: Mit

SYS 64738

oder einem Reset-Taster wird ein Reset ausgelöst, der das Programm
aktiviert, Sie können zum Start nach dem Laden aber auch die Restore-Taste
betätigen.

Diese Methode kann versagen, wenn RAMs oder die serielle Schnittstelle oder
auch einfach das Diskettenlaufwerk einmal defekt sind. Für diesen Fall
empfehlen wir Ihnen, falls Sie die Möglichkeit dazu haben, »DOC 64« auf ein
Eprom vom Typ 2764 oder 27128 zu brennen und dann auf einer
Expansionport-Karte zu betreiben. Solche Karten (z.B. Typ 9502 von REX
Datentechnik) erhalten Sie für ein paar Mark im Fachhandel, sie haben den
Vorteil, daß das Programm sofort nach dem Einschalten des Computers ohne
Laden zur Verfügung steht.

Brennen Sie das unveränderte File "DOC 64 $8000" (Startadresse: $8000) mit
einem geeigneten Eprom-Brenner, zum Beispiel dem »Tiny-Eprommer« aus 64'er
8/88, wie in der Anleitung des Brenners beschrieben auf ein Eprom. Bei
Verwendung des Typs 27128 achten Sie darauf, daß das File in beiden 8
kByte-Banks des Bausteins liegt, damit es auch sicher von der Karte im
GAME-Bereich des Computers ($8000-$9fff) eingeblendet wird. Nach einer
Kontrolle des Eprom-Inhalts stecken Sie dieses in die Karte, schalten sie
ein und stecken sie bei ausgeschaltetem C 64 in den Expansion-Port. Wenn Sie
jetzt den Rechner einschalten, startet das Programm automatisch.

Bitte enternen Sie vor dem Test alle Soft- und vor allem
Hardware-Erweiterungen vom Computer, insbesondere geänderte Betriebssysteme,
Floppy-Speeder, Steckkarten in User- oder Expansion-Port (Ausnahme: Die
Steckkarte, auf der sich »DOC 64« befindet), sowie Joysticks, Paddles oder
sonstige Geräte in den Control-Ports. Ggf. sollten Sie an den noch
ausgeschalteten Computer die Dongles an User- und Cassettenport anschließen
und erst dann den Rechner einschalten und das Programm laden bzw. starten.
Achten Sie darauf, daß Ober- und Unterseite der Dongles nicht verwechselt
werden, denn wir wollen den C 64 ja testen, nicht zerstören. Am besten ist
es, einen Aufkleber »oben« und »unten« auf die Stecker zu kleben. Da die
Tastatur nicht mehr funktioniert, während das Control-Port-Dongle steckt,
müssen Sie, falls Sie DOC 64 von Diskette laden, erst das Programm einlesen
und wie angegeben starten, und dann die beiden Stecker des Dongles in die
Joysticks stecken (sie können vertauscht werden).

Vor der Beschreibung der einzelnen Tests zunächst noch eine Erklärung der
allgemeinen Eigenschaften. Der C 64 wird in 33 Schritten getestet, die auf
zwei Bildschirmseiten untergebracht sind. Zwischen beiden Seiten wird nach
Aufforderung mit der Leertaste umgeschaltet. Die Benutzerführung erfolgt auf
Englisch. Unter der Titelzeile mit Programmname, Versionsnummer, Autor und
Copyright-Vermerk stehen links die im Test befindlichen Komponenten. Rechts
daneben wird nach dem Test der Vermerk »passed« in grün eingetragen, wenn
der Test positiv verlief, oder ein rotes »FAILED« (durchgefallen) bei
erkanntem Fehler.

In einigen Fällen ist rechts daneben ein Kommentar zu sehen.

Nachdem alle Tests abgeschlossen sind, startet das Programm nach Tastendruck
neu. So lassen sich auch Dauertests durchführen. Beenden können Sie »DOC 64«
in jedem Fall nur durch Abschalten des Rechners oder ggf. der Modulplatine,
da ein Reset den Doktor ebenfalls neu startet. Bitte entfernen Sie, so
vorhanden, die Karte aus dem Expansion-Port nur bei ausgeschaltetem Rechner!

Anmerkung: Falls beim RAM-Test Fehler gemeldet wurden, ist es aus
technischen Gründen nicht ausgeschlossen, daß »DOC 64« bei anderen Tests
Alarm gibt, obwohl das entsprechende Teil einwandfrei funktioniert. Dies
liegt daran, daß die meisten Testroutinen aus verständlichen Gründen nicht
ohne RAM auskommen, und daher falsch funktionieren, falls das RAM nicht oder
falsch arbeitet.

Da einige Tests in Form von Schleifen durchgeführt werden, oder eine
Funktion über längere Zeit überwachen, dauert der gesamte Test einige Zeit.
Seite 1 wird in ca. 37 Sekunden abgehandelt (am rechenintensivsten ist dabei
der RAM-Test), bei Seite 2 sind es je nach Anzahl der Versuche mindestens 18
Sekunden. Für den Gesamtablauf von »DOC 64« ist also mit etwa 55 Sekunden zu
rechnen.

Kommen wir nun zu den einzelnen Tests. Beschrieben werden die Funktionen des
Computers, die getestet werden, der Baustein, der bei negativem Test
möglicherweise defekt ist (Typenbezeichnung und Position auf der Platine
eines C64), das genaue Testverfahren und ggf. die Anzahl der Versuche, die
der Test bei negativem Ergebnis durchgeführt wird, bis die »FAILED«-Meldung
ausgegeben wird. Durch diese Toleranz werden Fehler nicht aufgeführt, die
nur einmalig aufgrund von Hardware-Toleranzen auftraten. Wenn nichts anderes
angegeben ist, wird der Test nur einmal durchgeführt.

Ansonsten sind alle Tests aber sehr »streng« und erlauben, wenn überhaupt,
nur Toleranzen im Bereich von weniger als einem Prozent. Genauere Hinweise
finden sich unten.

Bei den neuesten Modellen des C 64 (sog. »Aldi-C 64«) nahm Commodore
umfangreiche Änderungen an der Platine vor, so daß bei diesen Modelle u.U.
die Chip-Bezeichnungen nicht mehr stimmen. Der Test müßte aber auf allen
Modellen eines voll funktionsfähigen C 64 einwandfrei laufen. Der Autor ist
aber für Hinweise etwa auf Hardware-Toleranzen oder geänderte
Hardware-Eigenschaften der verschiedenen C 64-Serien dankbar, die zu einem
falschen Testergebnis führen.

Auf dem C 128 ist der Test in jedem Fall nur im 64'er Modus funktionsfähig.
Interessant wäre, zu prüfen, wie sich beispielsweise C 64-Emulatoren für
»größere« Computer wie den Amiga im Test verhalten.

1. Kernal-ROM. Zum Test des Betriebssystem-ROMs werden die Inhalte der
Speicherzellen dieses Bausteins ($E000-$FFFF) aufaddiert und die in einem
Byte gespeicherte Summe mit dem Sollwert verglichen. Das Programm
berücksichtigt, daß es beim C 64 zwei verbreitete Kernal-Versionen gibt, die
sich unter anderem darin unterscheiden, daß beim Löschen des Bildschirms
verschiedene Default-Zeichenfarben gesetzt werden (vgl. 64'er Sonderheft 33
Seite 116 bzw. 64'er Sonderheft 38 Seite 138). Anhand der Versionsnummer
(steht in Adresse 65408) wird geprüft, welche Version vorliegt. Bei Version
0 lautet die Prüfsumme 11, bei Version 3 ist es die 10. Die Versionsnummer
wird vom Programm hinter der Prüfmeldung mit angezeigt. Wurde eine andere
Versionsnummer als 0 oder 3 gefunden, ergibt der Test immer »FAILED«, vor
der Versions-Anzeige stehen dann drei Fragezeichen. Aus diesem Grunde
sollten Sie vor dem Test, falls vorhanden, alle Erweiterungen entfernen.
Sollte der Test trotz korrekter Seriennummer negativ ausfallen, überprüfen
Sie, ob im Steckplatz U4 auf der Computerplatine das Original Kernal-ROM
(Typ 2364A, Seriennummer 901227-01) sitzt. Wenn ja, ist dieses defekt.
Sollte trotz Original-ROMs eine andere Versionsnummer als 0 oder 3
erscheinen (wäre sehr interessant!), setzen Sie sich bitte mit dem
Programmautor in Verbindung.

2. Basic-ROM. Hier werden die Bytes des Basic-ROMs ($A000-$BFFF) addiert und
mit dem Sollwert 86 verglichen. Ergibt der Test »FAILED«, ist das Basic-ROM
(Typ 2364A, Seriennummer 901226-01, Steckplatz U3) im Computer defekt.

3. Font-ROM. Jetzt werden die Bytes des Zeichensatz-ROMs ($D000-$DFFF)
addiert und mit dem Sollwert 248 verglichen. Ergibt der Test »FAILED«, ist
das Character-ROM (2332A, 901225-01, U5) im Computer defekt.

4. RAM Uxx. In dieser Stufe werden die RAM-Speicherzellen des 64k umfassenen
Speichers auf Funktionsfähigkeit geprüft. xx zeigt dabei den Steckplatz auf
der C 64-Platine an (xx=9-12 oder 21-24). Das RAM ist in acht dynamischen
RAM-Bausteinen vom Typ 4164 (64 kBit) untergebracht und bit-weise
organisiert, d.h., U21 speichert Bit 0 (Wert: 1) aller 65536 Speicherzellen,
U9 speichert Bit 1 (Wert: 2), U22 speichert Bit 2 (Wert: 4), U10 speichert
Bit 3 (Wert: 8), und so weiter bis U12, welches Bit 7 (Wert: 128) speichert.
»DOC 64« speichert in alle Speicherzellen erst den Wert $FF und prüft dann,
ob das in dem momentan auf dem Prüfstand befindlichen Chip gespeicherte Bit
gesetzt ist. Danach wird jedes Byte mit 0 beschrieben, darauf folgt ein
Test, ob das untersuchte Bit gelöscht wird. Der Bereich $0002-$00ff wird von
»DOC 64« direkt geprüft, der Bereich $0200-$FFFF von einer im Stack ab $0180
untergebrachten Routine. »DOC 64« prüft demnach nicht die Speicherzellen 0
und 1, die beim C 64 nicht als RAM verwendet werden können (Prozessor-Port),
der Bereich $0100-$01ff wird erst später bei der Stack-Prüfung unter die
Lupe genommen. Sollte sich herausstellen, daß ein Bit nicht gesetzt oder
gelöscht werden kann, zeigt das Programm dies durch die Meldung »FAILED«
neben dem vermutlich defekten RAM-Chip an. Dahinter erscheint noch die
Adresse, an der der Fehler auftrat, in hexadezimaler Darstellung. Die RAMs
werden nacheinander unabhängig voneinander getestet. Sollten mehrere
RAM-Chips defekt sein, erscheint die Meldung »FAILED« bei ALLEN defekten
Bausteinen. So erkennen Sie im Falle eines Falles gleich, welchen Chip Sie
auswechseln sollten.

Auf dem C64 II stimmen die Chip-Bezeichnungen nicht, da hier das RAM in
einem einzigen IC untergebracht ist.

5. Color-RAM. Für den Farbspeicher steht ein eigener statischer RAM zur
Verfügung, der daher auch extra getestet werden muß. In die 1024
Speicherzellen, die je vier Bits speichern, wird nacheinander der Wert 10
und 5 (abwechselnd gesetztes und gelöschtes Bit) geschrieben und durch
Auslesen kontrolliert. Da die vier höherwertigen Bits (höheres Nibble) nicht
vorhanden sind, erübrigt sich ein Test. Wird ein Fehler festgestellt, zeigt
dies die Meldung »FAILED« an. Dann sollten Sie den Farbram-Chip auf dem
Steckplatz U6 durch einen neuen vom Typ 2114-2 austauschen.

6. ALU. Diese Abkürzung steht für »Arithmetical Logical Unit« und meint den
Teil des Prozessors 6510, der für das Rechnen zuständig ist. Durch recht
komplizierte Rechenoperationen werden die Befehle ADC, SBC (im Dezimal- und
Binärmodus), AND, ORA, EOR, LSR, ASL, ROR und ROL getestet. Tritt hier ein
Fehler im Ergebnis auf, kann der C 64 nicht mehr rechnen. In diesem sicher
nur sehr selten auftretenden Fall muß der Prozessor 6510 (U7) gegen einen
neuen ausgewechselt werden.

7. JMP ($xxff). Bei diesem Test wird auch bei Ihrem Rechner mit ziemlicher
Sicherheit »FAILED« ausgegeben. Warum? Der verwendete Prozessor 6510 enthält
einen Maskierungsfehler, durch den indirekte Sprünge in Maschinensprache
dann nicht richtig ausgeführt werden, wenn das Lowbyte der Speicherzelle mit
der Sprungadresse den Wert $ff hat. Beispiel: Kommt in einem
Maschinenprogramm der Befehl JMP ($53ff) vor, holt sich der Prozessor völlig
zu Recht das Lowbyte der neuen Sprungadresse aus $53ff. Bei der Ermittlung
des Highbytes »vergißt« er jedoch, den in diesem Fall auftretenden Übertrag
zu berücksichtigen und holt das Lowbyte nicht aus $5400, sondern aus $5300.
»DOC 64« prüft, ob auch bei Ihrem C 64 dieser Fehler vorhanden ist. Dazu
wird ab $ceff ein Sprung in eine Routine von »DOC 64« generiert, an $cf00
steht das Highbyte der ersten Routine, an $ce00 das der zweiten. Die beiden
Routinen beginnen an Adressen, die das selbe Lowbyte haben (steht an $ceff).
Je nachdem, welche Routine der Prozessor ausführt gibt »DOC 64« entweder
»passed« oder »FAILED« aus. Sorgen Sie sich nicht, wenn »FAILED« erscheint,
es ist nicht notwendig, den Prozessor auszuwechseln, zumal auch ein neuer
6510 diesen Fehler hat. Sie sollten jedoch, falls Sie in Maschinensprache
programmieren, den Befehl JMP ($xxxx) vermeiden, wenn nicht sichergestellt
ist, daß das Lowbyte nicht an einer Adresse $xxff steht. Für reine
Basic-Programmierer ist dieser Mangel nicht von Bedeutung.

8. Stack. Da zuvor beim RAM-Test der Bereich $0100-$01ff (Stack) noch
ausgespart wurde, erfolgt die Prüfung jetzt. Dazu legt das Programm einen
ungefähr 252 Bytes lagen Teil von sich selbst (ab $8000) auf den Stack
(Befehl PHA), und holt ihn anschließend mit PLA wieder herunter. Dabei
erfolgt ein Vergleich mit dem Original. Sollte hier ein (sehr
unwahrscheinlicher) Fehler auftreten, ist der Prozessor defekt, falls zuvor
keine RAM-Fehler erkannt wurden. Möglicherweise liegt auch ein Defekt auf
der Platine (Bus) vor.

9. SID env. Auf der zweiten Bildschirmseite wird der Hüllkurvengenerator der
Stimme 3 des Soundchips SID einer Prüfung unterzogen. Das Programm erzeugt
einen Ton der Wellenform »Dreieck« und mißt im Interrupt die Dauer der
Release-Phase (Register 54300). Beträgt die Anzahl der Interrupts auch nach
dem 10. Versuch nicht genau 83, oder arbeitet der SID gar nicht, gibt »DOC
64« die Meldung »FAILED« aus. Dann sollten Sie einen neuen SID (6581, U18)
in Erwägung ziehen, falls auch bei anderen Programmen Tonstörungen zu
erkennen sind.

Die Toleranzgrenzen dieser Prüfung sind bewußt sehr niedrig eingestellt, um
wirklich jeden Fehler zu finden. Es ist daher nicht immer ausgeschlossen,
daß DOC 64 hier aufgrund von hardwarebedingten Toleranzen Fehlalarm auslöst,
obwohl der Baustein technisch einwandfrei arbeitet.

10. SID osc. Nach dem Hüllkurvengenerator wird noch der Oszillator, der
eigentliche Tongenerator der Stimme 3 einer Prüfung unterzogen. Das Programm
generiert Töne in den Wellenformen »Rechteck«, »Sägezahn« und »Dreieck« und
liest den Tongenerator über das Register 54299 aus. Bei »Rechteck« dürfen
hier nur die Werte 255 und 0 auftreten. Bei »Sägezahn« bildet das Programm
die korrekte Kurve (perioisch von 0 bis 255 ansteigend) künstlich nach und
vergleicht sie mit dem tatsächlichen Ergebnis. Bei »Dreieck« (periodisch von
0 bis 255 an- und dann wieder auf 0 absteigend) darf die Differenz zwischen
zwei benachbarten Meßwerten nur -2, -1, 1 oder 2 sein. Andernfalls erscheint
nach 20 Versuchen die Fehlermeldung, und der SID 6581 (U18) sollte
ausgewechselt werden.

11. SID Data. Die ersten 24 Register des SID sind »Write-Only-Register«. In
sie kann zur Tonsteuerung ein Wert geschrieben werden, ein Auslesen der
Speicherzellen 54272 bis 54296 führt bei einem intakten SID immer zum
Ergebnis Null. Dies wird hier geprüft. Tritt ein von Null verschiedener Wert
auf, stimmt etwas mit dem Soundchip nicht (U18, 6581).

12. A/D Conv. Hier werden die A/D-Wandler des SID getestet. Dazu muß der
Dongle mindestens am Controlport 1 angeschlossen sein. »DOC 64« untersucht
nur die Speicherzellen 54297 und 54298, die den Wert 24-25 oder 45-46
(Toleranz!) enthalten müssen. Stimmt etwas nicht, sollten Sie den Soundchip
(U18) gegen einen neuen vom Typ 6581 auswechseln, da er die Wandler enthält.
Aber auch ein Fehler in der SID-Beschaltung ist denkbar. Die A/D-Anschlüsse
an Port 2 werden bewußt nicht geprüft, da auch sie intern zum SID laufen.
Fehlt der Dongle, meldet der Test »FAILED«.

Diese A/D-Wandler sind leider ziemlich ungenau. Es ist daher nicht
ausgeschlossen, daß in Einzelfällen bei einigen Lesern die FAILED-Meldung
erscheint, obwohl der Wandler korrekt arbeitet. Der Grund: Der hier
eingebaute SID liefert andere Werte als der des Programmautors. Auch
Toleranzen bei den verwendeten Widerständen können die Ursache sein. Mit
folgenden Befehlen läßt sich, wenn erwünscht, das Programm "eichen" (bitte
bei angeschlossenen Dongles eingeben, auch wenn dies wegen der
Tastatur-Beeinflusung schwerfallen mag):

POKE 35744,PEEK(54297)
POKE 35755,PEEK(54298)

13. CTRL-Ports. Hier werden die beiden Joystickports getestet. Dazu muß der
entsprechende Dongle an beiden Ports angeschlossen sein. Die fünf
Stick-Leitungen (vier Richtungen und Feuer) werden erst an Port 1 auf
Ausgang und an Port 2 auf Eingang geschaltet. Dann übermittelt das Programm
auf diesem Weg von Port 1 zu Port 2 einige Testdaten, die originalgetreu
ankommen müssen. Danach wird Port 2 auf Ausgang und Port 1 auf Eingang
geschaltet und die Prozedur umgekehrt wiederholt. Tritt »FAILED« auf,
tauschen Sie die CIA 1 (U1) gegen einen neuen Baustein vom Typ 6526 aus.

14. Cass.Port. Obwohl selten für den eigentlichen Zweck (Datasette) benutzt,
kann der Hardware-Bastler auch mit dem Cassettenport einiges anfangen. Hier
wird er mit Hilfe des Dongles getestet. Dazu setzt der Computer die
Motor-Leitung auf bestimmte Prüfwerte, die über den Dongle an die
Sense-Leitung weitergegeben werden. Über Speicherzelle 1 erfolgt die
Prüfung. Stellt das Programm Unstimmigkeiten fest, fehlt entweder das
Dongle, oder der Prozessor (6510, U7) oder einer der Transistoren in der
Port-Beschaltung (Q1 bis Q3) hat sich verabschiedet.

15. serial Port. Zum Test der Disketten-Schnittstelle wird kein Dongle
benötigt, da über ein Gatter-IC bereits wichtige Leitungen der Schnittstelle
verbunden sind. Auch hier wird wieder wechselseitig durch Setzen bestimmter
Werte und Prüfung, ob sie am Port wieder ankommen die Funktionsfähigkeit
unter die Lupe genommen. Bei »FAILED« können Sie davon ausgehen, daß
entweder die CIA 2 (6526, U2) oder das Gatter-IC (U8, Typ 7406N bzw.
M53206P) defekt ist.

16. Userport. »DOC 64« prüft die acht frei definierbaren I/O-Pins des
Userports (Port B), die gewöhnlich nicht benutzt werden (höchstens für die
Kommunikation mit einer RS 232-Schnittstelle, mit einem parallel
angeschlossenen Drucker oder Eigenentwicklungen), sowie weitere
Userport-Funktionen. Auch hierzu muß der Dongle vorhanden sein, sonst wird
»FAILED« angezeigt. Zunächst werden die Pins PA2 und PB7 sowie PB0 und PB5
zusammengeschaltet. Je ein Anschluß der Paare dient als Ausgang, der andere
als Eingang. Ähnlich wie oben beim Joystickport erfolgt der Test auch hier
mit Test-Bits. Zum Test des ATN-Bits wird dieses mit PB6 verschaltet. DOC 64
setzt PB6 kurzzeitig auf High und prüft, ob der C 64 einen NMI auslöst
(ATN-Leitung). Die nächsten Tests betreffen die Schieberegister, von denen
je eines in jeder CIA eingebaut ist. Dazu werden die Steuerleitungen PB1 bis
PB4 mit SP1, SP2 und CNT1, CNT2 verbunden. Nacheinander wird jetzt ein
Testwert seriell in die Schieberegister geschoben, der dort auch ankommen
muß. Als letzter Test werden im Dongle die Pins FLAG und PC2 verbunden. Über
PC2 kommt ein kurzer Impuls, wenn DOC 64 einen Schreib- oder Lesezugriff auf
PB ausführt. Über eine NMI-Routine, die auf FLAG reagiert, wird dies
getestet. Tritt ein Fehler auf, ist mit Sicherheit eine CIA (U1 oder U2, Typ
6526) nicht in Ordnung.

17. t/Raster. Eine Messung der Zeit t, die der Videochip zum Aufbau einer
Rasterzeile (in diesem Fall Zeile 100) benötigt, erfolgt. Dazu dient ein
Zähler, der während dem Aufbau der Zeile von 0 bis genau 7 zählen muß. 20
Versuche sind zugelassen, dann wird bei Mißerfolg »FAILED« ausgegeben. Dann
ist sicher der Videochip (6569, U19) defekt, da dieser ja auch den
Prozessortakt erzeugt und somit die Geschwindigkeit des Zählers vorgibt.

18. Sprites. Die Fähigkeit des VICs, Sprites darzustellen, wird
folgendermaßen auf die Probe gestellt: »DOC 64« stellt im unteren Bereich
des Bildschirms drei Sprites dar (daher das leichte Flimmern an dieser
Stelle beim Test) und prüft mit Hilfe der Vergrößerungs-Register und der
Sprite-Sprite-Kollisionserkennung, wann sich zwei Sprites überlappen.
Anschließend wird für ein Sprite die Kollision mit einem Zeichen des
Textbildschirms geprobt. Tritt eine Störung auf, meldet »DOC 64« dies. Dann
kann nur der Videochip (6569, U19) defekt sein, falls zuvor keine
RAM-Störungen gemeldet wurden.

19. Raster-IRQ. Nun muß noch die Fähigkeit des VIC unter die Lupe genommen
werden, IRQs auszulösen. Dazu wird ein Raster-IRQ bei Rasterzeile 100
programmiert. Erfolgt dieser, liest »DOC 64« das Raster-Register aus und
überprüft, ob auch wirklich Zeile 100 den Interrupt ausgelöst hat. Erfolgt
der Raster-IRQ nicht innerhalb einer vorgegebenen Toleranzzeit (Zählung bis
65536), wurde der Test ebenfalls nicht bestanden. Es stehen 20 Versuche zur
Verfügung. Erst nach deren Ablauf erscheint »FAILED«. In diesem Fall ist
wahrscheinlich der VIC (6569, U19) in die ewigen Jagdgründe übergegangen,
oder die Verbindungsleitung zwischen Prozessor und VIC ist defekt.

20. Timer-NMI. Die CIA 2 ($DD00) wird so geschaltet, daß ihr Timer A von
65535 auf 0 zählt und dann einen NMI auslöst. Dies wird im Hauptprogramm
geprüft. Dazu wird ein weiterer Zähler verwendet, der exakt den Wert 5376
erreichen muß, wenn der NMI erfolgt. Dieser Test hat drei Versuche. Verläuft
er negativ, liegt ein Defekt bei CIA 2 (6525, U2), in der NMI-Leitung oder
beim Prozessor (6510, U7) vor.

21. TOD-NMI. Nun wird noch die Möglichkeit der Echtzeituhr (Time of day,
TOD) der CIA 2 ($DD00) geklärt, bei Erreichen der Alarmzeit einen NMI
auszulösen. Die TOD wird auf 00:00:00:0 Uhr gestellt und gestartet, die
Alarmzeit wird auf 00:00:02:0 gestellt, also nach zwei Sekunden. Trat auch
nach drei Versuchen der NMI nicht genau nach zwei Sekunden auf (dazu wird
ein Abwärtszähler verwendet, der von 196608 bis 65536 zählt), erscheint
»FAILED«. Dann ist wieder entweder die CIA 2 (6525, U2), die NMI-Leitung
oder der Prozessor (6510, U7) kaputt.

22. Timer-IRQ. Hier wird die Langzeitkonstanz des System-IRQ (ausgelöst
durch Timer A der CIA 1 ($DC00)) getestet. Das Programm mißt die Anzahl der
aufgetretenen IRQs, während ein Zähler bis 720896 zählt. Es müssen genau 234
IRQs sein. Stimmt dies nicht (drei Versuche), liegt ein Defekt in der CIA 1
(U1, 6526) vor, oder in der IRQ-Leitung oder auch im Prozessor (6510, U7).

23. Timer CIA1. Dieser Programmpunkt testet, ob die beider Timer der CIA 1
richtig arbeiten. Dazu erhalten beide den selben Startwert (51200) und
zählen dann vom Systemtakt getriggert abwärts. Hat Timer A die Null
erreicht, prüft »DOC 64«, ob dies auch für Timer B der Fall ist. Wenn nicht,
liegt mit Sicherheit ein Defekt in der CIA 1 (6526, U1) vor.

24. Timer CIA2. Dieser Programmpunkt testet entsprechend, ob die beider
Timer der CIA 2 richtig arbeiten. Dazu erhalten beide den selben Startwert
(51200) und zählen dann vom Systemtakt getriggert abwärts. Hat Timer A die
Null erreicht, prüft »DOC 64«, ob dies auch für Timer B der Fall ist. Wenn
nicht, liegt mit Sicherheit ein Defekt in der CIA 2 (6526, U2) vor.

25. TOD CIA1. Jetzt wird noch die Ganggenauigkeit der Echtzeituhr der CIA 1
geprüft. Zur Messung wird die CIA 2 verwendet. Timer A der CIA 2 wird so
geschaltet, daß er ununterbrochen Systemtakte von 9850 abwärts zäht. Bei
einer Taktfrequenz von etwa 0,985 MHz bedeutet dies, daß Timer A alle 1/100
Sekunde einen Unterlauf produziert. Timer B der CIA 2 zählt die Underflows
von Timer A. Am Stand von Timer B kann also die abgelaufene Zeit in 1/100
Sekunden abgelesen werden. Die Uhr der CIA 1 wird auf Null gestellt. Jetzt
wartet das Programm, bis sie 5 Sekunden erreicht hat. Timer B wird
ausgelesen, er muß genau 2500 oder 2501 (Toleranz) Zyklen hinter sich
gebracht haben. Stimmt dies auch nach drei Versuchen nicht, liegt ein Defekt
in der CIA 1 (6526, U1), der CIA 2 (6526, U2), im Systemtakt oder der 50 Hz
Netzfrequenz vor.

26. TOD CIA2. Zum Schluß wird noch die Ganggenauigkeit der Echtzeituhr der
CIA 2 geprüft. Timer A der CIA 2 wird so geschaltet, daß er ununterbrochen
Systemtakte von 9850 abwärts zäht. Timer B der CIA 2 zählt die Underflows
von Timer A. Am Stand von Timer B kann also die abgelaufene Zeit in 1/100
Sekunden abgelesen werden. Die Uhr der CIA 2 wird auf Null gestellt. Jetzt
wartet das Programm, bis sie 5 Sekunden erreicht hat. Timer B wird
ausgelesen, er muß genau 2500 oder 2501 (Toleranz) Zyklen hinter sich
gebracht haben. Stimmt dies auch nach drei Versuchen nicht, liegt ein Defekt
in der CIA 2 (6526, U2), im Systemtakt oder der 50 Hz Netzfrequenz vor.

Danach ist das Testverfahren abgeschlossen. Es kann auf Tastendruck
(Leertaste) neu gestartet werden.

Falls Sie sich für die genaue interne Funktionsweise von »DOC 64«
interessieren, oder gar Erweiterungen oder Änderungen vornehmen wollen, wird
die unten angegebene Speicherbelegung nützlich sein. So, und nun wünschen
wir Ihnen noch viel Erfolg bei Umgang mit »DOC 64«. Auß daß das Programm
möglichst selten Fehler registriert, und daß Sie diese im Zweifelsfalls
schnell, billig und einfach reparieren (lassen) können! Sollten Sie noch
Fragen oder Anregungen haben, steht der Autor gerne zur Verfügung (bitte
Rückporto beilegen).

Speicherbelegung für »DOC 64« in der Version 2.2 (hexadezimal):

0002-0003 IRQ-Zähler
0004      Prüfbyte
0005      RAM-Nummer
00b5-00b6 temporärer Zeiger
00f7      Anzahl der Versuche
00f8      letzter SID-Oszillator-Wert
00f9      Versuchszähler
0100-01ff Stack
0180-01c5 RAM-Test Unterroutine
01b7      Zweierpotenzen
8000-8fff Programm »DOC 64«
8000-8003 Reset/Restore-Vektoren
8004-8008 CBM80-Kennung
8009      Reset-Routine/Start Test
ce00      »Falle«: falsches Highbyte für JMP ($ceff)
ce10      falsches Sprungziel für JMP ($ceff)
ceff-cf00 korrekte Parameter für JMP ($ceff)
cf00-cfff SID-Oszillatorspeicher
cf10-cf12 korrektes Sprungsziel für JMP ($ceff)








Kalender unter Kontrolle

Mit einem kleinen Trick bekommen Sie als Programmierer die Jahrhunderte in
den Griff. Wir zeigen Ihnen, mit welchen Verfahren Routinen geschrieben
werden, die mit Tagesdaten umgehen.

In vielen Computerprogrammen kommen als Daten auch Tage vor. Beispielsweise
wird ein Datum eingegeben, das dann im Folgenden weiterverwertet wird. Nun
könnte das Programm natürlich beispielsweise den Wochentag dieses Datums
ausrechnen. Dennoch werden Sie eine solche Funktion nur bei sehr wenigen
Programmen finden. So kompliziert kann die Berechnung doch nicht sein. Doch
wie sagen wir dem Rechner etwa, daß der Dezember 31 Tage und der Februar
manchmal 28, manchmal aber auch 29 hat? Am besten gar nicht.

Manchmal muß auch die Differenz zweier Daten in Tagen berechnet werden. Wozu
man das braucht? Denken Sie nur an Biorhythmus-Programme (Duden!). Aber auch
für viele andere ernsthafte Bereiche, etwa das weite Feld der »Bürokratie«
werden solche Algorithmen benötigt. Wie gesagt, nur wenige Lösungen sind
bekannt. Ein Beispiel dafür, daß das Problem zu schwer ist? Mag sein. Aber
es gibt einige Tricks, wie man sich das Leben hier bedeutend einfacher
machen kann.

Stellen wir uns eine Aufgabe. Ein Programm soll die Nummer eines Tages im
Kalenderjahr ausgeben. Wir sollten jetzt nicht einfach wild drauflos
programmieren, sondern das Problem systematisch angehen. Zunächst einmal ist
das gesuchte Datum einzugeben.

10 INPUT"DATUM FORMAT TTMMJJJJ ";D$
20 T=VAL(MID$(D$,1,2))
30 M=VAL(MID$(D$,3,2))
40 J=VAL(MID$(D$,5))

Wir geben den String im Format »TTMMJJJJ« ein, also ohne Punkte oder
sonstige Trennzeichen. Die Eingabe »18021991« <RETURN> bedeutet mithin 18.
Februar 1991. Das Jahrhundert soll also eingegeben werden. In einem
anwenderfreundlichen Programm erscheinen diese Hinweise übrigens auch am
Bildschirm, das aber nur nebenbei. Danach zerlegen wir die Eingabe in drei
Teile und ermitteln die Wertigkeit von Tag, Monat und Jahr. In unserem
Beispiel wird T = 18, M = 2 und J = 1991. Zur Sicherheit kann eine Prüfung
der Eingabe auf Plausibilität nicht schaden, das erledigen die folgenden
Zeilen:

50 IF M<1 OR M>12 THEN RUN
60 IF T<1 OR T>31 THEN RUN

Wie berechnet man jetzt die Tagesnummer? Im Prinzip könnte man einfach
durchzählen. Aber es geht einfacher. In der folgenden Tabelle sehen Sie
zusammengefaßt die Anzahl Tage der Monate März bis Dezember:

Monat  Tage       Monat  Tage
  3     31          8     31
  4     30          9     30
  5     31         10     31
  6     30         11     30
  7     31         12     31

Bis auf den Sprung von 7 nach 8 wechseln sich also immer die Werte 30 und
31. Und nun probieren Sie im Direktmodus folgende Schleife aus:

FOR M=3 TO 12 : PRINT M, INT (30.6 * (M+1) ) : NEXT

Dieser Algorithmus gibt also genau die obige Tabelle aus. Das ist einfacher,
als die Monatslängen in einem Array zu Programmbeginn zu definieren und
kostet weniger wertvollen Speicherplatz. Aber wie steht es mit Januar und
Februar? Das ist weiter nicht schlimmt, wir beginnen die Zählung des Jahres
einfach mit dem ersten März und hängen die Monate Januar und Februar hinten
nach dem Dezember an. Der Februar ist somit der letzte Monat unseres
»EDV-Jahres«, es ist egal, ob er 28 oder 29 Tage hat, die Zählung arbeitet
immer richtig.

Verfollständigen wir unser Programm nach dieser Methode:

70 REM WELCHE TAGESNUMMER ?
80 IF M>2 THEN N=INT(30.6*(M+1))-63+T:GOTO 100
90 N=INT(30.6*(M+13))-428+T
100 PRINT"NUMMER"N
110 END

In Zeile 80 erfolgt eine Fallunterscheidung. Ist der eingegebene Monat März
oder höher, kann die angegebene Formel verwendet werden. Wir ziehen vom
Ergebnis noch 63, die Nummer des ersten März ab. Ebenso muß in Zeile 90 bei
der Bearbeitung der Monate Januar und Februar das Ergebnis kosmetisch
nachbehandelt werden.

Diese Routine funktioniert jetzt aber nur für ein Jahr (und produziert unter
Umständen bei Schaltjahren falsche Werte). In der Praxis wird man diese
Routine wohl kaum benötigen. Das folgende Problem tritt dagegen weitaus
häufiger auf. Beispielsweise wird die Frage gestellt, wie viele Tage
zwischen zwei bestimmten Daten liegen. Kennen Sie Ihr genaues Alter in
Tagen? Man geht hierbei so vor, daß jedes Datum in eine absolute Zahl
umgewandelt wird. Dazu nimmt man die Anzahl der Tage, die seit einem
bestimmten fest definierten Ereignis vergangen sind, etwa seit Christi
Geburt, seit dem Geburtstag der Freundin, seit der Vereinigung Deutschlands
oder was auch immer. Aus programmtechnischen und astronomischen Gründen
wählt man in der Praxis dabei das Datum 1.01.4713 vor unserer Zeitrechnung,
ein Datum, das weit vor allen geschichtlich überlieferten Ereignissen
liefert. Man nennt dieses Datum auch »julianisches Datum«. Wir müssen jetzt
also das in den Variablen T, M und J übergebene Datum in das julianische
Datum, eine einfache Zahl, umwandeln. Folgende Unterroutine übernimmt das
freundlicherweise für uns:

1000 REM KALENDER -> JULIANISCH
1010 IF M>2 THEN M=M-3:GOTO 1030
1020 M=M+9:J=J-1
1030 JH=INT(J/100):JA=J-100*JH
1040 JD=INT(146097*JH/4)+INT(1461*JA/4)
1050 JD=JD+INT((153*M+2)/5)+T
1060 RETURN

Die genaue Funktionsweise, insbesondere die Bedeutung der Konstanten 146097,
1461 und 153 kann hier aus Platzgründen leider nicht beschrieben werden, da
umfangreiche astronomische Überlegungen dahinterstecken. Kluge Menschen
haben sich schon den Kopf darüber zerbrochen, uns soll daher die fertige
Lösung genügen. Diese berücksichtigt natürlich auch Schaltjahre und
Jahreszahlen. In Zeile 1010 prüfen wir, ob der Monat März oder höher war.
Wenn ja, rechnen wir ihn in unseren »EDV-Jahr-Monat« um. In Zeile 1020
erfolgt die Rechnung für die Monate Januar oder Februar. Wir addieren 9 zum
Monat und erniedrigen dafür das Jahr um eins. In Zeile 1030 berechnen wir
das Jahrhundert (JH) und Kalenderjahr ohne Jahrhundert (JA), dies läßt sich
mit der Zerlegung in High- und Lowbyte bei der Binärrechnung vergleichen und
wird im folgenden zur Berücksichtigung der Schaltjahr (Zeile 1040) benötigt.
In 1050 addieren wir dann noch die nach bekannter Methode ermittelte
Tagesnummer im Jahr zu JD. JD enthält dann das julianische Datum zu T, M und
J.

Um die Funktionsweise zu testen, löschen Sie bitte die Zeilen 70 bis 110 des
vorherigen Musterprogramms und geben folgendes ein:

70 GOSUB 1000
80 PRINT "JULIANISCH: "JD
90 END

Auch der umgekehrte Weg läßt sich gehen. Wir wandeln das in JD übergebene
julianische Datum in das Kalenderdatum um und übergeben dieses in den
Basic-Variablen T, M und J. Die Routine dazu soll ab Zeile 2000 beginnen und
sieht so aus:

2000 REM JULIANISCH -> KALENDER
2005 J=INT((4*JD-1)/146097)
2010 JD=4*JD-1-146097*J
2020 T=INT(JD/4)
2030 JD=INT((4*T+3)/1461)
2040 T=4*T+3-1461*JD
2050 T=INT((T+4)/4)
2060 M=INT((5*T-3)/153)
2070 T=5*T-3-153*M
2080 T=INT((T+5)/5)
2090 J=100*J+JD
2100 IFM<10THENM=INT(M+3):GOTO2120
2110 M=INT(M-9):J=J+1
2120 RETURN

Man sieht also, daß der umgekehrte Weg viel umständlicher ist komplizierter
ist. Wir werden aber später sehen, daß er durchaus nützlich sein kann, etwa
wenn es um Fristen geht. Mit folgendem Programm probieren wir die
Funktionsweise der Routine aus:

10 INPUT "JULIANISCHES DATUM ";JD
20 GOSUB 2000
30 PRINT "KALENDERDATUM:";T;".";M;".";J
40 END

Unsere Aufgabe war, die Differenz zwischen zwei Daten in Tagen zu errechnen.
Dazu dient folgendes Programm, das auf die Routine ab 1000 zurückgreift:

10 INPUT"DATUM 1 FORMAT TTMMJJJJ ";D$
20 T=VAL(MID$(D$,1,2))
30 M=VAL(MID$(D$,3,2))
40 J=VAL(MID$(D$,5))
50 GOSUB 1000
60 J1=JD
70 INPUT"DATUM 2 FORMAT TTMMJJJJ ";D$
80 T=VAL(MID$(D$,1,2))
90 M=VAL(MID$(D$,3,2))
100 J=VAL(MID$(D$,5))
110 GOSUB 1000
120 R=JD-J1
130 PRINT "DAZWISCHEN LIEGEN"R"TAGE."
140 END

In Zeilen 10 bis 40 lassen wir das erste Datum eingeben und werten es aus.
In Zeile 50 wird die Berechnung des julianischen Datums aufgerufen. Das
Unterprogramm gibt den Wert in JD zurück, diese Variable müssen wir zur
weiteren Berechnung in J1 zwischenspeichern (Zeile 60). Danach werten wir
auf gleiche Weise in 70 bis 110 das zweite Datum aus und berechnen in Zeile
120 die Differenz. Geben Sie in das Programm zum Spaß einmal als erstes Ihr
Geburtsdatum ein, und als zweites das heutige Datum. Sie wissen dann Ihr
Lebensalter - in Tagen! Diese Zahl könnte nun beispielsweise mit
SIN-Funktionen für einen Biorhythmus aufbereitet werden, doch das soll nicht
Inhalt dieses Aufsatzes sein.

Wir können nun die Differenz zwischen zwei Daten (Mehrzahl von Datum)
berechnen (lassen). Ein anderes Programm muß mit Tagesfristen operieren
können. Wann muß der Antrag, der Einspruch, für den man bekanntlich 30 Tage
nach Zugang Zeit hat, beim Finanzamt eingereicht sein? An welchem Tag sollte
eine Rechnung mit Zahlungsziel »20 Tage nach Rechnungsdatum« spätestens
bezahlt werden? Das folgende Programm rechnet es für Sie aus.

10 INPUT"DATUM FORMAT TTMMJJJJ ";D$
20 T=VAL(MID$(D$,1,2))
30 M=VAL(MID$(D$,3,2))
40 J=VAL(MID$(D$,5))
50 GOSUB 1000
60 INPUT"FRIST IN TAGEN ";R
70 JD=JD+R
80 GOSUB 2000
90 PRINT "LAEUFT AM";T;".";M;".";J;". AB!"
100 END

Es findet wieder die bekannte Routine zur Eingabe und Zerlegung des
Tagesdatums Verwendung. In Zeile 50 wird das julianische Datum dazu
berechnet. Wir geben daraufhin die Frist in Tagen ein. Hier sind auch
negative Werte und die Null zugelassen! Die Eingabe addieren wir zum
julianischen Datum, das ergibt ein neues julianisches Datum. Zeile 80 prüft
nun, welches Kalenderdatum diesem entspricht und gibt es in Zeile 90 aus.
Probieren Sie einmal aus, ob alles funktioniert.

Jetzt fehlt nur noch ein wichtiger Punkt. Können Sie herausfinden, aus
welchen Wochentag ein bestimmtes Datum fällt? Wissen Sie beispielsweise, an
welchem Tag Sie geboren wurden? (Sie meinen, das wäre egal? Haben Sie schon
einmal den Ausdruck »Sonntagskind« gehört? Fragen Sie einmal einen
Astrologen!) Aber ernsthaft: Viele Planungs- und Verwaltungsprogramme
könnten wirksam Schaden vermeiden, wenn sie selbständig feststellen, ob Tage
auf Samstag, Sonntag oder Feiertag fallen (natürlich nur, wenn ein
Verzeichnis aller Feiertage eingebaut ist). Ein Beispiel wäre eine
Urlaubsverwaltung.

Die Folge der sieben Tage wiederholt sich ja regelmäßig. Sie brauchen also
nur die Anzahl der Tage zu bestimmen, die seit einem bestimmten Datum, etwa
dem 1.01.1980 vergangen sind. Wie das geht, haben wir ja schon gelernt. Das
Ergebnis wird durch sieben geteilt. Der Rest ist die Nummer des Wochentages.
Wir müssen noch wissen, daß der 1.1.80 ein Dienstag war, zu der Formel
sollte also noch zwei addiert werden, sonst kommt das Programm auf Dienstag.

10 INPUT"DATUM FORMAT TTMMJJJJ ";D$
20 T=VAL(MID$(D$,1,2))
30 M=VAL(MID$(D$,3,2))
40 J=VAL(MID$(D$,5))
50 GOSUB 1000
60 UNT=JD-723121+2
70 TAG=UNT-INT(UNT/7)*7
80 TAG$(0)="SONNTAG"
90 TAG$(1)="MONTAG"
100 TAG$(2)="DIENSTAG"
110 TAG$(3)="MITTWOCH"
120 TAG$(4)="DONNERSTAG"
130 TAG$(5)="FREITAG"
140 TAG$(6)="SAMSTAG"
150 PRINT"WOCHENTAG: "TAG$(TAG)
160 END

Bis zu Zeile 60 enthält das Programm nichts neues. In Zeile 60 berechnen
wir, wie viele Tage seit dem 1.1.80 (dessen julianisches Datum 723121 ist)
vergangen sind. Dazu wird 2 addiert, um die Skala zu normieren. In Zeile 70
findet sich ein kleiner »Kniff«. Da es im Commodore-Basic keine Funktion zur
Berechnung des Restes einer Division gibt, behelfen wir uns so:

A MOD B = A - INT (A/B) * B

A soll durch B geteilt und der Rest ermittelt werden. B ist hier konstant 7
(Anzahl Wochentage), A ist UNT, die Differenz der Tage. Mit Hilfe des in
Zeilen 80 bis 140 definierten String-Arrays geben wir in Zeile 150 dann den
Wochentag aus. Man könnte das Ganze noch etwas eleganter mit einer FOR..NEXT
und READ..DATA-Struktur gestalten, die die Wochentagsnamen einliest, aber
hier geht es nur ums Prinzip. Und nun sollten Sie unbedingt einmal Ihr
Geburtsdatum eingeben und den Wochentag feststellen lassen.

Die Formeln, die Ihnen hier vorgestellt wurden, sind auf den ersten Blick
sicher sehr schwer verständlich. Es ist aber gar nicht notwendig, daß Sie
wissen, wie sie funktionieren. Bauen Sie einfach je nach Bedarf die
Unterprogramme ab 1000 und/oder 2000 in Ihr Programm ein, und arbeiten Sie
damit.










Großputz - Die Tastatur reinigen

Viele C 64-Anwender haben inzwischen erkannt, daß etwas Hygiene auch beim
Computer sein muß (siehe 64'er 2/88). Von Zeit zu Zeit wird beispielsweise
der Druckkopf einer gründlichen Reinigung unterzogen, wie es ja auch im
64'er Magazin (2/86 und 2/87) schon beschrieben wurde. Auch der
Schreib/Lesekopf des Floppy-Laufwerks kann eine »Ölung« von Zeit zu Zeit
ganz gut vertragen. Aber ein Teil der Anlage, das sehr anfällig gegen
Schmutz ist, wird dabei oft übersehen: Die Tastatur. Wir wollen Ihnen daher
eine ausführliche Beschreibung geben, wie man das Keyboard säubert. Sie
sollten diese Schritte immer dann sorgfältig durchführen, wenn Tasten nur
noch auf sehr starken Druck oder gar nicht mehr reagieren.

Für den Großputz benötigen wir folgendes: Einen großen und einen kleinen
Kreuzschlitz-Schraubenzieher, eine Zange, einen Staubsauger, ein lauwarmes
Wasserbad, einen fusselfreien feuchten Lappen, eventuell
Desinfektions-Spray, Nitro-Verdünnung und einen Lötkolben. Für den
kompletten Vorgang rechnen Sie etwa eine halbe Stunde.

Vor der Reinigung muß der C 64 abgeschaltet und von allen anderen Geräten
getrennt werden (Steckverbindungen lösen). Danach kann der »Brotkasten«
umgedreht werden. An seiner Unterseite befinden sich drei
Kreuzschlitz-Schrauben, die mit einem geeigneten Schraubendreher
herausgedreht werden sollen. Bewahren Sie alle Schrauben sorgfältig auf.
Achtung: Durch das Öffnen des Gerätes geht ein eventueller Garantieanspruch
verloren! Bei entsprechender Sorgfalt kann aber nichts passieren. Jetzt kann
der Brotkasten aufgeklappt werden. Sie sehen den 18-adrigen Kabelbaum, über
den die Tastatur mit der Computerplatine verbunden ist. Dieser ist mit einem
Stecker an der linken Platinenseite angeschlossen. Ziehen Sie vorsichtig
diesen Stecker aus seiner Kontaktleite. Die rote Leuchtdiode kann, muß aber
nicht unbedingt ausgesteckt werden (rechte Platinenseite). Jetzt kann die
ganze Tastatur abgeschraubt werden. Dazu lösen Sie die acht großen
Kreuzschlitz-Schrauben in der Oberseite des Brotkastens. Sie sehen ähnlich
aus wie die drei Schrauben, die schon den gesamten Computer zusammenhielten.
Lösen Sie vorerst noch nicht die 23 kleinen Schrauben, die auf der
bräunlich-orangefarbenen Tastaturplatine sitzen!

Die gesamte Tastatur kann nun abgenommen werden. An dieser Stelle könnten
Sie eine neue Tastatur einsetzen (diese gibt es als Ersatzteil zu kaufen),
wenn Sie eine haben. Da dies bei den wenigsten Lesern der Fall sein wird,
beschreiben wir jetzt die Säuberungs-Aktion. Nehmen Sie den Computer ohne
Tastatur und legen ihn beiseite, er wird zunächst nicht mehr benötigt.
Entgegen dem weit verbreiteten Gerücht ist es auch beim C 64 wie bei jedem
anständigen Computer möglch, die Tastenkappen einzeln abzuziehen, z.B. zur
Reinigung. Das sollten Sie jetzt sehr vorsichtig und bitte ohne allzu große
Gewaltanwendung tun. Ziehen Sie etwa mit einer Zange die 65 Tastenkappen
(nicht die Leertaste) senkrecht nach oben (wie ein Zahnarzt, der Zähne
zieht). Hierbei sollten Sie achtgeben, daß zum einen die Tasten nicht zu
sehr verkratzt werden (packen Sie sie mit der Zange links und rechts an,
damit das auf der Vorderseite aufgedruckte Grafikmuster nicht leidet), und
zum anderen nichts abbricht. Das verwendete Plastik ist zwar wirklich sehr
stabil, aber Vorsicht ist nun mal besser als Nachsicht. Auch die
SHIFT-LOCK-Taste kann auf diese Weise abgenommen werden. Unter jeder Kappe
sitzt eine Spiralfeder, die die Taste nach oben drückt. Sammeln Sie die 65
Federn in einem Becher, sie müssen nur leicht abgestaubt werden.

Die beste Methode zur Reinigung der Tastenkappen ist, sie etwa eine Viertel-
bis halbe Stunde in einem lauwarmen Wasserbad zu lagern (fließendes
Wasser?), damit der Schmutz sich lösen kann. Bitte verwenden Sie keine
Chemikalien dazu, sie könnten das Plastik angreifen. Jetzt ziehen Sie auch
die Kappe der breiten Leertaste ab. Dazu packen Sie diese mit der Zange oben
und unten genau in der Mitte und ziehen sie heraus. Den Metallbügel, der die
Taste waagerecht hält, lagern Sie am besten bei den Metallfedern (eine
solche steckt auch in der Space-Taste, Sie haben jetzt also 66 davon). Diese
Metallteile dürfen nicht feucht gereinigt werden (Rostgefahr). Die Leertaste
legen Sie ins Wasserbad zu den anderen Kappen.

Jetzt beginnt die eigentliche Reinigungsarbeit. Wie Sie sehen, hat sich
unter den Tastenkappen eine mehrere Millimeter dicke Schicht aus Staub,
Haaren, Krümeln, Fingernägeln, Zähnen und so weiter angesammelt (kein Witz!
Sie werden erstaunt sein...). Diese gilt es zu entfernen, damit sich die
Tasten wieder leicht drücken lassen. Besorgen Sie sich einen Staubsauger und
saugen Sie den verschmutzen Bereich gründlich ab. Möglicherweise löst sich
der Schmutz nur, wenn Sie beispielsweise mit dem Schraubenzieher daran
kratzen. Nachdem die gröbsten Verdickungen entfernt sind, sollten Sie noch
mit einem feuchten (nicht nassen!) Lappen darüberwischen. Ersatzweise kann
es auch sinnvoll sein, mit einem schnell verdunstenden Desinfektionsmittel
über das Tastaturgehäuse zu sprühren, hier hat sich zum Beispiel »Softasept«
(B.Braun AG, 3508 Melsungen, Best. Nr. 388514/3) recht gut bewährt. Achten
Sie jedenfalls darauf, daß die Tastatur nicht zu feucht wird, damit später
keine Kurzschlüssen entstehen.

Nachdem alles wieder schön saubär ist, setzen Sie alle Tastenkappen wieder
auf. Wenn Sie sich nicht mehr daran erinnern können, wo welche Taste saß,
sehen Sie sich ein Foto von einem C 64 oder auch die heimische
Schreibmaschine (Z und Y vertauscht!) an. Sie können das Keyboard auch
provisorisch wieder anschließen, dann vorsichtig den C 64 aktivieren und
probieren, welche Taste welches Zeichen auf den Bildschirm bringt. Sollte
die eine oder andere Kappe nicht stecken bleiben, versuchen Sie es nochmal,
indem Sie die Kappe leicht schräg aufstecken. Keine Angst vor Verwechslung
der beiden SHIFT-Tasten, diese sind absolut identisch. Bevorzugen Sie eine
deutsche Tastatur, können Sie bei dieser Gelegenheit übrigens die Kappen <Z>
und <Y> absichtlich vertauschen und später softwareseitig die Belegung
umdefinieren.

Diese Generalreinigung muß normalerweise nur alle zwei bis drei Jahre
durchgeführt werden. Wichtiger ist es, die eigentlichen Tastenkontakte zu
putzen, die sich im Innern des Tastaturgehäuses verbergen. Dieser Vorgang
kann je nach Auslastung des Rechners schon bis zu vier- oder fünfmal im Jahr
notwendig sein. Lösen Sie dazu auf der Rückseite der abgenommenen Tastatur
(mit aufgesteckten Tastenkappen) die 23 kleinen Kreuzschlitzschrauben, so
daß Sie die Tastaturplatine abnehmen können. Vorher müssen Sie noch die
beiden Drahstücke ablöten, mit denen die SHIFT-LOCK-Taste angeschlossen ist.
Bauen Sie hier eine Steckverbindung ein, werden spätere Reinigungen
erleichtert. Keine Angst, es befinden sich keine kleinen Teile unter der
Platine, die herausfallen könnten (auch keine großen). Wie Sie sehen, wird
bei Betätigung einer Taste ein kleines auf einer Feder gelagertes Stück
Leitgummi gegen zwei blanke Stellen auf der Tastaturplatine gedrückt,
verbindet diese und stellt so den Kontakt her. Viel billiger geht's nicht
mehr. Aber was soll's. Die blanken Stellen auf der Platine sollten als
erstes von Staub gereinigt werden. Dazu hat sich folgende Vorgehensweise
bewährt: Tränken Sie ein absolut fusselfreies Tuch (z.B. aus Filz, nur zur
Not genügt auch ein unbenutztes Tempo-Taschentuch) mit Wasser oder besser -
weil es schneller verdunstet - mit Nitro-Verdünner (Farblöser, z.B. von
Brillux, das erhalten Sie zum Beispiel in Hobby- oder Farbengeschäften). Mit
dem Tuch wischen Sie vorsichtig über die gesamte Platine und entfernen
Staubreste. Bei Verwendung des Verdünners (entspricht Tipp-Ex-Verdünner)
arbeiten Sie bitte bei weit geöffnetem Fenster, da diese Chemikalie
gesundheitsschädlich ist. Mit dem Tuch reinigen Sie dann auch die 65
Leitgummis einzeln.

Jetzt wird die Tastatur wieder wie neu arbeiten. Sie muß nur noch
zusammengebaut werden. Legen Sie die Platine wieder auf die Tastatur, löten
oder stecken die Verbindung zu <SHIFT LOCK> wieder an und verschrauben das
Ganze mit den 23 kleinen Schrauben. Danach kann das Keyboard in den Computer
eingebaut werden. Ist auch das geschehen, stecken Sie den Tastaturstecker
wieder auf die Leiste ganz links oben auf der Computerplatine. Die 18 Adern
müssen links aus dem Stecker herausragen, falsches Einstecken ist mechanisch
jedoch ausgeschlossen. Danach verschrauben Sie auch den Brotkasten wieder
und schließen ihn an Trafo und Monitor an. Starten Sie einen Probelauf: Sie
werden sich wundern, wie sehr sich die Qualität der Tastatur durch diese
einfachen Handgriffe verbessert hat!








Der Hyper-Reset

Einen Reset-Taster haben wohl die meisten C 64-Besitzer. Was noch fehlt, ist
die Möglichkeit, auch aus reset-geschützten Programmen auszusteigen. Mit dem
Hyper-Reset ist das kein Problem. Unsere Schaltung (Bild) besteht aus drei
Bauteilen, Software ist nicht notwendig. Der alte Reset-Taster T2 (nicht
unbedingt notwendig) wirkt wie gewohnt, ein Druck auf den neuen T1 bricht
auch Reset-geschützte Programme ab. Außerdem wirkt er nicht auf die Floppy.
Der Einbau dauert knapp eine Viertelstunde und ist auch für den Laien
unproblematisch.

Hinweis: Aus technischen Gründen kann es vorkommen, daß nach einem Kaltstart
mit dem neuen Reset-Taster die Speichertestroutine falsch arbeitet. Sollte
nach dem Reset eine andere Anzahl als 38911 BYTES FREE erscheinen, geben Sie
bitte folgende Befehle ein:

POKE 32774,0
SYS 64738

Der POKE-Befehl macht den Reset-Schutz unwirksam gegen den nun durch den
folgenden SYS-Befehl ausgelösten Reset-Befehl. Dieses gelingt allerdings nur
bei im Speicher befindlichen Programmen, nicht bei Steckmodulen am
Expansionport.










Schmalschrift

Erweitern Sie Ihren MPS801-kompatiblen Drucker um eine
Schmalschrift-Funktion, die bis zu 120 Zeichen pro Zeile druckt. Unser
Programm bietet darüberhinaus noch einige Sonderfunktionen. Sie werden Ihren
Printer nicht wiedererkennen!

Wenn Sie öfters mit Ihrem Drucker arbeiten, haben Sie sicher schon einmal
den Wunsch gehabt, eine Passage schmäler als den übrigen Text auszudrucken.
Vielleicht wollen Sie eine Tabelle oder Übersicht drucken, die 120 Zeichen
breit ist, oder mehr Informationen auf einer Seite unterbringen, oder
einfach Ihrem Schriftbild zu einem neuen Aussehen verhelfen. »Condensed«
ermöglicht es jetzt endlich auch auf MPS 801 kompatiblen Druckern (MPS 803,
VC 1525 und so weiter), die diese Option sonst nicht eingebaut haben, schmal
zu drucken. Als Sonderfunktionen sind nicht nur die inverse Schrift, sondern
auch Breitschrift und gesperrte Schrift verfügbar.

Laden Sie das Maschinenprogramm mit

LOAD "CONDENSED",8,8

und geben danach

NEW

ein. Jetzt kann mit

SYS 49152

die Schmalschrift am Drucker installiert werden. Sie ist bis zu einem Reset
verfügbar. Das Programm druckt schlanke Versionen der Zeichen mit den
Ascii-Codes 32 bis 95:

!"#$%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ[£]^

sowie das Leerzeichen, den Klammeraffen und den Pfeil nach links. Die
Grafikzeichen über 95 werden ganz normal gedruckt, Zeichen unter 32 werden
wie gewohnt behandelt. Um die Schmalschrift einzuschalten, müssen Sie ein
CHR$(1) zum Drucker schicken, CHR$(2) schaltet sie wieder aus. Dies wird so
verwendet, wie Sie es schon vom Ein- und Ausschalten der Breitschrift mit
CHR$(14) und CHR$(15) bei diesen Druckern kennen. Also zum Beispiel so:

OPEN1,4:PRINT#1,"NORMALE..."+CHR$(1)+"UND SCHMALSCHRIFT"+CHR$(2)

Die Schmalschrift bleibt ggf. auch nach dem Zeilenende aktiv. Condensed
benutzt darüberhinaus die gewohnten Druckercodes, um die reverse und doppelt
breite Schrift ein- und auszuschalten:

CHR$(1)    schmal ein
CHR$(2)    schmal aus
CHR$(18)   revers ein
CHR$(146)  revers aus
CHR$(14)   breit ein
CHR$(15)   breit aus

Ist die doppelt breite Schrift im Schmal-Modus aktiviert, passen nur noch 60
Zeichen in jede Druckerzeile, also weniger als im normalen Textmodus des
Druckers. Darüberhinaus können Sie auch gesperrt drucken. Dann wird der
Zeichenabstand leicht erhöht. So lassen sich einzelne Abschnitte
hervorheben.

CHR$(3)    gesperrt ein
CHR$(4)    gesperrt aus

Allerdings funktioniert die gesperrte Schrift nur im Schmalschriftmodus.
Ansonsten lassen sich die Modi beliebig kombinieren. Die Schmalschrift hat
nur bei der Ausgabe auf das Gerät Nr. 4 (Drucker) Wirkung, am Bildschirm
z.B. läuft alles ganz normal. Nun wollen wir ein Programmlisting in
Schmalschrift ausgeben:

OPEN1,4:CMD1,CHR$(1):LIST

gefolgt von

PRINT#1,CHR$(2):CLOSE1

Sie können natürlich auch z.B. ein gesperrt gedrucktes Listing ausgeben
lassen. Dazu hängen Sie an CHR$(1) einfach noch +CHR$(3) an. Ebenso
funktioniert es mit der Umschaltung auf reverse oder doppelt breite Schrift,
oder eben mit Kombinationen.

Schmale und normale Schrift läßt sich auch innerhalb einer Druckzeile
beliebig umschalten. Etwa gibt folgende Zeile den gesamten Zeichensatz der
Schmalschrift aus:

OPEN1,4:FORI=32TO95:PRINT#1,CHR$(1)CHR$(I)CHR$(2)" = "CHR$(I):NEXT

Die CHR$-Codes lassen sich auch einfach innerhalb von Anführungszeichen mit
CTRL-Kombinationen erreichen:

CHR$(1)  = <CTRL A>
CHR$(2)  = <CTRL B>
CHR$(3)  = <CTRL C> oder <RUN STOP>
CHR$(4)  = <CTRL D>
CHR$(18) = <CTRL R> oder <CTRL 9>
CHR$(146)= <CTRL 0>
CHR$(14) = <CTRL N>
CHR$(15) = <CTRL O>

Intern funktioniert Condensed wie folgt: Nach dem Start mit SYS 49152 wird
der CHROUT-Vektor auf eine neue Routine verbogen. Jedesmal, wenn nun ein
Zeichen ausgegeben wird, übergibt der C64 die Kontrolle an die Erweiterung.
Diese prüft zunächst, ob die Ausgabe auf den Drucker erfolgt. Wenn nicht,
wird an die gewöhnliche Ausgaberoutine übergeben. Ansonsten geht es in der
Condensed-Routine weiter. Ist die Schmalschrift aktiviert, prüft das
Programm, ob der Zeichencode zwischen 32 und 95 liegt. Falls ja, wird das
Zeichen im Grafikmodus des Druckers in einer Matrix von 4x7 (normale
Zeichen: 6x7) aus einer im Programm eingebauten Zeichensatztabelle
ausgegeben. Zeichen, die außerhalb des erlaubten Bereiches liegen, werden
normal ausgegeben. Falls es sich um Steuerzeichen handelt, verändert das
Programm ggf. die Flags für revers, breit, schmal oder gesperrt.

Ein Beispiel zur Anwendung gibt das Demoprogramm. Es gibt eine ziemlich
große Tabelle, die aus einem Kalkulationsprogramm wie »Tabula Rasa« stammen
könnte, schmal aus. Dabei kommt übrigens auch die an anderer Stelle im Buch
enthaltene Using-Routine zur Anwendung.








Liebesgrüße von Diskette: »Message-Maker«

Mit Hilfe des Programmes »Message-Maker« verfassen Sie einfach ansprechende
Computerbriefe. Mit dem Editor wird der Text, der später erscheinen soll,
geschrieben. Dabei werden auch alle Cursorbewegungen, Verbesserungen,
Farbwechsel usw. gespeichert und später angezeigt. Verschiedene
Wiedergabe-Geschwindkeiten sind einstellbar, Zusatzfunktionen wie Pause, auf
Taste warten, Cursor-Position speichern, Wiederholen von beliebig langen
Textteilen, Farbwechsel (auch Rahmen- und Hintergrundfarbe) sowie die
Verwendbarkeit beliebiger Zeichensätze und - auf Wunsch - Musikstücke im
Hintergrund machen den dennoch einfach zu bedienenden »Message-Maker«
interessant.

Vor der Arbeit

mit dem Message-Maker müssen Sie sich eine eigene Message-Maker-Diskette
zusammenstellen. Diese wird »Systemdisk« genannt und beinhaltet das
Hauptprogramm »MESSAGE-MAKER«, das Systemfile »MESS.KOPF«, einen beliebigen
Zeichensatz, der den unten angegebenen Bedingungen entsprechen muß unter dem
Namen »MESS.FONT« und, bei Bedarf, ein Musikstück. Verwenden Sie dazu ein
beliebiges Datei-Kopierprogramm und kopieren sich die genannten Files von
der Diskette zum Buch.

Das Zeichensatzfile

muß den Namen »MESS.FONT« haben, neun Blocks lang sein und ab Adresse 12288
($3000) beginnen. Die Zeichen sind im üblichen C64-Format gespeichert. Da
ohne dieses File ein vernünftiges Arbeiten mit dem Message-Maker nicht
möglich ist, können leider nicht die eingebauten C64-Systemzeichensätze
verwendet werden. Dazu müßten Sie diese Fonts aus dem Char-ROM auslesen und
auf Disk als »MESS.FONT« abspeichern. Nicht vergessen, die Startadresse
(z.B. mit einem Diskmonitor oder dem Programm »Chartranposer«) auf $3000 zu
ändern! Eine Diskette mit 20 geeigneten Zeichensätzen ist gegen eine geringe
Gebühr beim Autor erhältlich.

Falls Sie verschiedene Zeichensätze aus einer Bibliothek verwenden möchten,
müssen Sie den gewünschten Zeichensatz mit dem Rename-Kommando der Floppy in
»MESS.FONT« umbenennen.

Das Musikstück

das während der Wiedergabe des Textes im Hintergrund ertönen soll, ist
optional. Wollen Sie es verwenden, speichern Sie es unter dem Namen
»MESS.MUSIC« nicht auf die Systemdiskette, sondern auf die Diskette, auf der
die fertige Message gespeichert wird. Dieses File muß nach dem absoluten
Laden mit SYS 49152 gestartet werden können und soll dann die Musik im IRQ
abspielen. Die nicht gecrunchten Files, die mit dem »Soundmonitor« aus der
64'er erzeugt werden, erfüllen diese Bedingungen.

Bedienung des Message-Makers

Legen Sie die Systemdiskette ein. Laden Sie das Programm mit dem Befehl

LOAD "MESSAGE-MAKER",8

und starten es mit

RUN

Die Benutzerführung erfolgt in Englisch. Die Aufforderung, die Systemdisk
einzulegen, bestätigen Sie mit der Leertaste. Es werden nun die Files
»MESS.KOPF« sowie »MESS.FONT« nachgeladen. Wenn Sie danach den Message-Maker
unterbrechen, ist der Neustart nicht mehr mit RUN, sondern nur noch mit

POKE 49152,76 : SYS 49152

möglich. Siehe dazu auch den Abschnitt »erste Hilfe« weiter unten.

Hauptmenü

Es stehen drei Funktionen zur Verfügung, die mit den Funktionstasten
abgewählt werden:

<f1> write: Text eingeben, alter Text wird gelöscht
<f3> quit: Programm beenden (Reset, Neustart wie oben beschrieben)
<f5> help: Anzeige aller Sondertastenfunktionen im Editor. Diese Tafel kann
später von Editor aus nicht aufgerufen werden!

Der Editor

Die Eingabefunktion des Textes (Editor) wird bedient wie der normale
Basic-Editor. Beachten Sie, daß alles, was Sie hier eingeben, später in eben
dieser Form wiedergegeben wird. Schreiben Sie also ein Wort und löschen es
mit der Taste <DEL> oder <f1> und <D> gleich wieder, so erscheint es bei der
Wiedergabe, um danach gleich wieder gelöscht zu werden. Ebenso werden alle
Cursorbewegungen sowie die Editorfunktionen Bildschirm löschen, Cursor home,
revers on/off, Cursorfarbe ändern gespeichert.

Sollte nach dem Aufruf des Editors (<f1> im Hauptmenü) nur grafischer Unsinn
anstelle von Buchstaben auf dem Bildschirm erscheinen, wenn Sie eine Taste
drücken, konnte das File »MESS.FONT« nicht geladen werden. Kontrollieren
Sie, ob es sich auf der Systemdiskette befindet, einen vernünftigen
Zeichensatz enthält und die übrigen oben genannten Bedingungen erfüllt.

Der Kommando-Modus

Drücken Sie im Editor die Taste <f1>, ertönt ein Pfeifton. Der Befehls- oder
Kommando-Modus ist aktiv. Wenn Sie jetzt eine der folgenden Tasten drücken,
wird nicht das entsprechende Zeichen ausgegeben, sondern ein Kommando
aufgeführt.

<RUN STOP>: Beenden des Kommando-Modus, Rückkehr in den Editor
<K>: Key-Wait; später bei der Wiedergabe wird an dieser Stelle auf einen
Tastendruck gewartet
<P>: Pause; später bei der Wiedergabe wird hier eine Pause eingelegt
<D>: Del 10; die letzten zehn Zeichen werden gelöscht (als ob Sie zehnmal
die <DEL>-Taste drücken)
<S>: Show; der bisher eingegebene Text wird in der Form ausgegeben, in der
er später in der Message erscheinen wird. Nach dem Textende gelangen Sie
wieder in den Editor
<A>: Abort; hiermit können Sie den Editor verlassen. Eine Sicherheitsabfrage
erscheint rechts oben (»SURE?«). Drücken Sie auf die Taste <J> oder <Y>,
erscheint das Hauptmenü wieder, der Text geht verloren (siehe unten »Erste
Hilfe«). Haben Sie den Text noch nicht gespeichert, geben Sie stattdessen
<N> ein, um wieder in den Editor zu gelangen
<1>: Frame; die Farbe des Bildschirmrahmens wird verändert. Diese Änderung
wird auch bei der Wiedergabe an dieser Stelle im Text durchgeführt und kann
beliebig oft wiederholt werden
<2>: Background; die Farbe des Texthintergrundes wird verändert. Diese
Änderung wird auch bei der Wiedergabe an dieser Stelle im Text durchgeführt
und kann beliebig oft wiederholt werden
<V>: Velocity; rechts oben erscheint die Meldung »SPEED« und die aktuelle
Geschwindigkeit. Stellen Sie jetzt mit dem Cursortasten eine neue
Wiedergabe-Geschwindigkeit ein (255 = sehr schnell, 1 = sehr langsam, 206 =
Wert nach dem Start der Wiedergabe) und drücken <RETURN>. Diese Änderung hat
keinen Einfluß auf den Editor, sie wird bei der Wiedergabe ab dieser Stelle
im Text ausgeführt und kann beliebig oft wiederholt werden. Eine wichtige
Textpassage kann so zum Beispiel nicht nur durch eine besondere Farbe,
sondern auch durch verminderte Geschwindigkeit kenntlich gemacht werden.
Umgekehrt ist es möglich, komplizierte Bildschirmmasken, etwa später
auszufüllende Formulare oder Blockgrafiken, in hoher Geschwindigkeit
aufzubauen, um so die Geduld des Lesers nicht unnötig zu strapazieren.
<=>: store/recall Cursor; drücken Sie im Kommando-Modus die Taste <=> das
erste Mal, wird die aktuelle Position des Cursors auf dem Bildschirm
gespeichert und der Editor wieder gestartet. Drücken Sie danach im
Kommando-Modus die Taste <=> erneut, wird der Cursor an die zuvor gemerkte
Stelle gesetzt. Dies kann beliebig oft wiederholt werden; beim nächsten
Druck auf <=> im Kommando-Modus wird wieder gespeichert.
<*>: set start/end repeat; mit dieser Funktion können Sie bei der Wiedergabe
beliebig lange Textteile beliebig oft wiederholen lassen. Dazu drücken Sie
am Anfang der Passage die Taste <f1> (Kommando-Modus) und die Taste <*>.
Damit ist der Anfang festgelegt. Jetzt geben Sie den zu wiederholenden Text
ein. Am Ende drücken Sie wieder im Kommando-Modus die Stern-Taste. Oben
rechts erscheint »Series« und die Zahl 002. Wählen Sie jetzt mit den
Cursortasten, wie oft die Passage wiederholt werden soll (zwischen 2 und 255
Mal). Drücken Sie dann <RETURN>. Die markierte Textpassage wird nicht im
Editor, sondern nur bei der Wiedergabe so oft wiederholt, wie Sie es
vorgegeben haben. Diese Funktion kann beliebig oft wieder angewendet werden,
Verschachtelungen sind nicht möglich.
<Pfeil nach links>: Save; wenn Sie mit dem Schreiben des Textes fertig sind,
sollten Sie ihn als Message speichern. Dazu drücken Sie im Kommando-Modus
die Taste <Pfeil nach links>. Jetzt erscheint das Untermenü

Text speichern

Hier haben Sie die Wahl zwischen:
<f1> save to disk  und
<f3> show text, return to editor

Wenn Sie diese Funktion nur versehentlich aufgerufen haben, drücken Sie
jetzt <f3>. Der komplette Text wird angezeigt und der Editor wieder
gestartet. Drücken Sie <f1>, um den Text (die Message) zu speichern,
erscheint die Frage, was bei der Wiedergabe nach dem Textende passieren
soll:

<f1> reset
<f3> restart
<f5> ready

Drücken Sie <f1>, wird nach der Anzeige der Message ein Reset ausgelöst.
Betätigen Sie <f3>, startet die Message am Ende von vorn (endlos). Wollen
Sie, daß der Computer nach der Anzeige der Message in den Basic-Modus
zurückkehrt (Anzeige von READY.), betätigen Sie <f5>.

Jetzt wird die Message im Speicher stark verkürzt, indem wiederkehrende
Zeichen zusammengefaßt werden. Dies hat keinen sichtbaren Einfluß auf das
spätere Aussehen des Textes, spart aber u.U. einigen Speicherplatz auf
Diskette. Der Computer zeigt an, auf wieviel Prozent die Textlänge verkürzt
werden konnte.

Legen Sie nun die formatierte Diskette ein, auf der die fertige Message
gespeichert werden soll. Geben Sie sodann auf die Frage nach dem Namen,
unter dem die Message auf Diskette gespeichert werden soll, einem maximal 16
Zeichen umfassenden Namen ein und drücken <RETURN>. Typische Namen sind
»READ-ME«, »LIES MICH«, »HALLO«, »BITTE LESEN«, »INFO«, »MESSAGE«, »BRIEF«
und so weiter.

Daraufhin wird die Message auf der Diskette gespeichert. Danach erscheint
wieder das Hauptmenü des Message-Makers. Es ist nicht möglich, vom
Message-Maker aus einen gespeicherten Text in den Editor zu laden und dort
nachzubearbeiten.

Das Message-File

kann wie ein normales Basic-Programm mit dem Befehl LOAD "NAME",8 geladen
und mit RUN gestartet werden. Es erscheint nun ein kleiner Hinweis des
Message-Makers, der sinnvollerweise zum Abspielen des Disketten-Briefes
nicht benötigt wird. Jetzt wird das Zeichensatz-File »MESS.FONT« geladen.
Achten Sie also darauf, daß sich auch auf dieser Diskette dieses File
befindet, und daß es den oben genannten Bedingungen entspricht. Falls ein
Musikstück unter dem Namen »MESS.MUSIC« gespeichert ist, wird auch dieses
automatisch geladen und mit SYS 49152 gestartet, sonst ertönt keine Musik.

Nach dem Laden dieser Files wird die Message angezeigt. Am Textende erfolgt,
je nachdem, was Sie eingestellt haben, ein Reset, ein Neustart oder ein
Sprung in den Basic-Interpreter.

Erste Hilfe
Gültig nur für Version 1.0 des Message-Makers !

Falls der Editor versehentlich verlassen wurde (z.B. <f1>, <A>) oder ein
Reset ausgelöst wurde, kann der Text, falls noch kein neuer eingegeben
wurde, auf folgende Weise wieder zurückgeholt werden:

Ggf. Reset-Taster drücken. Um das Kopfprogramm wieder zu holen, von der
Systemdiskette das Programm »MESS.KOPF« laden. Textendezeiger (166/167) auf
das Byte hinter dem letzten Zeichen des Textes setzen. Dieses kann per
Monitor (z.B. SM-Kit) herausgefunden werden, der Text beginnt bei 16384 =
$4000). 166 enthält das Lowbyte, 167 das Highbyte der Adresse. Mit POKE
53272,31 den Zeichensatz wieder einschalten. Editor mit SYS 50490 wieder
starten (nur Version 1.0 des Message-Makers). Zur Richtigstellung aller
Zeiger den Text ansehen (<f1>, <S>). Während der Text gezeigt wird, prüfen,
ob es noch Fehler gibt. Wenn ja, warten bis Textende (!), dann mit <RESET>
aussteigen, den Fehler berichtigen (Monitor) und wie oben gezeigt
fortfahren. Wenn alles in Ordnung ist, weiterschreiben.

Ändern der Standard-Wiedergabe-Geschwindigkeit im Kopffile (Head Version
1.1)

POKE 2232,X (normal = 50, sehr schnell = 1, sehr langsam = 255)










         
Hätten Sie's gewußt?

Die Trickkiste

Interessante Tips und Kniffe, die nicht im Handbuch stehen

Alle diejenigen, die bisher der Meinung waren, ihren Computer wirklich bis
aufs letzte Bit zu kennen, sollten aufmerken. Hier stellen wir Ihnen einige
Kniffe und Tips vor, die es wirklich »faustdick hinter den Ohren haben«.
Wir verraten Besonderheiten der Basic-Befehle, die nicht im Handbuch stehen.
Das eine oder andere »Aha-Erlebnis« ist sicher auch für Sie dabei! Weiter
hinten kommen dann noch »herkömmliche« Tips und Tricks, die jeder
Einsteiger nützlich findet.

Alle Hinweise gelten, soweit nicht anders angegeben, für alle Acht-Bit
Computer von Commodore, also neben C 64 und C 128 auch für VC 20, PLUS/4, C
16, C 116, PET 2001 und die alten Geräte der CBM-Reihe.

Strings PEEKen

Es stimmt wirklich. Dem Commodore 64 ist es egal, ob eine Zahl oder ein
String zwischen die Klammern der PEEK-Funktion gesetzt wird. Sie können ohne
weiteres PRINT PEEK(A$) schreiben, ohne eine Fehlermeldung zu erhalten. Auch
PRINT POS(A$) besitzt diese syntaktische Immunität.

Der Wert, der zurückgegeben wird, hängt von der letzten numerischen
Operation ab. Beispielsweise wirkt X=53280:PRINT PEEK(A$) wie PRINT
PEEK(53280), ermittelt also die Farbe des Bildschirmrahmens.

Sie können auch ein Literal zwischen die Klammern setzen, so wie bei PRINT
PEEK("HALLO"), allerdings ergibt dieser Ausdruck immer den Wert der
Speicherzelle 0. Wenn Sie einen PEEK("STRING") dreimal in einer Zeile
ausführen, beschwert sich das System dann aber doch mit einem ?OUT OF MEMORY
ERROR. Aber was soll man auch anderes erwarten, wenn man Buchstaben dort
verwendet, wo doch eigentlich Zahlen hingehören.

Die erste Dimension

Im Commodore-Basic sind bei dimensionierten Variablen elf Elemente Standard.
Sie können ja zum Beispiel den Befehl PRINT A(10) oder A(10) = 19 verwenden,
ohne vorher das Array A dimensioniert zu haben, und erhalten trotzdem keinen
?BAD SUBSCRIPT ERROR. Das funktioniert, weil Basic beim Start alle Arrays,
egal ob String oder numerisch, mit dem Dimensionswert 10 (die Zählung
beginnt bei Null, also elf Elemente) vorbelegt.

Das Kuriose dabei: Nachdem einer der beiden obigen Befehle abgearbeitet
wuree, bewirkt DIM A(10) einen ?REDIM'D ARRAY ERROR, obwohl Sie doch noch
gar kein Array dimensioniert haben!

Der nächste, bitte!

Der Befehl NEXT, der FOR..NEXT-Schleifen abschließt, wird gewöhnlich mit nur
einer Variable versehen. Sie können ihn aber auch nutzen, um mehrere
Schleifen gleichzeitig zu schließen. Die Folge NEXT A:NEXT B:NEXT C läßt
sich einfach zusammenfassen zu NEXT A,B,C. Neben dem Zeitvorteil bei Eingabe
und Ausführung des Programmes werden Programme so auch verkürzt.

Was ist CMD?

Vielleicht kennen einige von Ihnen schon den CMD-Befehl, der dazu dient, die
Ausgabe auf ein neues Peripheriegerät, etwa den Drucker, umzuleiten. Klar,
um ein Programmlisting auf dem Drucker auszugeben, schreiben Sie einfach:
OPEN4,4:CMD4:LIST. Die Frage ist jetzt: Was bedeutet die Abkürzung CMD? Es
ist ganz einfach: Die Bezeichnung steht für das englische Wort »CHANGE MAIN
DEVICE«, also »Haupt-Gerät umschalten«.

Ein lästiger Nebeneffekt: Wird ein GET-Befehl ausgeführt, so werden alle bis
dahin wirksamen CMD-Befehle wieder aufgehoben. Das kann, wenn man es nicht
weiß, Ursache für unerwartete Programmierfehler sein.

Weiter, immer weiter

Der Befehl CONT kann nach einem Programmabbruch mit der RUN/STOP-Taste oder
den Befehlen END oder STOP dazu verwendet werden, ein Programm an der
Abbruchstelle fortzusetzen, wenn zwischendurch keine Änderungen am Programm
durchgeführt oder Fehlermeldungen ausgegeben wurden. Was aber passiert, wenn
CONT innerhalb eines Programmes zu finden ist? Ganz einfach: Dann wird CONT
zur Endlosschleife. Übrigens unterscheiden sich die Befehle END und STOP
wirklich nur dadurch, daß bei END die Meldung BREAK IN xxxx unterbleibt.
Sonst sind diese Befehle identisch und austauschbar.

Verewigt in Silizium

Maler pflegen ihre Namen in die Ecke der Bilder zu schreiben, »Vandalen«
sprühen ihre Namen auf Wände, ein jeder Simpel schreibt seinen Namen in
jeden Winkel, Programmierer und Hardware-Designer verewigen sich im ROM.
Wenn Sie einen C 128 besitzen, geben Sie doch einmal ein: SYS 32800,123,45,6
(leicht zu merken). Beim C 64 gibt es diese Art von Impressum leider nicht.

Wieviel ist ein Punkt wert?

Ja, wieviel denn? Nichts! Oder, besser gesagt: Null. Immer, wenn die Ziffer
Null allein verwendet wird, kann man sie durch einen Punkt ersetzen. Basic
führt Befehle mit dem Punkt sogar schneller aus als mit der Null. Anders
gesagt,

10 POKE 53281,.:POKE 53281,1:GOTO 10

läuft schneller als die gleichbedeutende Zeile

10 POKE 53281,0:POKE 53281,1:GOTO 10

DATA-Tip

Nuller in DATA-Zeilen können auch einfach weggelassen werden. Das spart ein
wenig Speicherplatz und Tipp-Arbeit. Statt

10 DATA 34,0,2,45,0,0,23,0,0,0,2

kann man auch schreiben:

10 DATA 34,,2,45,,,23,,,,2

Ebenso lassen sich die "" bei Leerstrings in DATAs einsparen. Bei Strings
gibt es noch eine Besonderheit zu beachten: Sollen geSHIFTete Buchstaben in
DATA Verwendung finden, müssen die Texte in Anführungszeichen gesetzt
werden, da der Interpreter sie sonst in Tokens wandelt. Sonst können die
Anführungszeichen wegfallen.

Inkompatible Zwillinge

Jeder Programmierer kennt den Befehl GOTO, der den Programmablauf an einer
bestimmten Zeile fortsetzt. Wußten Sie, daß der Befehl GOTO bzw. GOSUB ohne
eine Zahl dahinter so wirkt wie GOTO 0 bzw. GOSUB 0? Dies kann man nutzen,
wenn es um jedes Byte geht, etwa bei Einzeilern. Außerdem kann GOTO in zwei
separate Wörter getrennt werden: Also nicht GOTO 20, sondern GO TO 20. (Wenn
Sie es nicht glauben, probieren Sie es aus! Auch wenn das im Englischen
grammatikalisch eigentlich korrekter ist, wird GO TO so gut wie nie
verwendet, und das aus gutem Grund. GO TO belegt nicht nur im Speicher zwei
Bytes mehr (eines für das Leerzeichen, eines für das zusätzliche Token für
TO), sondern ist auch gar nicht voll kompatibel zu seinem kompakten Bruder
GOTO.

Beispielsweise ist gegen ON A GOTO 100, 200, 300 nichts einzuwenden, während
ON A GO TO 100, 200, 300 nur einen ungläubigen ?SYNTAX ERROR provoziert. Mit
dem GOTO, das ja direkt hinter IF verwendet werden darf, ist es das selbe:
IF A=4 GOTO 100 macht seine Sache einwandfrei, IF A=4 GO TO 100 ist zum
Scheiteren verurteilt. Der Befehl GOSUB darf nicht zerlegt werden.

GOTO auf Trab gebracht

Generell gilt, daß der Aufruf von Unterprogrammen mit GOSUB schneller ist
als mit GOTO. Häufig benutzte Unterprogramm gehören an den Programmanfang,
müssen dann allerdings zuerst mit einem GOTO umgangen werden. Beispiel: Die
folgende Routine beginnt ab Zeile 2, das Hauptprogramm kann wegen Zeile 1
dennoch mit RUN gestartet werden:

1 GOTO 10
2 PRINT "BITTE TASTE DRUECKEN!"
3 POKE 198,0:WAIT 198,1:POKE 198,0
4 RETURN
10 hier beginnt das Hauptprogramm

Malnehmen für Könner

Auch bei Multiplikationen läßt sich ein Geschwindigkeitsgewinn erzielen,
indem die größere der beiden Zahlen, die malgenommen werden sollen, vor den
Stern gestellt wird. PRINT 3463 * 2 ist also schneller als PRINT 2 * 3463,
obwohl mathematisch gleichbedeutend (kommutativ). Nicht nur aus
Geschwindigkeitsgründen sollten Sie die Potenzfunktion soweit als möglich
vermeiden. Geben Sie einmal ein PRINT 7^2, Sie werden sich wundern! Besser
ist PRINT 7*7.

Einer fehlt!

Die Funktion MID$() benötigt drei Parameter, um aus einem String einen
bestimmten Teil herauszuschneiden, oder nicht? Nein! Es genügen auch zwei
Parameter. Wird der dritte Wert weggelassen, ergibt MID$() einfach alle
Zeichen beginnend bei dem, das durch den zweiten Parameter angegeben wird.
Der Befehl PRINT MID$("TESTPROGRAMM",5) gibt »PROGRAMM« aus. Diese Kurzform
ist dann nützlich, wenn Sie ein RIGHT$ ausführen möchten, aber nicht wissen,
wie viele Zeichen der Endstring enthalten soll, nur, ab wo im Quelltext er
beginnt.

Übrigens steht im Handbuch, daß beide Parameter bei MID$ von 0 bis 255
liegen dürfen. Das ist verkehrt. Der erste Parameter darf nicht Null sein,
sonst erscheint ein ?ILLEGAL QUANTITY ERROR.

Professionell Nachladen

Gewöhnlich hat das Nachladen eines Maschinenprogrammes von einem
Basicprogramm aus mit dem Befehl LOAD "CODE",8,1 einen lästigen Nebeneffekt:
Das Basicprogramm wird von vorn gestartet. Diesen Effekt vermeiden Sie,
indem Sie stattdessen schreiben: SYS 57812 ("CODE"),8,1:POKE 780,0:SYS
65493. Kurz eine Erklärung: Der erste SYS-Befehl setzt die File-Parameter,
also den Namen, die Geräte- und Sekundäradresse. POKE 780,0 sagt dem System,
daß geladen, kein VERIFY ausgeführt werden soll. Der nächste SYS-Befehl
schließlich ruft die LOAD/VERIFY-Routine auf.

Dieser Trick ist nur für Besitzer eines C 64 interessant, auf dem C 128 bzw.
C 16 steht ohnehin der BLOAD-Befehl zur Verfügung.

Joker

Mit Hilfe der »Joker« »*« und »?« läßt sich die Directory-Ausgabe genauer
spezifizieren. Um beispielsweise ein Directory zu erhalten, in dem nur
PRG-Files enthalten sind, schreibt man einfach:

LOAD "$0:*=P",8
LIST

Sie können das P durch ein S, U oder R ersetzen, und erhalten dann alle SEQ,
USR bzw. REL-Files.

Wenn Sie ein Programm laden wollen, aber nur den Anfang des Filenamens
kennen, schreiben Sie

LOAD "FILENA*",8

Das wissen Sie schon. Wenn ein Filename mit dem Sternchen endet, erhält das
DOS (Floppy-System) den Auftrag, File(s) zu bearbeiten, deren Name mit der
Vorgabe vor dem Stern beginnt. Ebenso ist es möglich, unbekannte einzelne
Zeichen im Namen durch das Fragezeichen zu ersetzen:

LOAD "FILENA?E",8

Aber wußten Sie schon, daß diese Spielereien auch beim Directory
funktionieren? Beispielsweise wünschen Sie einen Ausdruck aller Files, die
mit HAT beginnen und ein E als fünften Buchstaben haben:

LOAD "$:HAT?E*",8
LIST

Datenschutz

Jeder hat hin und wieder den Wunsch, ein Programm so auf Diskette
abzuspeichern, daß nur er es wieder laden kann, sonst niemand. Hier sind
zwei verschiedene Tricks, die es auch für den fortgeschrittenen Anwender
schwer machen, ein Programm zu laden. Beide arbeiten auf allen
1541-kompatiblen Laufwerken.

Erstens, ein Basicprogramm läßt sich durchaus so speichern, daß es im
Directory als SEQ oder gar als USR-File erscheint. Dazu hängen Sie nur den
gewünschten Filetyp an den Filenamen an:

SAVE "BEISPIEL,S",8

oder

SAVE "BEISPIEL,U",8

Wenn Sie jetzt das Directory begutachten, werden Sie feststellen, daß aus
Ihrem PRG-File im ersten Fall ein SEQ-File geworden ist, im zweiten Fall ein
USR-File. Nun probieren Sie mal, das File mit

LOAD "BEISPIEL",8

wieder zu laden. Denkste! Ein ?FILE NOT FOUND ERROR erscheint, und die rote
Floppy-Lampe blinkt. Das Programm kann nur auf die selbe Weise wieder
geladen werden, in der es gespeichert wurde, also mit

LOAD "BEISPIEL,S",8

oder

LOAD "BEISPIEL,U",8

je nach Filetyp.

Noch gemeiner wird es, wenn Sie das Programm mit einem Nullbyte im Filenamen
speichern:

SAVE CHR$(0)+"TESTNAME",8

Im Inhaltsverzeichnis erscheint der Name stark verstümmelt, zusammen mit
einer völlig falschen File-Länge, so um die 10000 Blocks. Natürlich ist das
File nicht wirklich so groß. Das Programm kann nun nur der laden, der den
Kniff kennt:

LOAD CHR$(0)+"TESTNAME",8

Anders ist nichts zu machen!

Struktur ist alles!

Basic ist wirklich nicht die Sprache, für die sich Freunde von
strukturierter Programmierung entscheiden - weit davon entfernt! Aber was
bleibt dem Einsteiger auf dem C 64 anderes übrig als Basic? Dennoch soll
hier ein Tip nicht fehlen, wie man Basicprogramme zumindest künstlich etwas
besser strukturiert. Die folgenden Befehlszeilen sehen nicht besonders
übersichtlich aus:

10 FORI=1TO20:FORJ=1TOI:A=4:GOSUB400:NEXTJ,I

Syntaktisch ist nichts gegen die Zeile einzuwenden. Wer Wert auf Struktur
legt, schreibt stattdessen:

10 FOR I=1 TO 20
20 FOR J=1 TO I
30 A=4
40 GOSUB 400
50 NEXT J
60 NEXT I

Jedem Befehl wird eine eigene Zeile gegönnt. Jetzt wäre es schön, wenn man
noch die Schleifen entsprechend einrücken könnte. Das Problem dabei ist nur,
daß der Interpreter Leerzeichen am Anfang einer Zeile streicht. Dem helfen
wir ab, indem wir einen Doppelpunkt an den Zeilenanfang stellen:

10 FOR I=1 TO 20
20 :   FOR J=1 TO I
30 :       A=4
40 :       GOSUB 400
50 :   NEXT J
60 NEXT I

Der Nachteil soll nicht verschwiegen werden: Dieser Programmteil wird nicht
so schnell abgearbeitet, wie oben. Dafür ist er auch für fremde
Programmierer einfach und übersichtlich zu durchschauen.

Vorsicht, Falle!

Eine Falle besonderer Art birgt der GET-Befehl, wenn er auf numerische
Argumente angewandt wird. Etwa für eine Menüabfrage würde sich folgendes
anbieten:

100 GET A
110 IF A=0 THEN 100

Ab Zeile 120 würde man dann je nach A in die einzelnen Menüpunkte
verzweigen. Zeile 100 holt die gedrückte Taste nach A (es soll ja eine
Zifferntaste gedrückt werden), in Zeile 110 wird diese Schleife
weitergeführt, falls noch kein Tastendruck erfolgte.

Diese Konstruktion funktioniert, solange Sie nur Zifferntasten drücken. Sie
bricht aber in sich zusammen, will sagen, ergibt einen ?SYNTAX ERROR, wenn
ein unvorsichtiger Anwender stattdessen eine Buchstabentaste drückt. Sicher
keine Auszeichnung für den Programmierer. Sie sollten GET daher
grundsätzlich nur für Strings anwenden, die dann mit VAL in einen
numerischen Wert gewandelt werden. Im Beispiel muß nur Zeile 100 geändert
werden:

100 GET A$:A = VAL(A$)

Jetzt wartet das Programm auf Zifferntasten und steigt auch dann nicht aus,
wenn Sie eine alphanumerische Taste drücken.

INPUT-Bug

Der INPUT-Befehl enthält leider einen Fehler. Die Prompts (Text in
Anführungszeichen direkt nach INPUT) sollten nicht in die nächste
Bildschirmzeile hineinreichen, da er sonst aufgrund eines Fehlers in den
ROMs der älteren C 64-Modelle Teil der Eingabe wird.

Der Computer liest bei INPUT übrigens alles, was rechts vom Fragezeichen
steht. Wenn sich also Grafik oder Text auf der selben Zeile rechts vom
Fragezeichen befindet, wird dieser Bildschirminhalt zusammen mit den
eingegebenen Daten gelesen und verursacht so ziemlich sicher Fehler. Stellen
Sie vor INPUT also fest, daß der rechte Teil der Zeile gelöscht ist.

Der Code von Nichts

Basic-Programmierer verwenden die Funktion ASC() dazu, den ASCii-Code eines
Strings zu ermitteln. Bei den Commodore-Rechnern hat ASC allerdings eine
Schwäche: Sie ergibt einen ?ILLEGAL QUANTITY ERROR, wenn der String des
Arguments leer ist. Verständlicherweise, denn ein Leerstring hat auch keinen
Code. Dumm ist das nur, wenn beispielsweise ein File byte-weise gelesen und
in ASCii-Codes zerlegt wird:

10 OPEN 2,8,2,"FILENAME,S,R"
20 GET#2,A$
30 A=ASC(A$)

Hier tritt in Zeile 30 eine Fehlermeldung auf, wenn in Zeile 20 ein Nullbyte
gelesen wird. Der GET#-Befehl ergibt in diesem Fall nämlich einen
Leerstring. Hier kann Abhilfe geschaffen werden, indem wir sicherstellen,
daß die ASC-Funktion mit einem CHR$(0) gefüttert wird, wenn A$ leer ist.
Dazu ändern wir Zeile 30 wie folgt:

30 A=ASC(A$+CHR$(0))

Ist A$ leer, ergibt die Addition mit CHR$(0) den gewünschten String:
CHR$(0). Ist A$ nicht leer, stört die String-Addition nicht weiter, da ASC
nur das erste Zeichen des Parameter-Strings berücksichtigt.

Alles relativ

Mit LOCATE positioniert man beim C 128 den Grafik-Cursor an eine Stelle des
Hires-Bildschirms, DRAW zeichnet Punkte. Interessanterweise lassen sich
beide Befehle auch relativ adressieren. Dazu wird ein Pluszeichen vor die
Parameter gesetzt. LOCATE +20,+50 bewegt den Grafik-Cursor von seiner
aktuellen Position um 20 Pixel nach rechts und 50 Pixel nach unten. DRAW
1,+40,+60 zeichnet gemessen von der aktuellen Position des Stiftes einen
Punkt 40 Pixel weiter rechts, 60 Pixel weiter unten. Negative Werte führen
zu Fehlermeldungen.

Alles Zufall?

Die Basic-Funktion RND liefert Pseudo-Zufallszahlen im Bereich zwischen 0
und 1. Setzt man N=RND(X), so sind die Werte N abhängig vom Argument X der
Zufallsfunktion. Drei mögliche Erzeugungsarten sind vorgesehen:

X größer 0: Der genaue Wert des positiven Zahlenwertes X spielt keine Rolle,
RND(2) und RND(1) ergeben die gleiche Zufallszahlenreihe, da hier ein fester
Zahlenwert als »Keinzahl« (»Samen«) verwendet wird. Der neue Zufallswert
wird nach einem einfachen Algorithmus aus dem alten gebildet. Der erste
Samen wird nach dem Einschalten auf 0,811 635 157 gesetzt.

X = 0: Dieses Argument bewirkt, daß die Zufallszahlen abhängig vom Timer der
CIA1 gebildet werden. Auch hier ist die erzeugte Zahlenreihe nicht wirklich
zufällig.

X kleiner 0: Für negative Argumente ist die Zufallszahl eine Funktion des
Arguments. Das heißt, daß hier bei jedem Aufruf eine neue Keimzahl gebildet
wird. Bei der Verwendung der Systemzeit TI etwa wird stets in Abhängigkeit
von TI ein neuer Samen gebildet: N=RND(-TI).

16 Funktionstasten abfragen

Mit einem genialen Trick lassen sich per Programm bis zu 16 Funktionstasten
des C 64 abfragen. Wir kommen dabei ohne umständliche IF..THEN-Abfragen aus.
Definieren Sie nur am Anfang Ihres Programms die Funktion

10 DEFFNA(X)=(X > 2)*(X < 7)*(((X-3-(X < 4)*4)*2)+(Y=0 OR Y=2))-(Y > 1)*8)

An entsprechender Stelle im Programm steht dann die Zeile

100 X=PEEK(197):Y=PEEK(653):IFFNA(X)=0 THEN 100
110 weiter im Programm

Wurde eine Funktionstaste gedrückt, macht der Computer mit Zeile 110 weiter.
In X erhalten Sie nun bis zu 16 verschiedene Werte, die für folgende
Kombinationen stehen:

(f 1), (f 3), (f 5), (f 7) allein
(f 2), (f 4), (f 6), (f 8) mit (SHIFT)
(f 9), (f11), (f13), (f15) mit (CBM)
(f10), (f12), (f14), (f16) mit (CTRL)

Das Eine oder das Andere, aber nicht beides

Gute Basic-Programmierer können durch die Verwendung der logischen
Operatoren AND und OR ihre Programme verkürzen. Ein wichtiger Operator fehlt
dem C 64 allerdings: Das ausschließende Oder (exclusive or, EOR). Bei AND
ist das Ergebnis 1, wenn beide Operanden 1 sind. Bei OR erscheint die 1,
wenn einer der beiden Operanden 1 ist. Was fehlt, ist die EOR-Verknüpfung,
die eine 1 liefert, wenn genau ein Operand 1 ist, nicht aber beide.

EOR läßt sich aber mit AND und OR simulieren:

X = (A OR B) - (A AND B)

X ist das Ergebnis der bitweisen EOR-Verknüpfung von A und B.

Vergiß mein nicht!

Das Problem: In einem Basicprogramm soll der Wert einer Variable auch über
den RUN-Befehl hinaus erhalten bleiben. Denken Sie an ein Basic-Spiel, bei
dem der Highscore trotz Neustart mit RUN gespeichert werden muß. Die Lösung:
Wir POKEn den Wert in eine unbenutzte Speicherzelle und holen ihn uns nach
dem Start mit PEEK wieder. Das klappt bei ganzzahligen Werten von 0 bis 255.
Soll ein Highscore in der Variable H (ganzzahlig, von 0 bis maximal 65535)
gespeichert werden, kann er zunächst in High- und Lowbyte zerlegt werden:

200 HH=INT(H/256):HL=H-HH*256

Jetzt schreiben wir den Wert etwa in die unbenutzten Speicherzellen 701 und
702 und starten das Programm neu:

202 POKE 701,HL:POKE 702,HH:RUN

In der ersten Programmzeile lesen wir den Highscore aus:

10 H=PEEK(701)+256*PEEK(702)

Es tritt ein Problem auf: Nach dem Einschalten des Rechners stehen in 701
und 702 zufällige Werte, daher erhält die Variable HH bei ersten Start des
Programms einen Zufallswert. Wir sollten daher dem Computer auch melden, daß
sich gültige Werte in 701 und 702 befinden, etwa durch den speziellen Wert
123 in der Zelle 703, der dort nach dem Einschalten gewöhnlich nicht steht:

202 POKE 701,HL:POKE 702,HH:POKE 703,123:RUN
10 H=0 : IF PEEK(703)=123 THEN H=PEEK(701)+256*PEEK(702)

Sollte das Programm das erste Mal gestartet werden, erhält H den Wert 0,
sonst den Wert vor dem Neustart in Zeile 202.

Gleichungen lösen
Das folgende kleine Programm löst Gleichungen!

10 DEF FN A (X)=
20 DEF FN B (X)=
30 A=1:S=1
40 FOR T=1 TO 9
50 FOR I=A TO 10^7 STEP S
60 IF FNA(I) > FNB(I) THEN 80
70 NEXT I
80 A=I-S: S=S*.1: NEXT T
90 PRINT"X =";X

In Zeile 10 und 20 müssen die linke und rechte Seite der Gleichung
eingesetzt werden. Beispiel: Es soll die 27. Wurzel aus 5844 ermittelt
werden, also X hoch 27 = 5844. Die Zeilen lauten:

10 DEF FN A (X) = X ^ 27
20 DEF FN B (X) = 5844

Nach dem Start mit RUN erscheint das richtige Ergebnis: X=1.37882068. Auch
komplizierte Konstrukte wie (40+X)/40=40/X sind kein Problem:

10 DEF FN A (X) = (40+X)/40
20 DEF FN B (X) = 40/X

RUN

X=24.7213596

Hinweis: Die zu bearbeitenden Gleichungen dürfen keine quadratischen
Gleichungen sein. Das Ergebnis muß positiv und kleiner als 10 Millionen
(vgl. Zeile 50) sein. Ermittelt das Programm als Ergebnis -.1111111, so war
die Aufgabe nicht lösbar.

Autostart

Wollten Sie schon einmal ein Basicprogramm schreiben, das sich nach dem
Laden automatisch selbst startet? Hier ist die Methode, bei der Sie
keinerlei Zusatzprogramm benötigen, ein »Kochrezept«. Sie brauchen weder
Programmierkenntnisse in Basic oder gar Maschinensprache, noch ein Programm
abzutippen. Fügen Sie lediglich zu dem Programm, das einen Autostart
bekommen soll, in die allererste Zeile die beiden Befehle:

1 POKE 770,131:POKE 771,164

ein. Legen Sie jetzt eine formatierte Diskette mit genügend Platz ein und
geben im Direktmodus in einer einzigen Zeile folgendes ein:

POKE 770,113:POKE 771,168:POKE 44,3:POKE 43,0:SAVE "FILENAME",8

Nach dem Speichern wird der Computere abstürzen, das ist normal. Schalten
Sie das Gerät aus und wieder ein. Um nun den Autostarter zu laden, geben Sie
ein:

LOAD "FILENAME",8,1

Wichtig ist der Zusatz ,1 nach dem normalen Ladebefehl. Stören Sie sich
nicht daran, daß sich der Bildschirminhalt während des Ladens ändern wird,
das Programm wird nach dem Laden automatisch starten. Wollen Sie nicht, daß
man Zeichen auf dem Bildschirm sieht, während das Programm geladen wird,
fügen Sie einfach vor die oben angegebenen vier POKEs den Befehl

PRINTCHR$(147):

ein. Dabei wird der gesamte Bereich ab Speicherzelle 768 gespeichert, Sie
können dem Selbststarter also auch noch Nebenbedingungen mit auf den Weg
geben, die nach LOAD ...,8,1 automatisch aktiv werden: Zum Beispiel

POKE 808,239 (RUN STOP verriegeln)
POKE 792,193 (RESTORE-Taste verriegeln)
POKE 775,191 (LIST verriegeln)

Diese Befehle müssen vor dem speziellen Speichern wie oben zu sehen
eingegeben werden.

Die Notbremse

Fast so etwas wie das Gegenteil des vorangegangenen Tips: Leider enthält der
C 64 »ab Werk« keinen eingebauten Reset-Taster. Dies wäre ein Knopf, mit dem
der Rechner in den Einschaltzustand versetzt werden kann, beispielsweise
wenn ein Programm abgestürzt ist. Für uns ist das aber kein Problem, man
kann nämlich die RESTORE-Taste (rechts über der RETURN-Taste) in ihrer
Funktionsweise ziemlich frei umdefinieren, beispielsweise einen
Reset-Schalter daraus machen. Die beiden Befehle

POKE 792,226:POKE 793,252

erledigen das für uns. Wenn Sie jetzt die RESTORE-Taste (auch ohne RUN/STOP)
betätigen, wird ein Reset ausgelöst, der C 64 wird in einen definierten
Zustand zurückversetzt, die Einschaltmeldung erscheint. So werden
beispielsweise verschiedene Arbeitsspeicherzellen mit sinnvollen Werten
versorgt, die während des Betriebes verändert wurden. Dabei wird übrigens
auch die Umbelegung von RESTORE widerrufen! Sie könnten nun mit einer
Renew-Routine Ihr verlorenes Basicprogramm wiederholen.

Renew

Wie oft passiert es, daß man versehentlich den Befehl NEW eingibt und sich
gleich darauf auf die Finger schlagen möchte: Studenlange Programmierarbeit
scheint rettungslos verloren, weil das Basicprogramm dummerweise nicht
gespeichert wurde. Den gleichen Effekt hat ein vorschneller Druck auf den
Reset-Taster (vgl. vorher): Das Programm ist weg.

Aber halt, es ist nicht ganz verschwunden. Eigentlich ist es noch im
Speicher des C 64, aber versteckt. Wenn nach dem Löschen noch keine weiteren
Programmzeilen eingegeben wurden, helfen folgende Befehle, das Programm zu
retten:

POKE 2050,8
SYS 42291
POKE 46,PEEK(35)-(PEEK(781) größer 253)
POKE 45,PEEK(781) + 2 AND 255
CLR

Wohlgemerkt dürfen vorher keine Basic-Zeilen eingegeben oder Variablen
definiert worden sein (fatal wäre z.B. A=56), da sonst das Programm
rettungslos verloren geht.

Diese oder verwandte Befehlskombinationen findet man oft in
Basic-Erweiterungen. Der entsprechende Befehl heißt dann OLD oder RENEW, da
er den NEW-Befehl rückgängig macht.

Seitenweise IF..THEN

Irgendwann kommt Ihnen einmal ein Programm unter, in dem viele Zeilen zum
Beispiel so aussehen:

60 IF A=5 THEN B=7
70 IF A=6 THEN B=13
80 IF A=7 THEN B=-3
90 IF A=8 THEN B=6

Je nach Wert von A soll also B einen Wert zugewiesen bekommen. Aber so
umständlich? Sagen wir, A ist eine Integervariable zwischen 5 und 21. Sie
würden nach obigem Verfahren 17 IF..THEN-Befehle brauchen, um alle
Möglichkeiten abzudecken; fast einen Bildschirm voll. Diese Befehle brauchen
viel Platz und viel Programm-Rechenzeit; beides ist rar und teuer auf dem C
64. Die 17 Zeilen könnten aber durch einen einfachen Dreizeiler ersetzt
werden. Am Beginn Ihres Programms müßte folgendes stehen:

10 DIM ZZ(17):FOR X=1 TO 17:READ ZZ(X):NEXT
12 DATA 7,13,-3,6, und so weiter

Der DATA-Befehl wird mit den Werten von B abhängig von A gefüllt. Später im
Programm erfüllt dann jedes Mal, wenn er gebraucht wird, ein einfacher
Zuweiser wie

60 B=ZZ(A-4)

die ganze Arbeit für uns. Die Zeilen ab 70 fallen weg. Da die Zahl in A
zwischen 5 und 21 liegt, subtrahieren wir 4, um in den Bereich des ZZ-Arrays
(1 bis 17) zu gelangen. Die Technik spart Speicherplatz und bringt einen
deutlich spürbaren Zeitgewinn.

Raus aus dem Quote-Modus

Der Anführungszeichen-Modus (quote-mode) des C 64 ist sowohl eine nützliche
wie auch eine frustrierende Angelegenheit. Wenn Sie schon programmiert
haben, wissen Sie, wie angenehm es ist, Bildschirmbefehle wie Bildschirm
löschen, Farbe ändern, Cursor bewegen einfach in PRINT-Befehle einzubauen.
Aber Sie wissen auch, in welche »Schwulitäten« Sie kommen, wenn Sie
editieren wollen, während Sie sich im Quotemodus befinden (nämlich nach der
Eingabe eines Anführungszeichens mit SHIFT 2): Der Computer führt Ihre
Cursorbewegungen nicht mehr aus, sondern vermerkt sie in Form von inversen
Steuerzeichen innerhalb des Textes. Allerdings gibt es einige Möglichkeiten,
dieser Betriebsart ohne Umstände zu entwischen:

· Die RETURN-Taste schaltet grundsätzlich den Quote-Modus, den Einfüge-Modus
und den Invers-Modus ab. Der Einfüge-Modus hat die gleichen Eigenschaften
wie der Quote-Modus, allerdings werden hier auch Korrekturen mit (DEL) als
Steuerzeichen (inverses T) dargestellt.
· Ein manchmal nicht erwünschter Nebeneffekt der RETURN-Taste, nämlich die
Übernahme der eingegebenen Zeile in den Speicher, tritt bei Druck auf (SHIFT
RETURN) nicht auf. Sie können danach den Cursor wieder nach oben bewegen und
Korrekturen vornehmen.
· Beide Arten von (RETURN) bringen Sie in die nächste Bildschirmzeile. Um
den Quote-Modus ohne »Platzverweis« zu stornieren, geben Sie einfach noch
ein Anführungszeichen ein (SHIFT (2)) und drücken danach (DEL).

Diese Tricks arbeiten prima, wenn Sie ein Programm oder einen Text
editieren, aber was tun, wenn man vom Programm aus einen zum Beispiel durch
GET von Tastatur oder File eingeschalteten Anführungszeichen-Modus
abschalten will? Der Computer befindet sich ja immer dann in dieser
Betriebsart, wenn er ein Anführungszeichen auf dem Bildschirm ausgegeben
hat. Um sicherzustellen, daß der Modus abgeschaltet ist, geben Sie einfach
einen POKE 212,0 (auf dem C 64, bzw. POKE 203,0 auf einem C 16).

MSE als Kopierprogramm

Die einfachsten Ideen sind oft die besten. Die Eingabehilfe des
64'er-Magazins, der MSE, läßt sich als Kopierprogramm verwenden. Dazu laden
Sie den MSE und starten ihn ganz normal. Vom MSE laden Sie das zu kopierende
Programm und speichern es dann mit der Tastenkombination (CTRL S) auf eine
andere Diskette oder Kassette. Diese Technik funktioniert mit allen
Maschinen- oder Basicprogrammen und Datenfiles, die im Directory mit PRG
vermerkt sind, allerdings lassen sich die meisten kopiergeschützten
Programme damit nicht kopieren.

Lange Zahlenkolonnen

Oft werden zum Beispiel mit Schleifen wie dieser Zahlenlisten auf dem Schirm
ausgegeben:

100 FOR I=1 TO 1000: PRINT AR(I): NEXT

Hier soll der Inhalt des 1000 Felder umfassenden Feldes AR() ausgegeben
werden. Eine lange Folge von 1000 dahingeschmissenen Zahlen ist die Folge,
ein Mensch wird kaum mitlesen oder kontrollieren können. Die CTRL-Taste
verlangsamt zwar leicht, aber nicht genug. Wenn es Ihnen zu schnell geht,
bauen Sie einfach einen Befehl wie WAIT 198,1,1:POKE 198,0 ein. Oben wäre
das also:

100 FOR I=1 TO 1000: PRINT AR(I): WAIT 198,1,1:POKE 198,0: NEXT

Die Nummern erscheinen ganz normal auf dem Bildschirm, allerdings nur so
lange, bis Sie eine Taste drücken. Dann hält der Computer so lange an, bis
Sie noch eine Taste drücken. Es klingt seltsam, aber der dritte Parameter
beim relativ unbekannten Befehl WAIT 198,1,1 sorgt dafür, daß der Computer
so lange wartet, bis der Inhalt der Speicherzelle 198 (= Anzahl der bisher
gedrückten Tasten) gerade ist. Wenn Sie eine Taste drücken (eine ungerade
Anzahl), wartet der Computer so lange, bis Sie eine weitere Taste drücken.
Diese Technik findet Anwendung, wenn Sie zum Beispiel mit PEEK einen großen
Speicherbereich oder wie hier eine dimensionierte Variable durchsehen.

Weitere nützliche WAIT-Befehle

Da wir gerade den WAIT-Befehl behandelt haben, nutzen wir die Gelegenheit
und führen Ihnen weitere äußerst trickreiche Anwendungen dieses
Mauerblümchens vor. Der Befehl hat die Syntax

WAIT Adresse, Maske1 (, Maske 2)

und wartet, bis der Inhalt der angegebenen Speicherzelle ggf. exklusiv-oder
(vgl. oben) verknüpft mit der zweiten Maske (falls eine angegeben ist) und
danach und-verknüpft mit der ersten Maske einen Wert ungleich Null ergibt.
Da sich nur diese Speicherzellen selbständig ändern, wird WAIT fast nur im
Zusammenhang mit Ein-/Ausgabe-Adressen verwendet.

Ein Beispiel: Beim Commodore 64 findet sich in Speicherzelle 653 die
Information, welche der Taste(n) (SHIFT), (CBM) und/oder (CTRL) gedrückt
ist/sind. Bit 2 (Wertigkeit 4) dieser Zelle wird genau dann auf 1 gesetzt,
wenn die CTRL-Taste gedrückt wird. Wollen Sie in Ihrem Programm darauf
warten, daß der Anwender die CTRL-Taste drückt, geben Sie einfach den Befehl

WAIT 653,4

Man kann auch den Befehl geben, der Computer soll so lange warten, bis die
CTRL-Taste (falls sie bei Erreichen des WAIT-Befehles denn gedrückt war)
losgelassen wurde:

WAIT 653,4,4

ist die einfache Lösung. Für die SHIFT-Taste schreiben Sie statt der 4 eine
1 oder eine 2 für die Commodore-Taste. Mit Hilfe der SHIFT-LOCK-Taste können
wir somit in jedes Basic-Spiel eine Pause-Funktion einbauen: Setzen Sie
einfach in die Hauptschleife des Spieles (z.B. Bewegung der Spielfigur) den
Befehl

WAIT 653,1,1

Das Spiel kann durch Einrasten der Taste SHIFT LOCK gestoppt werden, nach
dem Entrasten geht es weiter.

Die Zelle 197 enthält einen speziellen Code der momentan gedrückten Taste
oder die 64, wenn keine Taste gedrückt wird. Also können wir mit

WAIT 197,63

darauf warten, daß irgend eine Taste gedrückt wird, und mit

WAIT 197,64

darauf warten, daß alle Tasten losgelassen werden.

Wie bei allen Tricks dieser Rubrik spielt es auch hier keine Rolle, daß Sie
die Kniffe verstehen, Sie sollten lediglich wissen, wie man sie anwendet,
sozusagen das »Kochrezept«.

Die eingebaute Uhr des C 64 arbeitet mit den Speicherzellen 160 bis 162. Das
machen wir uns zunutze, indem wir mit WAIT eine Pause von vorgegebener Länge
erzeugen. Erst setzen wir die Uhr auf Null, dann warten wir, bis eine
bestimmte Zeit vergangen ist, bis also ein bestimmter Wert im Uhrenregister
steht. Die folgende Befehlsfolge erzeugt eine Zwangspause von 0,5 Sekunden:

POKE 162,0:WAIT 162,32

Die folgenden beiden gleichwertigen Zeilen erzeugen eine Wartezeit von
4-4/15 Sekunden:

POKE 161,0:POKE 162,0:WAIT 161,1

oder

TI$="000000":WAIT 161,1

Unverständliche Fehlermeldungen

Es gibt drei Fälle, da erscheinen nach der Eingabe fast aller Basicbefehle
Fehlermeldungen, die sich aber nicht erklären lassen, weil der Befehl völlig
korrekt war.

· Im ersten Fall reagiert der C 64 auf jede Eingabe mit einem ?FORMULA TOO
COMPLEX ERROR, Befehle werden überhaupt nicht mehr ausgeführt. Meistens ist
die Ursache ein abgestürztes Programm oder ein fehlerhafter POKE, der den
Computer scheinbar lahmlegt. Um diesen Effekt abzustellen, reicht ein

POKE 24,0

· Der zweite Fall: Der Rechner reagiert auf viele Eingaben nur noch
störrisch mit ?SYNTAX ERROR. Das liegt häufig daran, daß eine falsche Zahl
in Speicherzelle 2048 den Basic-Speicher »verschmiert«. Mit

POKE 2048,1

können Sie diesen unangenehmen Effekt gar selbst provozieren. Treiben Sie
damit Freunde und Bekannte zum Wahnsinn, denn denen wird es jetzt nicht mehr
gelingen, Programm zu editieren oder mit RUN zu starten. Im Regelfall wird
diese Situation aber nicht künstlich herbeigeführt, sondern entsteht durch
einen Unfall. Wie kann dann die volle Funktionsfähigkeit des Computers ohne
Programmverlust wiederhergestellt werden? Durch einen einfachen

POKE 2048,0

klappt alles wieder wie gehabt.

· Drittens: Sie haben ein Maschinenprogramm absolut geladen, also mit dem
Befehl LOAD "NAME",8,1. Solche Programme sind oft Hilfsprogramme und lassen
sich beispielsweise mit SYS 49152 starten. Den Versuch, Variablen anzulegen
oder Programme einzugeben oder zu starten quittiert der Computer allerdings
gnadenlos mit einem ?OUT OF MEMORY ERROR, der einfach nicht verschwinden
will. Abhilfe schafft ein einfacher NEW-Befehl, der zwar dem
Maschinenprogramm nicht weh tut, aber das im Speicher stehende Basicprogramm
löscht. Dieses holen Sie sich dann ggf. mit dem oben vorgestellten
RENEW-Trick oder einem entsprechenden Hilfsprogramm zurück.

Schnelles Löschen von Zeilen

Leider fehlt dem Basic 2.0 des C 64 ein DELETE-Kommando, mit dem gezielt
Zeilenbereiche eines Basicprogramms gelöscht werden können. Überflüssig zu
erwähnen, daß das Löschen von vielleicht 40 oder 50 Zeilen sehr anstrengend
und langweilig sein kann (Eingabe der ersten Zeilennummer, <RETURN>, Eingabe
der zweiten Zeilennummer, <RETURN>, Eingabe der dritten Zeilennummer,
<RETURN>, Eingabe der vierten Zeilennummer, <RETURN>, und immer so weiter).
Zwar existieren Hilfsprogramme für diesen Zweck, aber wir wollen zeigen, wie
es ganz einfach und effektiv geht.

Eine Lösung wäre ein Einzeiler, der die erforderlichen Nummern einfach auf
den Schirm schreibt, wie

FOR I=3000 TO 3200 STEP 10:PRINT I:NEXT

Diese Zeile listet 20 Nummern im Bereich zwischen 3000 und 3200
(Schrittweite 20) auf dem Schirm. Um diesen Bereich zu löschen, tippen Sie
einfach auf jeder Nummer <RETURN>. Wenn Ihr Programm nicht mit der
Schrittweite 10 geschrieben wurde, fehlen vielleicht einige Zeilen, dann
müssen Sie die Schrittweite STEP verändern. Glücklicherweise geht es noch
simpler: Geben Sie erst einmal POKE 774,0 ein. Dieser Befehl schaltet den
LIST-Befehl so, daß er nur die Zeilennummern zeigt (ausprobieren!). Jetzt
holen wir uns den gewünschten Bereich mit einem einfachen

LIST 3000 - 3200

auf den Schirm und löschen mit <RETURN> jede Zeile. Danach schalten wir mit
POKE 774,26 wieder den Normalbetrieb von LIST ein (oder <RUN/STOP-RESTORE>
drücken).

LIST in Basicprogrammen

Normalerweise ist es nicht möglich, den LIST-Befehl innerhalb von
Basicprogrammen zu verwenden, da der C 64 die Bearbeitung des Programms nach
dem LIST-Befehl stoppt. Mit einem kleinen Trick ist es aber trotzdem
möglich. Das folgende Beispiel listet innerhalb des Programms die Zeile 10.

10 POKE768,61:SYS42980,LIST10:POKE768,138
20 WAIT198,1: POKE198,0: PRINT"WEITER": GOTO10

Natürlich können Sie in Zeile 10 anstelle des LIST 10 auch zum Beispiel LIST
10- oder LIST 400-500 usw. schreiben. Vergessen Sie nicht das Komma nach dem
SYS-Befehl!

Vorgaben

Viele Programmierer verwenden einen Befehl wie den folgenden, wenn Sie vom
Anwender eine Eingabe erwarten und ihm schon eine mögliche Antwort vorgeben
wollen:

INPUT"SIND SIE SICHER(2 SPACES)J(3 LEFT)";A$

Hier wird die Frage gestellt: SIND SIE SICHER? zusammen mit einem »Default«.
Ein Default ist eine Vorgabe, in diesem Fall die Antwort »J«, die dem
Programm übergeben wird, wenn der Anwender nur <RETURN> drückt, ohne etwas
einzugeben. Dieser Trick funktioniert meistens ohne weiteres, die
Cursor-Steuer-Kommandos sorgen dafür, daß sowohl die Vorgabe »J« (Sie hätten
ebenso gut »N« schreiben können) wie auch das Fragezeichen, das der
INPUT-Befehl selbst erzeugt, auf dem Bildschirm an der richtigen Stelle
stehen.

Sie erkennen das Problem: Was tun, wenn die Länge des Defaults vorher nicht
bekannt ist? Wenn die Vorgabe in einer Variable steht? Dann behelfen Sie
sich am besten so:

PRINT"PROMPT ";X;:POKE211,6:INPUTX

Hierbei meint »PROMPT« den Abfrage-Text, zum Beispiel »Sind Sie sicher«. Der
Befehl POKE 211,6 bewirkt, daß der Cursor in die 6. Bildschirmspalte gesetzt
wird. Sie müssen je nach Länge des Prompts diesen Wert variieren (hier
»PROMPT« = 6 Zeichen, daher 6). Verwenden Sie diese Technik mit einer
String-Variable anstelle von X, schreiben Sie zwei Leerzeichen nach dem
Prompt anstelle des einen.

Kommas im INPUT-Befehl

Nochmal INPUT: Der INPUT-Befehl, mit dem der C 64 ausgerüstet ist, hat -
neben anderen Schwächen - einen Nachteil: Man kann keine Kommas eingeben.
Ein Beispiel:

10 INPUT"TEXT";T$
20 PRINT"ES WAR";T$

Geben Sie hier in Zeile 10 einen Text ein, der Kommas oder Doppelpunkte
enthält, so wird sich der Rechner mit einem ?EXTRA IGNORED beschweren und -
wie beim folgenden PRINT-Befehl zu sehen ist - den Teil nach dem Komma bzw.
Doppelpunkt gnadenlos abtrennen. Abhilfe: Ein Anführungszeichen, eingegeben
vor dem Text. Dieses geht nicht in die Variable T$ ein, sorgt aber dafür,
daß Sie in der Eingabe alle Zeichen verwenden dürfen (ausgenommen sind
natürlich weitere Anführungszeichen).

Fehlerkanal im Direktmodus, Teil I

Die rote Fehler-LED der Floppy blinkt hektisch, ein Fehler ist aufgetreten.
Aber welcher? Leider kann man normalerweise im Direktmodus nicht den
Floppy-Fehlerkanal auslesen, das ist wegen dem dazu notwendigen
INPUT#-Befehl nur innerhalb von Basic-Programmen möglich. Falls sich ein
wichtiges Programm im Speicher befinden, das Sie nicht überschreiben wollen,
stehen Sie jetzt ohne folgenden Trick ganz schön »auf dem Schlauch«.

Unter Zuhilfenahme einiger Maschinensprache-Systemroutinen des Computers
(wie das funktioniert, müssen Sie nicht verstehen, Hauptsache, es klappt)
gelingt es uns, auch im Direktmodus Dateien, zum Beispiel den Fehlerkanal zu
lesen. Dazu öffnen wir erst den Kanal wie gewohnt mit

OPEN 15,8,15

Dann wird - im Direktmodus - folgende Zeile eingegeben:

FOR X=0TO40: POKE781,15: SYS65478: SYS65487: SYS65490: SYS65484: IF ST= 0
THEN NEXT

Es erscheint die Meldung, zum Beispiel

26, WRITE PROTECT ON,18,01

Danach wird (falls nicht mehr benötigt) der Kanal wieder geschlossen.

CLOSE 15

Dieser Trick klappt immer dann, wenn im Direktmodus eine Datei gelesen
werden soll. Der Befehl SYS 65490 sorgt für die Ausgabe auf dem Bildschirm.
Sie müssen ggf. nur nach dem POKE 781, die Filenummer des geöffneten Files
(hier: 15) einsetzen. Beispielsweise listet folgendes »Programm«, das
allerdings nur im Direktmodus läuft, eine Datei auf dem Drucker:

OPEN 1,8,2,"NAME DER DATEI,S,R"
OPEN 2,4
FOR X=1 TO 10000000: POKE 781,1: SYS 65478: CMD 2: SYS 65487: SYS 65490: SYS
65484: IF ST=0 THEN NEXT
CLOSE 1:CLOSE 2

Nach der Übertragung kann man mit

PRINT X

die Anzahl der gedruckten Zeichen erfragen.

Fehlerkanal im Direktmodus, Teil II

Haben Sie die obige Methode schon ausprobiert? Es geht auch einfacher: Wenn
es dem Computer nicht »paßt«, daß wir im Direktmodus den INPUT#-Befehl
anwenden, dann müssen wir ihm eben »vorgaukeln«, daß er sich im
Programm-Modus befindet. In den Speicherzellen 57 und 58 steht während des
Ablaufs eines Basicprogramms die Zeilennummer der gerade bearbeiteten
Basic-Zeile, im Direktmodus ein spezieller Code. Schreiben wir direkt vor
dem INPUT#-Befehl eine Null in diese Zellen, dann denkt der Computer, er
befindet sich im Programm. Er meckert dann nicht bei der Abfrage des
Fehlerkanals:

POKE 57,0:POKE 58,0:OPEN 1,8,15:INPUT #1,A,B$,C,D:PRINTA;B$;C;D: CLOSE 1

Die beiden POKEs haben keine Nebenwirkungen, sie werden automatisch sofort
am Zeilenende bei CLOSE 1 wieder korrigiert.

Directory ohne Programmverlust

Häufig möchte man das Inhaltsverzeichnis einer Diskette in den Speicher
bringen und listen, ohne das dabei im Speicher befindliche Programm zu
löschen. Haben Sie nicht gerade eine Erweiterung wie DOS 5.1 zur Hand, hilft
folgender Kniff:

POKE 44,PEEK(46)+1

Der Basic-Speicher wird auf einen freien Speicherplatz umgestellt. Jetzt
können Sie wie gewohnt das Directory mit LOAD "$",8 laden und mit LIST
ansehen. Mit

POKE 44,8:CLR

gelangen Sie dann wieder ins normale Programm zurück. Mit dieser Methode
lassen sich auch andere Basic-Programme ohne Verlust des Hauptprogramms
listen, allerdings nicht editieren, verändern oder starten.





C 64 - Computerlexikon

Absolutes Laden, das

Beim absoluten Laden einer Datei mit dem LOAD-Befehl muß hinter der
Geräteadresse der Parameter »,1« (Beispiel: LOAD "NAME",8,1) angegeben
werden. Diese Angabe bewirkt, daß das File in den Speicherbereich des C 64
gelangt, aus dem es auch gespeichert wurde, nicht unbedingt in den
Basicspeicher (sog. »relatives Laden« ohne »,1«). Viele Maschinenprogramme
sind nur in »ihrem« Speicherbereich und nicht im Basicspeicher lauffähig,
das ist der Grund dafür, daß sie in der Regel absolut (»,8,1«) zu laden
sind.

Absturz, der

Reagiert der Computer wegen eines Programmfehlers oder aufgrund anderer
Umstände nicht mehr auf den Anwender (Tastatur »tot«), hilft nur noch ein
Kaltstart (»Reset«). Diese Situation wird »Absturz« genannt.

Akkumulator, der

Ein spezielles Register eines Prozessors, mit dem Rechenoperationen
ausgeführt werden.

Algorithmus, der

Rechenregel, Verfahrensweise, Verfahren zur Lösung eines Problems, das nach
endlich vielen Schritten abbricht und dabei entweder die Lösung des Problems
präsentiert oder das Problem als unlösbar zurückweist.

Adresse, die

Die Adresse gibt an, an welcher Stelle im Speicher sich bestimmte Daten
befinden (vergleichbar mit der Hausnummer in einer langen Straße). Die 65536
Speicherzellen des C 64 (65536 Häuser) sind durchnumeriert, wodurch ihnen
Adressen zugeteilt werden, über die auf den Inhalt zugegriffen werden kann.

Alphanumerisches Zeichen, das

Darunter versteht man alle Zeichen, die ein Computer auf einer
Ausgabeeinheit (Drucker, Bildschirm) darstellen kann; zumindest aber das
Alphabet und die Dezimalzahlen.

ALU, die

»Arithmetical Logical Unit«; der für die Durchführung sämtlicher
Berechnungen zuständige Teil des Prozessors.

Anweisung, die

Einzelner oder zusammengesetzter Ausdruck innerhalb eines Programms, der dem
Computer mitteilt, was er zu tun hat.

ASCII

American Standard Code für Information Interchange. Ein Standardcode, der
128 Zeichen (Zahlen, Buchstaben, Satzzeichen, Symbole) ein aus sieben Bit
bestehendes Muster zuweist. Dieser Standard erleichtert die Kommunikation
verschiedener Programme, Computer und Peripheriegeräte.

Assembler, der

1. Eine maschinennahe Programmiersprache (Maschinensprache), die von
Prozessor zu Prozessor unterschiedlich ist. Assemblerprogramme können nur
mit »Ihrem« Prozessor laufen, im Gegensatz zu höheren Programmiersprachen,
die unabhängig vom eingesetzten Mikroprozessortyp sind. Assemblerprogramme
nutzen die Fähigkeiten des jeweiligen Computers optimal aus und belegen auch
im Vergleich zu höheren Programmiersprachen wie etwa Basic weniger
Speicherplatz und sind zudem sehr schnell.

2. Übersetzungsprogramm, welches ein im Assemblercode vorliegendes Programm
(Quelltext) in den binären, also direkt ablauffähigen Maschinencode
(Objektcode) umwandelt. Dabei werden die Assemblerbefehle (»Mnemonics«) auf
syntaktische Richtigkeit überprüft.

Auflösung, die

Maximale Anzahl optisch voneinander unterscheidbarer Punkte, die auf einer
Fläche dargestellt werden können. Angegeben wird die Auflösung in Pixel.
Grafikcomputer höchster Auflösung können bis zu 4096 x 4096 Punkte auflösen,
beim C 64 beträgt die Auflösung 320 x 200 Pixel, es stehen also 200 Zeilen
zu je 320 Bildpunkten zur Verfügung.

BAM, die

Block Availability Map; Verzeichnis auf einer Diskette, welche Sektoren der
Diskette von Daten belegt und welche frei sind.

Basic-Interpreter, der

Bei dem Basic-Interpreter handelt es sich um ein fest im C 64 eingebautes
Maschinenprogramm mit der Aufgabe, die eingegebenen Basicbefehle zu
entschlüsseln und auszuführen. Er belegt den Speicherbereich von 40960 bis
49151. Vgl. Betriebssystem

Betriebssystem, das

Das Betriebssystem (Kernal) ist ein fest im C 64 eingebautes
Maschinenprogramm, das alle Ein- und Ausgaben steuert (Bildschirm, Tastatur,
Diskette, Drucker und so weiter) und dafür sorgt, daß Anwendungsprogramme
lauffähig und damit anwendbar sind. Es belegt den Speicherbereich von 57344
bis 65535. Bei anderen Computern muß das Betriebssystem (z.B. MS DOS) erst
nach dem Start von Diskette geladen werden.

Bildschirmmaske, die

generelles Aussehen des Bildschirms bei einem bestimmten Programm, Formular

Binär

Zahlensystem mit der Basis 2, das nur die Ziffern 0 und 1 kennt. Da sich
diese Zahlen leicht in einem Entweder-Oder-Schema darstellen lassen (Strom
fließt - Strom fließt nicht), wurde das binäre Zahlensystem zum
Charakteristikum digitaler Computersysteme.

Bit, das

»Binary Digit«; Kleinste Informationseinheit in einem binären Zahlensystem
(eine Ziffer mit Wert »Null« (»gelöschtes Bit«) oder »Eins« (»gesetztes
Bit«)).

Block, der

Sektor auf einer Diskette

Blockgrafik, die

Zeichensatzgrafik - der C 64 verfügt neben den ASCII-Zeichen über weitere
Darstellungsformen: Die Grafiksymbole, die auf der Tastatur mit Hilfe der
Tasten <SHIFT> und <CBM> erreicht werden können. Mit diesen zusätzlichen
Zeichen lassen sich diverse nicht hochauflösende Grafiken bequem in
Programme und Bildschirmmasken einbauen, beispielsweise Umrandungen etc.

Bus, der

Satz von acht oder 16 Leitungen in einem Computersystem, über das alle
Bausteine verbunden sind. So werden beispielsweise über den Datenbus die
Daten zwischen Speicher und Prozessor ausgetauscht.

Byte, das

Ein Byte ist eine aus acht Bit zusammengesetzte Informationseinheit, mit der
sich jeder ganzzahlige Wert zwischen 0 und 255 darstellen (codieren) läßt.
Jede Speicherzelle faßt ein Byte. Die nächstgrößere Verwaltungseinhait, das
Kilobyte (KByte), besteht aus 1024 Bytes oder 8192 Bit. Der Speicher des C
64 faßt 64 Kilobyte, das entspricht 65536 Bytes oder 524288 Bit.

Chip, der

Rechteckiges Siliziumplättchen, das in einem Computer bestimmte elektrische
Aufgaben erfüllt (Prozessor, Videochip, Speicherbaustein) und dabei meistens
in eine integrierte Schaltung (IC) eingebaut ist.

CIA, die

»Complex Interface Adapter«, Baustein im C 64, der - in zweifacher
Ausführung vorhanden - die elektronische Verbindung des Systems zu externen
Komponenten wie Laufwerk, Drucker, Tastatur, Joystick, Userport, Datasette
steuert. In der Zuständigkeit der CIAs liegt außerdem die
Interrupt-Erzeugung und -Verwaltung. Die technische Bezeichnung für die CIA
des C 64 lautet 6526.

Code, der

1. ein in Maschinensprache übersetztes Assemblerprogramm oder ein
compiliertes Hochsprache-Programm

2. Vorschrift zum Ver-/Entschlüsseln von Daten

Compiler, der

Übersetzungsprogramm, das in einer Hochsprache (Beispiel Basic, Pascal)
geschriebene Programme in Maschinensprache übersetzt und diese somit
wesentlich schneller im Ablauf macht.

CPU, die

»central processing unit«, Teil des Prozessors

CRT, die

»cathode ray tube«, Kathodenstrahlröhre, gleichbedeutend mit »Bildschirm«.

Cursor, der
Das blinkende Viereck, das am Bildschirm die Schreibposition angibt.

Datei, die

engl. »file«; Sammlung von zusammengehörenden Informationen, die gemeinsam
gespeichert sind. Ein auf Diskette gespeichertes Programm ist ebenso eine
Datei wie eine Adressenliste oder gar der gesamte Disketteninhalt. Man
unterscheidet dabei hauptsächlich nach dem möglichen Zugriff in sequentielle
Dateien (vgl. ein Tonband; um hier eine bestimmte Stelle zu erreichen, muß
erst vorgespult werden) und in relative Dateien (vgl. eine Schallplatte, bei
der der Tonarm in kürzester Zeit jede beliebige Stelle erreichen kann).

Datensatz, der

Teil einer Datei

Debugger, der

»Entwanzer«, Einrichtung zur Programm-Fehlersuche

Default, der

Vorgabewert, Vorschlag für einen Parameter. Beim LOAD-Befehl lautet
beispielsweise der Default für die Geräteadresse 1 (Tape), daher versucht
der C 64 von Datasette zu laden, wenn Sie keine Geräteadresse angeben.

Directory, das

Inhaltsverzeichnis zum Beispiel von einer Diskette; verzeichnet sind darin
die gespeicherten Dateien. Beim C 64 wird es mit dem Befehl LOAD "$",8
geladen und dann mit LIST gezeigt.

Disassembler, der

Programm, das ein Maschinenprogramm in ein leicht lesbares Assemblerprogramm
mit Mnemonics übersetzt, beispielsweise zur Wartung oder Fehlersuche. Oft
Funktionsteil eines Monitors.

Diskette, die

Auch »Floppy Disc« genannt. Sie besteht aus einer flexiblen (»floppy«)
Plastikscheibe mit einer magnetischen Beschichtung, auf die mit einem
Tonkopf im Laufwerk magnetisch die Daten gespeichert werden. Der Vorteil von
Diskette gegenüber Bändern besteht in der direkten Zugriffsmöglichkeit auf
jeden Datensatz.

Diskettenmonitor, der

Programm, das es dem Anwender ermöglicht, Manipulationen von Daten direkt
auf der Diskette vorzunehmen, Beispielsweise Dateien zu verändern oder Files
oder auch die gesamte Diskette gegen Löschen oder Überschreiben zu schützen.
Ebenso ist der Zugriff auf die BAM für den Programmierer nur mit einem
Diskettenmonitor möglich.

DOS, das

engl. »Disc Operating System«; Betriebssystem einer Diskettenstation, das
die mechanischen und elektronischen Funktionsabläufe im Drive steuert
(Beispiel: Validieren einer Diskette).

Drive, das

engl. für »Diskettenlaufwerk«

Dummy, der

»Strohmann«, »Atrappe«; Platzhalter für einen Programmteil oder Daten, die
erst später (z.B. bei der Initialisierung) in diesen Speicherbereich
geschrieben werden, z.B. in der Testphase.

Editor, der

Programm, welches das Editieren von Programmen oder Texten oder Dateien
erlaubt. Beispiel: Textverarbeitungsprogramm

Editieren, das

Anlegen oder Verändern einer Datei (z.B. Blöcke vertauschen, Zeichen
einfügen oder löschen, kopieren von Textbereichen).

EPROM, das

»erasably programmable read only memory«, Speicherbaustein, der in einen
Computer eingebaut nur gelesen, nicht aber beschrieben oder gelöscht werden
kann. Zum Löschen des Bausteins wird spezielles UV-Licht verwendet, mit
Hilfe eines »Eprom-Brenners« kann dann neuer Speicherinhalt in das Eprom
geschrieben (»gebrannt«) werden.

File, das

siehe Datei

Flag, das

engl. »Fahne«, Signal; ein Flag kann nur zwei Zuständen annehmen: »wahr«
oder »falsch«. Es signalisiert damit dem Programm bestimmte
Betriebszustände.

Flipflop, das

Bezeichnung für eine elektronische Schaltung, die nur zwei Zustände besitzt.
Der Übergang von einem Zustand in den anderen kann nur durch äußere
Einflüsse erfolgen. Die Aufforderung dazu ergeht über mindestens einen
Eingang, der Zustand des Flipflops kann über mindestens einen Ausgang erfaßt
werden. Ein Flipflop ist ein Speicher für ein Bit, ein Beispiel für ein
einfaches Flipflop ist ein Lichtschalter.

Floppy, die

siehe Diskette

Floppy-Speeder, der

Beschleuniger für ein Diskettenlaufwerk; die Diskettenlaufwerke für den C 64
zählen zu den langsamsten Laufwerken (sehr lange Lade- und Speicherzeiten),
deshalb wurden im Laufe der Zeit einige Beschleuniger entwickelt, die die
Geschwindigkeit des Datentransfers auf ein erträgliches Maß reduzieren.
Manche dieser Speeder übertragen Dateien, für die das
Original-Betriebssystem Minuten braucht, in nur wenigen Sekunden.

Garbage Collection, die

Bei der dynamischen Stringverwaltung entstehen bei fast jeder Textoperation
kleine unbenutzte Speicherbruchstücke. Damit sie wieder genutzt werden
können, müssen sie gesucht und dann zusammengefaßt werden. Diesen Vorgang,
der beim C 64 durchaus einen scheinbaren Absturz von bis zu einer halben
Stunden Dauer zur Folge haben kann, nennt man »Garbage Collection«
(»Müllabfuhr«).

Geräteadresse, die

Parameter beispielsweise hinter einem LOAD- oder OPEN-Befehl, der angibt,
auf welches Gerät sich der Befehl bezieht. Übliche Geräteadressen
(Gerätenummern): 0 = Tastatur, 1 = Tape, 2 = RS232, 3 = Bildschirm, 4..7 =
Drucker, 8..11 = Diskettenstation(en).

Hardcopy, die

Ausdruck von Texten oder Grafiken. Viele Computer (nicht der C 64) verfügen
über eine spezielle Hardcopy-Funktion, mit der der aktuelle Bildschirminhalt
auf dem Drucker ausgegeben werden kann. Beim C 64 gibt es entsprechende
Programme (Hardcopy-Routinen), die geladen werden können und sich dann bei
Bedarf per Tastendruck starten lassen.

Hardware, die

Überbegriff über alle Komponenten einer Computeranlage, die man anfassen
kann, also die gesamte Elektronik, alle materiellen Teile (Gegenteil:
Software)

Hexadezimal

Das hexadezimale Zahlensystem beschreibt die Darstellung von Zahlen zur
Basis 16. Die Dezimalzahlen 0 bis 15 werden durch die Ziffern 0 bis 9 und
die Buchstaben A bis F dargestellt. Dieses System wird oft zur
platzsparenden Darstellung von Binärzahlen benutzt. Hexadezimalzahlen werden
in der Regel durch ein vorangestelltes Dollarzeichen »$« markiert.

Highbyte, das

In einer Speicherzelle kann nur ein Wert bis 255 gespeichert werden. Sollen
größere Zahlen gespeichert werden, muß man sie auf mehrere Speicherzellen
aufteilen. Ein beliebtes Verfahren zum Speichern von Integerzahlen von 0 bis
65535 in zwei Zellen ist das High/Lowbyte-Verfahren. Dazu wird die Zahl nach
folgenden Formeln zerlegt:

HIGHBYTE = INT (ZAHL/256)
LOWBYTE = ZAHL - HIGHBYTE * 256

Für den Fall, daß 0 <= ZAHL < 65536, liegen die Werte des High- und Lowbytes
im Bereich von je 0 bis 255, sie sind also Speicherzellen-geeignet. Die
beiden errechneten Bytes werden jetzt in zwei aufeinanderfolgenden
Speicherzellen (erst Low-, dann Highbyte) gespeichert. Um aus den beiden die
Zahl zu rekonstruieren, kommt folgende Formel zur Anwendung:

ZAHL = HIGHBYTE * 256 + LOWBYTE

Auf diese Weise speichert der C 64 Integervariablen. Sollen größere Zahlen
als 65535 oder negative oder gebrochene Zahlen gespeichert werden, muß man
die Werte mit geeigneten Formeln auf mehr als zwei Zellen aufteilen.

Hochsprache, die

Sprache mit starken Befehlssatz, zum Beispiel Ada, Algol, Apl, Basic, C,
Cobol, Comal, Forth, Fortran, Lisp, Logo, Modula-2, Pascal, Smalltalk etc.
Maschinensprache ist keine Hochsprache, da hier leistungsstarke und komplexe
Befehle wie PRINT zur Ausgabe fehlen.

Initialisierung, die

Herstellung eines ganz bestimmten Startzustands eines Programms oder einer
Prozedur. Dabei werden zum Beispiel die Variablen auf Null gesetzt.

Integer

ganzzahlig

Interface, das

Einrichtung, die zwei sonst nicht zueinander kompatible Komponenten
miteinander verbindet. Beispiel: Druckerinterface zum Anschluß eines
PC-Druckers an den C 64.

Interpreter, der

Der Interpreter durchläuft für jeden Befehl einer Programmiersprache eine
festgelegte Befehlssequenz in Maschinensprache. Beispiel: Wird ein
Basicprogramm ausgeführt und stößt der Interpreter dabei auf den
PRINT-Befehl, so sorgt er dafür, daß seine entsprechende
Bildschirmausgabe-Routine abgearbeitet wird.

Interrupt, der

Unterbrechung; definiertes Aussetzen eines Programmablaufs aufgrund eines
von der Hardware kommenden Signals. Nach der Abarbeitung der
»Interrupt-Routine« wird das unterbrochene Programm weitergeführt. Auf diese
Art (eine CIA löst 60 Mal in der Sekunde über eine Leitung einen IRQ aus)
wird beim C 64 das Cursorblinken, die Tastaturabfrage und die interne Uhr TI
und TI$ gesteuert. Ein zu unterbrechendes Programm kann bestimmte Arten von
Interrupts verhindern, »maskieren«. Interrupts, die sich ein- und
ausschalten lassen, heißen »maskierbar«, Interrupts, die sich nicht
verhindern lassen, heißen »nicht maskierbar« (beim C 64 löst die
RESTORE-Taste einen NMI aus).

IRQ, der

Kurzform von »maskierbarer Interrupt«

Joystick, der

Eingabegerät, das nur fünf verschiedene Zuständen melden kann: Oben, unten,
links, rechts, Feuer sowie Kombinationen daraus. Dieses primitive Gerät wird
daher nur zur Steuerung von Spielen und wenigen Anwenderprogrammen
verwendet.

Kaltstart, der

identisch mit Reset; Gegenteil: Warmstart

Kernal, das
»Kern«; siehe Betriebssystem

Kompatibilität, die

Eigenschaft von verschiedenen Hard- oder Softwarekomponenten, gegeneinander
austauschbar zu sein oder gemeinsam zu einem System zusammengesetzt werden
zu können. Speziell unterscheidet man Daten- und Anlagenkompatibilität. Läßt
sich ein Drucker ohne weiteres an den C 64 anschließen, heißt er »kompatibel
zum C 64«.

Label, das

Sprungmarke in einem Maschinenprogramm, Name einer Routine. In Basic gibt es
keine Label, dafür Zeilennummern.

Lader, der

Hilfsprogramm, das ein Maschinenprogramm oder eine andere Datei in den
Hauptspeicher bringt. Auf dem C 64 sind zwei Formen verbreitet: Der
DATA-Lader, der in einer FOR..NEXT-Schleife mit READ und POKE DATA-Werte in
den Speicher schreibt, und der Diskettenlader, der mit einem LOAD-Befehl ein
Programm absolut in den Speicher lädt.

Leerstring, der

Leerstring bedeutet, daß sich in einer Textvariablen kein Inhalt befindet
(A$ = "")

Lowbyte, das

siehe Highbyte

Maschinensprache, die

siehe Assembler

Maschinenroutine, die

Ein kleines in Maschinensprache geschriebenes Programm

Maus, die

Ein auf dem Tisch frei bewegliches, etwa faustgroßes Eingabegerät mit einer,
zwei oder drei Tasten. Mit der Maus arbeitet es sich wesentlich komfortabler
und einfacher als mit dem Joystick oder der Tastatur. Ein unten in der Maus
angebrachter Gummiball überträgt durch Reibung die Bewegungen der Maus auf
dem Tisch in die Maus, wo sie mit Sensoren abgetastet und über ein langes
Kabel an den Computer gemeldet werden.

Mikroprozessor, der

siehe Prozessor

Mnemonic, das

griechisch für »Merkregel«, »Eselsbrücke«. Die Maschinensprache-Befehle wie
»LOAD ACCUMULATOR« werden durch Kurzbefehle (Mnemonics) wie »LDA« abgekürzt.

MOB, das

siehe Sprite

Monitor, der

1. Bildschirmeinheit eines Computersystems. Entspricht technisch in etwa
einem Fernseher, aber ohne Tuner, dafür mit besserer, schärferer
Bildwiedergabe.

2. Maschinensprache-Hilfsprogramm zum Darstellen und Ändern von
Speicherinhalten. Siehe auch Diskettenmonitor.

Multitasking, das

Fähigkeit eines Systems, mehrere Aufgaben quasi gleichzeitig ausführen zu
können. Vom Steuerungsprogramm werden dabei die verschiedenen »Jobs«
(»Tasks«, Aufgaben) in hoher Geschwindigkeit umgeschaltet.

Nibble, das

ein halbes Byte, also vier Bit

NMI, der

nicht maskierbarer Interrupt. Wird beim C 64 beispielsweise durch die
Restore-Taste ausgelöst. Die jetzt in jedem Fall aktivierte NMI-Routine
prüft erst, ob gleichzeitig die RUN/STOP-Taste gedrückt wurde. Wenn nicht,
geht es ohne Unterbrechung weiter, sonst wird ein Warmstart mit den
bekannten Konsequenzen ausgeführt.

Nullbyte, das

Byte mit dem Wert Null; wird oft beispielsweise in Dateien oder Tabellen als
Ende-Kennzeichen verwendet.

Page, die

»Seite« im Speicher (256 Byte)

Parameter, der

nähere Angabe zu einem Befehl

Peripherie, die

alle Geräte und Maschinen, die außer dem Grundgerät zum Computer gehören
(Maus, Datasette, Joystick, Diskettenlaufwerk, Drucker, Bildschirm usw.)

Pixel, der

»picture element«, Bildpunkt, allerkleinste Einheit eines Grafikbildes.

Platine, die

Glasfaserverstärkte Kunststoffplatte, auf denen aufgedruckte oder aufgeätzte
Leiterbahnen anstelle von freien Leitungen die Verbindung zwischen den
Baugruppen übernehmen. Die Bauteile werden durch Bohrungen in die Platine
gesteckt und mit den Leiterbahnen verlötet.

Plotter, der

elektromechanisches Gerät zum Ausgeben von technischen Zeichnungen und
Kurven. Über zwei Motoren wird dazu eine Art Kugelschreiber über das Papier
bewegt.

Port, der

engl. »Hafen«; Schnittstelle zwischen Prozessor oder Computer und Außenwelt.

Prozessor, der

Zentrale Funktionseinheit innerhalb eines Computers, die alle anderen
Komponenten steuert und überwacht. Die CPU (»central processing unit«) führt
innerhalb des Prozessors die Maschinenprogramme aus, Berechnungen werden von
der ALU durchgeführt. Der Prozessor spricht über den Bus den gesamten
Speicher des Computers und ggf. andere Chips an. Die technische Bezeichnung
des im C 64 eingebauten Prozessors lautet 6510.

RAM, das

»random access memory«, Speicher mit wahlfreiem Zugriff, der sowohl gelesen
wie auch beschrieben werden kann. Hier speichert der Computer die
eingegebenen oder geladen Programme und alle Daten. Nach dem Abschalten der
Stromversorgung geht der Inhalt des RAMs verloren.

Real-Zahl, die

normale numerische Variable des C 64, die positive und negative Werte bis
ca. 10 hoch 39 bei bis zu neun Stellen nach dem Komma annehmen darf. Zur
Speicherung einer solchen Zahl werden genau fünf Byte benötigt.

Register, das

1. Speichereinheit eines Prozessors, die kurzzeitig Daten oder
Zwischenergebnisse aufnehmen kann.

2. Speichereinheit eines Chips, die die Funktionsweise des Chips steuert.
Etwa ist die bekannte Speicherzelle 53280 beim C 64 ein Register des
Videobausteins VIC, das die Bildschirmrahmenfarbe steurt.

Rekursion, die

Definition eines Problems, einer Funktion oder eines Verfahrens
(Algorithmus) durch sich selbst. Rekursive Darstellungen sind meist leichter
verständlich und kürzer als andere Darstellungsformen. Ruft sich ein
Programmteil mit GOSUB selbst auf, spricht man von rekursiver
Programmierung.

Renew

Eine Renew-Routine ist ein praktisches Hilfsprogramm, mit dessen Hilfe in
vielen Fällen nach einem versehentlich eingegebenen NEW-Befehl oder nach
einem Kaltstart (Reset) das gelöschte Basicprogramm wiederhergestellt werden
kann.

Reset, der

Signal, Vorgang oder Befehl, um den Computer wieder in den Einschaltzustand
zu versetzen. Wichtige Speicherzellen erhalten ihren Ausgangswert zurück,
der Bildschirm, der Programmspeicher und alle Variablen werden gelöscht
(siehe Renew). Von Basic aus kann beim C 64 der Reset mit dem Befehl SYS
64738 oder einem speziellen Reset-Taster (vgl. Bauanleitung) ausgelöst
werden.

ROM, das

»read only memory«, Speicher, der nur gelesen werden kann und dessen Inhalt
nach dem Ausschalten nicht verlorengeht (»nicht flüchtig«). Im C 64 befinden
sich drei ROMs (in neueren Versionen nur noch zwei), in denen der
Bildschirmzeichensatz, der Basic-Interpreter und das Kernal (Betriebssystem)
gespeichert sind.

Routine, die

Unterprogramm, Programmteil

Schleife, die

Programmteil, der so oft immer wieder durchlaufen wird, bis eine bestimmte
Abbruchbedingung erfüllt wird.

Schnittstelle, die

Meist steckbare elektrische Verbindung zwischen zwei Hardware-Komponenten,
Anschluß

Scrollen, das

auch »Scrolling«; gemeint ist das Hochrollen des Bildschirm beim Listen
eines Programms oder einer Tabelle, die länger als eine Bildschirmseite ist.

Seite, die

Eine Seite (»page«) im Speicher umfaßt 256 Bytes. Siehe auch zeropage.

Sektor, der

auch »Block«; nach dem Track nächstkleinere Verwaltungseinheit für
Datenspeicherung auf Disketten. Jeder Track ist je nach Tracknummer in 17
bis 21 Sektoren unterteilt. Ein Sektor kann 254 Daten- und zwei
Verwaltungsbytes speichern. Die beiden Verwaltungsbytes geben die Nummer des
Tracks und Sektors an, wo dieser Block fortgesetzt wird.

Sensor, der

Aufnehmer, Fühler

SID, der

»Sound Interface Device«, Baustein im C 64, der den Ton erzeugt. Die
technische Bezeichnung dieses ICs lautet 6581.

Software, die

nicht materieller Teil eines Computers, also die Daten und die Programme
(Gegenteil: Hardware)

Speicher, der

Man unterscheidet den Haupt- oder Arbeitsspeicher (meist) im Gehäuse des
Computers und die anzuschließende Massenspeichereinheit (Diskette oder
Magnetband). Der Hauptspeicher funktioniert wie ein großes Regal mit
numerierten Fächern (Adressen). So wie der Postbote bei der Zustellung eines
Briefes die Adresse mit Hausnummer wissen muß, kennt der Computer beim
Speichern und Lesen von Daten die Adressen der Speicherzellen. In einer
Speicherzelle kann ein Byte (entspricht einem Zeichen) abgelegt werden.

Sprite, das

Vom Programmierer frei definierbares grafisches Objekt. Auf dem C 64 ist ein
Sprite 21 x 24 Punkte groß. Sprites können dort sowohl grafisch wie auch
schwarz/weiß dargestellt werden. Der Vorteil dieser Gebilde besteht darin,
daß die unabhängig vom sonstigen Bildschirminhalt als eigenständige Fläche
bewegt werden können. Ohne programmtechnische Tricks können bis zu acht
dieser »MOBs« (movable Object) dargestellt werden.

Spur, die
andere Bezeichnung für »Track«

Stack, der
Siehe Stapelspeicher

Stapelspeicher, der

engl. »Stack«; Organisationsform eines Speichers, der nach dem
LIFO-Verfahren arbeitet: »Last in, first out«. Die Elemente, die als letztes
im Stack gespeichert wurden, kommen als erste wieder heraus. Stellen Sie
sich einen Stapel Papier vor: Sie legen ein neues Blatt oben auf. Soll jetzt
ein Element aus dem Stapel genommen werden, muß es sich um das oberste
handeln, also das, was eben erst draufgelegt wurde. Beim C 64 arbeitet
beispielsweise der GOSUB-Befehl mit einem Stapelspeicher, in dem die
Aufrufadressen abgelegt werden. Der RETURN-Befehl holt sich vom Stapel die
Basiczeile, in der der letzte GOSUB-Befehl stand. Auf diese Weise lassen
sich GOSUB-Befehle verschachteln. Andere Beispiele für Stacks:
FOR..NEXT-Schleifen in Basic oder Unterprogramme in Maschinensprache mit
JSR..RTS.

Startadresse, die

Adresse des ersten auszuführenden Befehles in einem Programm

String, der

Text, Zeichenkette (engl. »Kette«)

Stringvariable, die

In einer Stringvariablen lassen sich Zeichen speichern. Im Gegensatz zu den
normalen numerischen Variablen kann man Stringvariablen weder addieren noch
multiplizieren. Wichtig ist, daß Zeichen hier innerhalb von Hochkommas
einzugeben sind. Beispiel: A$ = "PETER"

Systemtakt, der

siehe Takt

Swoboda, der

Informatik-Professor vom Lehrstuhl für Datenverarbeitung an der TU München

Takt, der

Der (System-)takt steuert innerhalb des Computers alle zeitlichen Abläufe
und dient so zur Synchronisation. Vereinfacht ausgedrückt wird pro Takt ein
Maschinenbefehl ausgeführt. Beim C 64 beträgt der Takt knapp 1 Million pro
Sekunde, es können also fast 1 Million Befehle pro Sekunden (in Assembler!)
ausgeführt werden. Der Takt wird auch im VIC zur Bilderzeugung verarbeitet.

temporär
vorübergehend, zeitweilig

Track, der

Spur auf einer Diskette. Jede Diskette des C 64-Laufwerks ist in 41
konzentrische Kreise unterteilt, die zur Datenspeicherung verwendet werden.
Der Tonkopf kann mit einem eigenen Motor in 41 x 2 = 82 Schritten auf jede
der 41 Spuren und dazwischen (»Halftracks«) positioniert werden und so mit
relativ hoher Zugriffszeit die gespeicherten Daten lesen oder verändern. Vom
System werden nur die Spuren 1 bis 35 verwendet. Zu Kopierschutzzwecken oder
um mehr Daten speichern zu können werden von einigen kommerziellen
Programmen auch die physikalisch durchaus vorhandenen Spuren 36 bis 41
verwendet. Der C 64 kann dies mit Programmen wie beispielsweise dem DMS
auch.

Update, das

Neue, ggf. verbesserte Version eines kommerziellen Programms

Userport, der

Schnittstelle des C 64, die sich hinten links befindet. Der Userport enthält
unter anderem je zwei Interrupt-Leitungen und zwei serielle Ports, sowie vor
allem einen neun Bit breiten Datenport, dessen neun Leitungen unabhängig
voneinander jeweils als Aus- oder Eingänge arbeiten können. Der Userport
wird gern von Bastlern genutzt, um eigene Erweiterungen wie Eprom-Brenner,
Modem, Akkustikkoppler, Echtzeituhr, Eisenbahn-Steuerung und dergleichen an
den C 64 anzuschließen. Bei Fehlbedienung des Userport (zum Beispiel
Berührung oder Überspannung) wird in den meisten Fällen eine CIA zerstört.

Variable, die

symbolischer Name, an den ein Wert oder eine Zeichenkette gebunden ist.
Indem sich der Programmierer auf den Namen einer Variablen bezieht, bezieht
er sich auf den in der Variablen enthaltenen Wert. Es gibt verschiedene
Variablenarten, je nachdem, was darin gespeichert werden kann. So ist eine
Integervariable nur zur Aufnahme ganzer Zahlen in einem bestimmten Bereich
geeignet.

VIC, der

»Video Interface Controller«, Baustein im C 64, der das Grafikbild erzeugt
und direkt an den Monitor leitet. Die technische Bezeichnung dieses ICs
lautet 6569.

Warmstart, der

Übergang des Computers in einen definierten Einschaltzustand, wobei
allerdings Programme und Daten nur unterbrochen, nicht aber gelöscht werden
(im Gegensatz zum Kaltstart). Beim C 64 lösen Sie mit der bekannten
Tastenkombination <RUN STOP/RESTORE> einen Warmstart aus.

Zeichensatz, der

Datei, die das Aussehen der Zeichen auf dem Bildschirm oder auch auf dem
Drucker verfügt

Zeropage, die

Speicherbereich beim C 64 von Adresse 0 bis 255 (manchmal wird auch der
Bereich von 0 bis 1023 als Zeropage bezeichnet). Hier befinden sich wichtige
Betriebsdaten zur Steuerung des Basic-Ablaufs und des Basic-Editors. Durch
Manipulationen in diesen Speicherzellen läßt sich Einfluß auf fast alle
internen Vorgänge nehmen.

*********

Directory-Content of the two Discs
with the book "222 Tips, Tricks, Tools fuer den C 64"

Disc 1 of 2:

0 "64'ER BUCH DISK1" IPV92
32   "LIES MICH!"       PRG   
9    "MESS.FONT"        PRG  
45   "MESS.MUSIC"       PRG   
0    "----------------" DEL  
0    "-  KAPITEL 2   -" DEL  
0    "----------------" DEL  
0    "-  ASSEMBLER   -" DEL  
0    "----------------" DEL  
1    "ASS BEISPIEL 1"   PRG  
1    "ASS BEISPIEL 2"   PRG  
1    "ASS BEISPIEL 3"   PRG  
1    "ASS BEISPIEL 4"   PRG  
1    "ASS BEISPIEL 5"   PRG  
1    "ASS BEISPIEL 6"   PRG  
1    "ASS BEISPIEL 7"   PRG  
0    "----------------" DEL  
2    "MT 49152"         PRG  
2    "MT.DEMO"          PRG  
2    "MT.DEMO.MC"       PRG  
2    "MT.DEMO.SP"       PRG  
18   "OP.MULTITASK (K)" PRG   
0    "----------------" DEL  
33   "NSS KERNAL 2764"  PRG   
65   "NSS KERNAL 27128" PRG   
0    "----------------" DEL  
3    "EISBERG"          PRG  
20   "OP.EISBERG"       PRG   
0    "----------------" DEL  
3    "UNCRASH"          PRG  
26   "OP.UNCRASH (K)"   PRG   
0    "----------------" DEL  
5    "QUICKIE-GENERATO" PRG  
2    "QUICK-GEN $7000"  PRG  
4    "QUICKIE DEMO"     PRG  
7    "OP.QUICKIE"       PRG  
0    "----------------" DEL  
33   "NEUES DOS $E000"  PRG   
0    "----------------" DEL  
0    "-  KAPITEL 3   -" DEL  
0    "----------------" DEL  
0    "-    GRAFIK    -" DEL  
0    "----------------" DEL  
14   "SPRITELIST V2"    PRG   
1    "SP.AXT"           PRG  
1    "SP.BRATEN"        PRG  
1    "SP.DISK"          PRG  
1    "SP.MUELLEIMER"    PRG  
1    "SP.SNOOPY"        PRG  
0    "----------------" DEL  
12   "CHARTRANSPOSER"   PRG   
9    "ZS.LINKISCH"      PRG  
9    "ZS.MINI"          PRG  
9    "ZS.OCR"           PRG  
9    "ZS.RAMS"          PRG  
9    "ZS.RUSSIAN"       PRG  
0    "----------------" DEL  
1    "SOFTSCROLL"       PRG  
3    "OP.SOFTSCROLL"    PRG  
0    "----------------" DEL  
2    "DOUBLE PRINT"     PRG  
5    "OP.DOUBLE PRINT"  PRG  
0    "----------------" DEL  
4    "LETTER V2 $C000"  PRG  
4    "LETTER V2 DEMO"   PRG  
16   "OP.LETTER"        PRG   
0    "----------------" DEL  
2    "USING"            PRG  
8    "USING-DEMO"       PRG  
9    "OP.USING"         PRG  
0    "----------------" DEL  
0    "-  KAPITEL 5   -" DEL  
0    "----------------" DEL  
0    "-  SONSTIGES   -" DEL  
0    "----------------" DEL  
13   "DOC 64 $8000"     PRG   
52   "OP.DOC 64 2.2"    PRG   
0    "----------------" DEL  
2    "KALENDER PRG. 1"  PRG  
2    "KALENDER PRG. 2"  PRG  
2    "KALENDER PRG. 3"  PRG  
2    "KALENDER PRG. 4"  PRG  
3    "KALENDER PRG. 5"  PRG  
2    "KALENDER PRG. 6"  PRG  
1    "KALENDER SR 1000" PRG  
2    "KALENDER SR 2000" PRG  
0    "----------------" DEL  
2    "CONDENSED"        PRG  
9    "CONDENSED.DEMO"   PRG  
26   "OP.CONDENSED"     PRG   
0    "----------------" DEL  
12   "MESSAGE-MAKER"    PRG   
3    "MESS.KOPF"        PRG  
45   "OP.MESSAGE-MAKER" PRG   
13   "OP.MESS-KOPF"     PRG   
0    "----------------" DEL  
0    "-     ENDE     -" DEL  
0    "-    DISK 1    -" DEL  
0    "----------------" DEL  
23 BLOCKS FREE.             


Disc 2 of 2:

0 "64'ER BUCH DISK2" IPV92
0    "----------------" DEL  
0    "-  KAPITEL 1   -" DEL  
0    "----------------" DEL  
0    "-    BASIC     -" DEL  
0    "----------------" DEL  
13   "BKS 5.0 (49152)"  PRG   
22   "BKS.WHAT 5.0"     PRG   
0    "----------------" DEL  
1    "HELP !!"          PRG  
18   "BASIC.MSG"        PRG   
32   "OP.HELP"          PRG   
0    "----------------" DEL  
4    "DATA AID"         PRG  
3    "DATA AID DEMO"    PRG  
13   "OP.DATA AID"      PRG   
0    "----------------" DEL  
3    "TI$"              PRG  
29   "OP.TI$"           PRG   
0    "----------------" DEL  
7    "REM-KILLER++"     PRG  
27   "OP.REM-KILLER"    PRG   
0    "----------------" DEL  
2    "64 KEYS (LADER)"  PRG  
9    "OP.64 KEYS (K)"   PRG  
0    "----------------" DEL  
5    "ARRAY OF BYTE"    PRG  
0    "----------------" DEL  
1    "INFORM 49152"     PRG  
2    "INFORM DEMO"      PRG  
13   "OP.INFORM"        PRG   
0    "----------------" DEL  
3    "GENIE-SUCH"       PRG  
7    "GENIE-DEMO"       PRG  
14   "OP.GENIE-SUCH"    PRG   
0    "----------------" DEL  
0    "-  KAPITEL 4   -" DEL  
0    "----------------" DEL  
0    "-    FLOPPY    -" DEL  
0    "----------------" DEL  
15   "REL-DEMOPROGRAMM" PRG   
0    "----------------" DEL  
14   "ARC 1.5"          PRG   
0    "----------------" DEL  
4    "BUMPMASTER"       PRG  
0    "----------------" DEL  
1    "DON'T REPLACE!"   PRG  
5    "OP.DON'T REPLACE" PRG  
0    "----------------" DEL  
15   "TSS 2.1"          PRG   
55   "OP.TSS 2.1"       PRG   
0    "----------------" DEL  
5    "VERIFY 2 FILES"   PRG  
20   "OP.VERIFY 2 FILE" PRG   
0    "----------------" DEL  
5    "UNSCRATCH"        PRG  
15   "OP.UNSCRATCH"     PRG   
0    "----------------" DEL  
7    "TOP SECRET"       PRG  
26   "OP.TOP SECRET"    PRG   
0    "----------------" DEL  
16   "DISK SPY"         PRG   
0    "----------------" DEL  
21   "DMS"              PRG   
0    "----------------" DEL  
14   "TESTER 1541"      PRG   
0    "----------------" DEL  
0    "-     ENDE     -" DEL  
0    "-    DISK 2    -" DEL  
0    "----------------" DEL  
198 BLOCKS FREE.             

These are the disks in T64 archive format, zipped to save space. You will
need to copy the files in the archive to be able to use the programs:

begin 644 222disk.zip
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
'`(/]`0```&]O
`
end

*********

End of the International Project 64 etext of "222 Tips, Tricks und Tools für
den C 64".

*********
